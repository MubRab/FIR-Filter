
prac2_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e628  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002870  0800e7d8  0800e7d8  0001e7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011048  08011048  000300d0  2**0
                  CONTENTS
  4 .ARM          00000008  08011048  08011048  00021048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011050  08011050  000300d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011050  08011050  00021050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011054  08011054  00021054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08011058  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001594  200000d0  08011128  000300d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001664  08011128  00031664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ebfe  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003adf  00000000  00000000  0004ecfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c18  00000000  00000000  000527e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a60  00000000  00000000  000543f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000286ae  00000000  00000000  00055e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000165e7  00000000  00000000  0007e506  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ef28d  00000000  00000000  00094aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00183d7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008708  00000000  00000000  00183df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  0018c500  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0018c524  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e7c0 	.word	0x0800e7c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d4 	.word	0x200000d4
 80001ec:	0800e7c0 	.word	0x0800e7c0

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 bc48 	b.w	80014a0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 fadc 	bl	80011d4 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__muldc3>:
 8000c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c2c:	ec57 6b10 	vmov	r6, r7, d0
 8000c30:	ec59 8b12 	vmov	r8, r9, d2
 8000c34:	b095      	sub	sp, #84	; 0x54
 8000c36:	ee12 2a10 	vmov	r2, s4
 8000c3a:	ee10 0a10 	vmov	r0, s0
 8000c3e:	4639      	mov	r1, r7
 8000c40:	464b      	mov	r3, r9
 8000c42:	ec55 4b13 	vmov	r4, r5, d3
 8000c46:	ec5b ab11 	vmov	sl, fp, d1
 8000c4a:	ed8d 0b08 	vstr	d0, [sp, #32]
 8000c4e:	ed8d 3b0a 	vstr	d3, [sp, #40]	; 0x28
 8000c52:	f7ff fc89 	bl	8000568 <__aeabi_dmul>
 8000c56:	4622      	mov	r2, r4
 8000c58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000c5c:	462b      	mov	r3, r5
 8000c5e:	4650      	mov	r0, sl
 8000c60:	4659      	mov	r1, fp
 8000c62:	f7ff fc81 	bl	8000568 <__aeabi_dmul>
 8000c66:	4622      	mov	r2, r4
 8000c68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000c6c:	462b      	mov	r3, r5
 8000c6e:	4630      	mov	r0, r6
 8000c70:	4639      	mov	r1, r7
 8000c72:	f7ff fc79 	bl	8000568 <__aeabi_dmul>
 8000c76:	4652      	mov	r2, sl
 8000c78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8000c7c:	465b      	mov	r3, fp
 8000c7e:	4640      	mov	r0, r8
 8000c80:	4649      	mov	r1, r9
 8000c82:	f7ff fc71 	bl	8000568 <__aeabi_dmul>
 8000c86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000c8a:	4606      	mov	r6, r0
 8000c8c:	460f      	mov	r7, r1
 8000c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000c92:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 8000c96:	f7ff faaf 	bl	80001f8 <__aeabi_dsub>
 8000c9a:	4632      	mov	r2, r6
 8000c9c:	4604      	mov	r4, r0
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8000ca6:	f7ff faa9 	bl	80001fc <__adddf3>
 8000caa:	4622      	mov	r2, r4
 8000cac:	e9cd 0100 	strd	r0, r1, [sp]
 8000cb0:	462b      	mov	r3, r5
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	4629      	mov	r1, r5
 8000cb6:	f7ff febf 	bl	8000a38 <__aeabi_dcmpeq>
 8000cba:	b130      	cbz	r0, 8000cca <__muldc3+0xa2>
 8000cbc:	ed9d 1b00 	vldr	d1, [sp]
 8000cc0:	ec45 4b10 	vmov	d0, r4, r5
 8000cc4:	b015      	add	sp, #84	; 0x54
 8000cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	f7ff feb1 	bl	8000a38 <__aeabi_dcmpeq>
 8000cd6:	2800      	cmp	r0, #0
 8000cd8:	d1f0      	bne.n	8000cbc <__muldc3+0x94>
 8000cda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000cde:	4602      	mov	r2, r0
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	f7ff fa89 	bl	80001f8 <__aeabi_dsub>
 8000ce6:	4652      	mov	r2, sl
 8000ce8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8000cec:	465b      	mov	r3, fp
 8000cee:	4650      	mov	r0, sl
 8000cf0:	4659      	mov	r1, fp
 8000cf2:	f7ff fa81 	bl	80001f8 <__aeabi_dsub>
 8000cf6:	f04f 0601 	mov.w	r6, #1
 8000cfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8000cfe:	4652      	mov	r2, sl
 8000d00:	465b      	mov	r3, fp
 8000d02:	4650      	mov	r0, sl
 8000d04:	4659      	mov	r1, fp
 8000d06:	4637      	mov	r7, r6
 8000d08:	f7ff fe96 	bl	8000a38 <__aeabi_dcmpeq>
 8000d0c:	b910      	cbnz	r0, 8000d14 <__muldc3+0xec>
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	461f      	mov	r7, r3
 8000d14:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8000d18:	4610      	mov	r0, r2
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 0601 	mov.w	r6, #1
 8000d20:	f7ff fe8a 	bl	8000a38 <__aeabi_dcmpeq>
 8000d24:	b110      	cbz	r0, 8000d2c <__muldc3+0x104>
 8000d26:	f04f 0300 	mov.w	r3, #0
 8000d2a:	461e      	mov	r6, r3
 8000d2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000d30:	ea07 0c06 	and.w	ip, r7, r6
 8000d34:	fa5f f68c 	uxtb.w	r6, ip
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	960e      	str	r6, [sp, #56]	; 0x38
 8000d3e:	f04f 0601 	mov.w	r6, #1
 8000d42:	f7ff fe79 	bl	8000a38 <__aeabi_dcmpeq>
 8000d46:	b910      	cbnz	r0, 8000d4e <__muldc3+0x126>
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	461e      	mov	r6, r3
 8000d4e:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000d52:	d00f      	beq.n	8000d74 <__muldc3+0x14c>
 8000d54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8000d58:	4610      	mov	r0, r2
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f04f 0601 	mov.w	r6, #1
 8000d60:	f7ff fe6a 	bl	8000a38 <__aeabi_dcmpeq>
 8000d64:	b110      	cbz	r0, 8000d6c <__muldc3+0x144>
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	461e      	mov	r6, r3
 8000d6c:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000d70:	f040 8183 	bne.w	800107a <__muldc3+0x452>
 8000d74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f040 81b9 	bne.w	80010ee <__muldc3+0x4c6>
 8000d7c:	4642      	mov	r2, r8
 8000d7e:	464b      	mov	r3, r9
 8000d80:	4640      	mov	r0, r8
 8000d82:	4649      	mov	r1, r9
 8000d84:	f7ff fa38 	bl	80001f8 <__aeabi_dsub>
 8000d88:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8000d8c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8000d90:	4632      	mov	r2, r6
 8000d92:	463b      	mov	r3, r7
 8000d94:	4630      	mov	r0, r6
 8000d96:	4639      	mov	r1, r7
 8000d98:	f7ff fa2e 	bl	80001f8 <__aeabi_dsub>
 8000d9c:	4632      	mov	r2, r6
 8000d9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8000da2:	463b      	mov	r3, r7
 8000da4:	4630      	mov	r0, r6
 8000da6:	4639      	mov	r1, r7
 8000da8:	f04f 0601 	mov.w	r6, #1
 8000dac:	4637      	mov	r7, r6
 8000dae:	f7ff fe43 	bl	8000a38 <__aeabi_dcmpeq>
 8000db2:	b910      	cbnz	r0, 8000dba <__muldc3+0x192>
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	461f      	mov	r7, r3
 8000dba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f04f 0601 	mov.w	r6, #1
 8000dc6:	f7ff fe37 	bl	8000a38 <__aeabi_dcmpeq>
 8000dca:	b110      	cbz	r0, 8000dd2 <__muldc3+0x1aa>
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	461e      	mov	r6, r3
 8000dd2:	ea07 0c06 	and.w	ip, r7, r6
 8000dd6:	fa5f f68c 	uxtb.w	r6, ip
 8000dda:	4642      	mov	r2, r8
 8000ddc:	464b      	mov	r3, r9
 8000dde:	4640      	mov	r0, r8
 8000de0:	4649      	mov	r1, r9
 8000de2:	4637      	mov	r7, r6
 8000de4:	f04f 0601 	mov.w	r6, #1
 8000de8:	f7ff fe26 	bl	8000a38 <__aeabi_dcmpeq>
 8000dec:	b910      	cbnz	r0, 8000df4 <__muldc3+0x1cc>
 8000dee:	f04f 0300 	mov.w	r3, #0
 8000df2:	461e      	mov	r6, r3
 8000df4:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000df8:	d00f      	beq.n	8000e1a <__muldc3+0x1f2>
 8000dfa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f04f 0601 	mov.w	r6, #1
 8000e06:	f7ff fe17 	bl	8000a38 <__aeabi_dcmpeq>
 8000e0a:	b110      	cbz	r0, 8000e12 <__muldc3+0x1ea>
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	461e      	mov	r6, r3
 8000e12:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000e16:	f040 80fa 	bne.w	800100e <__muldc3+0x3e6>
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	f040 8158 	bne.w	80010d0 <__muldc3+0x4a8>
 8000e20:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f040 80bc 	bne.w	8000fa0 <__muldc3+0x378>
 8000e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	f7ff f9e2 	bl	80001f8 <__aeabi_dsub>
 8000e34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e38:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 0701 	mov.w	r7, #1
 8000e44:	f7ff fdf8 	bl	8000a38 <__aeabi_dcmpeq>
 8000e48:	b900      	cbnz	r0, 8000e4c <__muldc3+0x224>
 8000e4a:	4637      	mov	r7, r6
 8000e4c:	f017 0fff 	tst.w	r7, #255	; 0xff
 8000e50:	d00e      	beq.n	8000e70 <__muldc3+0x248>
 8000e52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8000e56:	4610      	mov	r0, r2
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f04f 0601 	mov.w	r6, #1
 8000e5e:	f7ff fdeb 	bl	8000a38 <__aeabi_dcmpeq>
 8000e62:	b110      	cbz	r0, 8000e6a <__muldc3+0x242>
 8000e64:	f04f 0300 	mov.w	r3, #0
 8000e68:	461e      	mov	r6, r3
 8000e6a:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000e6e:	d173      	bne.n	8000f58 <__muldc3+0x330>
 8000e70:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8000e74:	4632      	mov	r2, r6
 8000e76:	463b      	mov	r3, r7
 8000e78:	4630      	mov	r0, r6
 8000e7a:	4639      	mov	r1, r7
 8000e7c:	f7ff f9bc 	bl	80001f8 <__aeabi_dsub>
 8000e80:	463b      	mov	r3, r7
 8000e82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000e86:	4632      	mov	r2, r6
 8000e88:	4630      	mov	r0, r6
 8000e8a:	4639      	mov	r1, r7
 8000e8c:	f7ff fdd4 	bl	8000a38 <__aeabi_dcmpeq>
 8000e90:	f04f 0301 	mov.w	r3, #1
 8000e94:	b900      	cbnz	r0, 8000e98 <__muldc3+0x270>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000e9c:	d00e      	beq.n	8000ebc <__muldc3+0x294>
 8000e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 0601 	mov.w	r6, #1
 8000eaa:	f7ff fdc5 	bl	8000a38 <__aeabi_dcmpeq>
 8000eae:	b110      	cbz	r0, 8000eb6 <__muldc3+0x28e>
 8000eb0:	f04f 0300 	mov.w	r3, #0
 8000eb4:	461e      	mov	r6, r3
 8000eb6:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000eba:	d14d      	bne.n	8000f58 <__muldc3+0x330>
 8000ebc:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8000ec0:	4632      	mov	r2, r6
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	4639      	mov	r1, r7
 8000ec8:	f7ff f996 	bl	80001f8 <__aeabi_dsub>
 8000ecc:	463b      	mov	r3, r7
 8000ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000ed2:	4632      	mov	r2, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	4639      	mov	r1, r7
 8000ed8:	f7ff fdae 	bl	8000a38 <__aeabi_dcmpeq>
 8000edc:	f04f 0301 	mov.w	r3, #1
 8000ee0:	b900      	cbnz	r0, 8000ee4 <__muldc3+0x2bc>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000ee8:	d00e      	beq.n	8000f08 <__muldc3+0x2e0>
 8000eea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f04f 0601 	mov.w	r6, #1
 8000ef6:	f7ff fd9f 	bl	8000a38 <__aeabi_dcmpeq>
 8000efa:	b110      	cbz	r0, 8000f02 <__muldc3+0x2da>
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	461e      	mov	r6, r3
 8000f02:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000f06:	d127      	bne.n	8000f58 <__muldc3+0x330>
 8000f08:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8000f0c:	4632      	mov	r2, r6
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4630      	mov	r0, r6
 8000f12:	4639      	mov	r1, r7
 8000f14:	f7ff f970 	bl	80001f8 <__aeabi_dsub>
 8000f18:	463b      	mov	r3, r7
 8000f1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000f1e:	4632      	mov	r2, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	4639      	mov	r1, r7
 8000f24:	f7ff fd88 	bl	8000a38 <__aeabi_dcmpeq>
 8000f28:	f04f 0301 	mov.w	r3, #1
 8000f2c:	b900      	cbnz	r0, 8000f30 <__muldc3+0x308>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000f34:	f43f aec2 	beq.w	8000cbc <__muldc3+0x94>
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f04f 0601 	mov.w	r6, #1
 8000f44:	f7ff fd78 	bl	8000a38 <__aeabi_dcmpeq>
 8000f48:	b110      	cbz	r0, 8000f50 <__muldc3+0x328>
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	461e      	mov	r6, r3
 8000f50:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000f54:	f43f aeb2 	beq.w	8000cbc <__muldc3+0x94>
 8000f58:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	f7ff fd6a 	bl	8000a38 <__aeabi_dcmpeq>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	f000 8121 	beq.w	80011ac <__muldc3+0x584>
 8000f6a:	4652      	mov	r2, sl
 8000f6c:	465b      	mov	r3, fp
 8000f6e:	4650      	mov	r0, sl
 8000f70:	4659      	mov	r1, fp
 8000f72:	f7ff fd61 	bl	8000a38 <__aeabi_dcmpeq>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	f000 810b 	beq.w	8001192 <__muldc3+0x56a>
 8000f7c:	4642      	mov	r2, r8
 8000f7e:	464b      	mov	r3, r9
 8000f80:	4640      	mov	r0, r8
 8000f82:	4649      	mov	r1, r9
 8000f84:	f7ff fd58 	bl	8000a38 <__aeabi_dcmpeq>
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	f000 80f5 	beq.w	8001178 <__muldc3+0x550>
 8000f8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	f7ff fd4f 	bl	8000a38 <__aeabi_dcmpeq>
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	f000 80df 	beq.w	800115e <__muldc3+0x536>
 8000fa0:	4642      	mov	r2, r8
 8000fa2:	464b      	mov	r3, r9
 8000fa4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000fa8:	f7ff fade 	bl	8000568 <__aeabi_dmul>
 8000fac:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	460d      	mov	r5, r1
 8000fb4:	4632      	mov	r2, r6
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4650      	mov	r0, sl
 8000fba:	4659      	mov	r1, fp
 8000fbc:	f7ff fad4 	bl	8000568 <__aeabi_dmul>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	f7ff f916 	bl	80001f8 <__aeabi_dsub>
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4b7e      	ldr	r3, [pc, #504]	; (80011c8 <__muldc3+0x5a0>)
 8000fd0:	f7ff faca 	bl	8000568 <__aeabi_dmul>
 8000fd4:	4632      	mov	r2, r6
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4604      	mov	r4, r0
 8000fda:	460d      	mov	r5, r1
 8000fdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000fe0:	f7ff fac2 	bl	8000568 <__aeabi_dmul>
 8000fe4:	4642      	mov	r2, r8
 8000fe6:	4606      	mov	r6, r0
 8000fe8:	460f      	mov	r7, r1
 8000fea:	464b      	mov	r3, r9
 8000fec:	4650      	mov	r0, sl
 8000fee:	4659      	mov	r1, fp
 8000ff0:	f7ff faba 	bl	8000568 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	4639      	mov	r1, r7
 8000ffc:	f7ff f8fe 	bl	80001fc <__adddf3>
 8001000:	2200      	movs	r2, #0
 8001002:	4b71      	ldr	r3, [pc, #452]	; (80011c8 <__muldc3+0x5a0>)
 8001004:	f7ff fab0 	bl	8000568 <__aeabi_dmul>
 8001008:	e9cd 0100 	strd	r0, r1, [sp]
 800100c:	e656      	b.n	8000cbc <__muldc3+0x94>
 800100e:	f1b9 0f00 	cmp.w	r9, #0
 8001012:	4b6e      	ldr	r3, [pc, #440]	; (80011cc <__muldc3+0x5a4>)
 8001014:	bfb8      	it	lt
 8001016:	4b6e      	ldrlt	r3, [pc, #440]	; (80011d0 <__muldc3+0x5a8>)
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	bfb8      	it	lt
 800101e:	2200      	movlt	r2, #0
 8001020:	4690      	mov	r8, r2
 8001022:	4699      	mov	r9, r3
 8001024:	2200      	movs	r2, #0
 8001026:	2f00      	cmp	r7, #0
 8001028:	d15f      	bne.n	80010ea <__muldc3+0x4c2>
 800102a:	2300      	movs	r3, #0
 800102c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800102e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001032:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001036:	ea43 0501 	orr.w	r5, r3, r1
 800103a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800103e:	4614      	mov	r4, r2
 8001040:	460b      	mov	r3, r1
 8001042:	4602      	mov	r2, r0
 8001044:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8001048:	f7ff fcf6 	bl	8000a38 <__aeabi_dcmpeq>
 800104c:	2800      	cmp	r0, #0
 800104e:	d06a      	beq.n	8001126 <__muldc3+0x4fe>
 8001050:	4652      	mov	r2, sl
 8001052:	465b      	mov	r3, fp
 8001054:	4650      	mov	r0, sl
 8001056:	4659      	mov	r1, fp
 8001058:	f7ff fcee 	bl	8000a38 <__aeabi_dcmpeq>
 800105c:	2800      	cmp	r0, #0
 800105e:	d19f      	bne.n	8000fa0 <__muldc3+0x378>
 8001060:	f1bb 0f00 	cmp.w	fp, #0
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	bfbc      	itt	lt
 800106e:	2200      	movlt	r2, #0
 8001070:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001074:	4692      	mov	sl, r2
 8001076:	469b      	mov	fp, r3
 8001078:	e792      	b.n	8000fa0 <__muldc3+0x378>
 800107a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800107c:	4b53      	ldr	r3, [pc, #332]	; (80011cc <__muldc3+0x5a4>)
 800107e:	2900      	cmp	r1, #0
 8001080:	bfb8      	it	lt
 8001082:	4b53      	ldrlt	r3, [pc, #332]	; (80011d0 <__muldc3+0x5a8>)
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	bfb8      	it	lt
 800108a:	2200      	movlt	r2, #0
 800108c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001092:	2200      	movs	r2, #0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d137      	bne.n	8001108 <__muldc3+0x4e0>
 8001098:	2300      	movs	r3, #0
 800109a:	f00b 4100 	and.w	r1, fp, #2147483648	; 0x80000000
 800109e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010a2:	430b      	orrs	r3, r1
 80010a4:	4616      	mov	r6, r2
 80010a6:	461f      	mov	r7, r3
 80010a8:	4642      	mov	r2, r8
 80010aa:	464b      	mov	r3, r9
 80010ac:	4640      	mov	r0, r8
 80010ae:	4649      	mov	r1, r9
 80010b0:	46b2      	mov	sl, r6
 80010b2:	46bb      	mov	fp, r7
 80010b4:	f7ff fcc0 	bl	8000a38 <__aeabi_dcmpeq>
 80010b8:	b340      	cbz	r0, 800110c <__muldc3+0x4e4>
 80010ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	f7ff fcb9 	bl	8000a38 <__aeabi_dcmpeq>
 80010c6:	2800      	cmp	r0, #0
 80010c8:	d03a      	beq.n	8001140 <__muldc3+0x518>
 80010ca:	2301      	movs	r3, #1
 80010cc:	930e      	str	r3, [sp, #56]	; 0x38
 80010ce:	e655      	b.n	8000d7c <__muldc3+0x154>
 80010d0:	f1b9 0f00 	cmp.w	r9, #0
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	bfbc      	itt	lt
 80010de:	2200      	movlt	r2, #0
 80010e0:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80010e4:	4690      	mov	r8, r2
 80010e6:	4699      	mov	r9, r3
 80010e8:	2200      	movs	r2, #0
 80010ea:	4b38      	ldr	r3, [pc, #224]	; (80011cc <__muldc3+0x5a4>)
 80010ec:	e79e      	b.n	800102c <__muldc3+0x404>
 80010ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80010f0:	2900      	cmp	r1, #0
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	bfbc      	itt	lt
 80010fc:	2200      	movlt	r2, #0
 80010fe:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001102:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001106:	2200      	movs	r2, #0
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <__muldc3+0x5a4>)
 800110a:	e7c6      	b.n	800109a <__muldc3+0x472>
 800110c:	f1b9 0f00 	cmp.w	r9, #0
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	bfbc      	itt	lt
 800111a:	2200      	movlt	r2, #0
 800111c:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001120:	4690      	mov	r8, r2
 8001122:	4699      	mov	r9, r3
 8001124:	e7c9      	b.n	80010ba <__muldc3+0x492>
 8001126:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001128:	2900      	cmp	r1, #0
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	bfbc      	itt	lt
 8001134:	2200      	movlt	r2, #0
 8001136:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 800113a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800113e:	e787      	b.n	8001050 <__muldc3+0x428>
 8001140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001142:	2900      	cmp	r1, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	bfbc      	itt	lt
 800114e:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001152:	2200      	movlt	r2, #0
 8001154:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001158:	2301      	movs	r3, #1
 800115a:	930e      	str	r3, [sp, #56]	; 0x38
 800115c:	e60e      	b.n	8000d7c <__muldc3+0x154>
 800115e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001160:	2900      	cmp	r1, #0
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	bfbc      	itt	lt
 800116c:	2200      	movlt	r2, #0
 800116e:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001172:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001176:	e713      	b.n	8000fa0 <__muldc3+0x378>
 8001178:	f1b9 0f00 	cmp.w	r9, #0
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	bfbc      	itt	lt
 8001186:	2200      	movlt	r2, #0
 8001188:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 800118c:	4690      	mov	r8, r2
 800118e:	4699      	mov	r9, r3
 8001190:	e6fd      	b.n	8000f8e <__muldc3+0x366>
 8001192:	f1bb 0f00 	cmp.w	fp, #0
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	bfbc      	itt	lt
 80011a0:	2200      	movlt	r2, #0
 80011a2:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80011a6:	4692      	mov	sl, r2
 80011a8:	469b      	mov	fp, r3
 80011aa:	e6e7      	b.n	8000f7c <__muldc3+0x354>
 80011ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80011ae:	2900      	cmp	r1, #0
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	f04f 0300 	mov.w	r3, #0
 80011b8:	bfbc      	itt	lt
 80011ba:	2200      	movlt	r2, #0
 80011bc:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80011c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80011c4:	e6d1      	b.n	8000f6a <__muldc3+0x342>
 80011c6:	bf00      	nop
 80011c8:	7ff00000 	.word	0x7ff00000
 80011cc:	3ff00000 	.word	0x3ff00000
 80011d0:	bff00000 	.word	0xbff00000

080011d4 <__udivmoddi4>:
 80011d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011d8:	9e08      	ldr	r6, [sp, #32]
 80011da:	4604      	mov	r4, r0
 80011dc:	4688      	mov	r8, r1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d14b      	bne.n	800127a <__udivmoddi4+0xa6>
 80011e2:	428a      	cmp	r2, r1
 80011e4:	4615      	mov	r5, r2
 80011e6:	d967      	bls.n	80012b8 <__udivmoddi4+0xe4>
 80011e8:	fab2 f282 	clz	r2, r2
 80011ec:	b14a      	cbz	r2, 8001202 <__udivmoddi4+0x2e>
 80011ee:	f1c2 0720 	rsb	r7, r2, #32
 80011f2:	fa01 f302 	lsl.w	r3, r1, r2
 80011f6:	fa20 f707 	lsr.w	r7, r0, r7
 80011fa:	4095      	lsls	r5, r2
 80011fc:	ea47 0803 	orr.w	r8, r7, r3
 8001200:	4094      	lsls	r4, r2
 8001202:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001206:	0c23      	lsrs	r3, r4, #16
 8001208:	fbb8 f7fe 	udiv	r7, r8, lr
 800120c:	fa1f fc85 	uxth.w	ip, r5
 8001210:	fb0e 8817 	mls	r8, lr, r7, r8
 8001214:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001218:	fb07 f10c 	mul.w	r1, r7, ip
 800121c:	4299      	cmp	r1, r3
 800121e:	d909      	bls.n	8001234 <__udivmoddi4+0x60>
 8001220:	18eb      	adds	r3, r5, r3
 8001222:	f107 30ff 	add.w	r0, r7, #4294967295
 8001226:	f080 811b 	bcs.w	8001460 <__udivmoddi4+0x28c>
 800122a:	4299      	cmp	r1, r3
 800122c:	f240 8118 	bls.w	8001460 <__udivmoddi4+0x28c>
 8001230:	3f02      	subs	r7, #2
 8001232:	442b      	add	r3, r5
 8001234:	1a5b      	subs	r3, r3, r1
 8001236:	b2a4      	uxth	r4, r4
 8001238:	fbb3 f0fe 	udiv	r0, r3, lr
 800123c:	fb0e 3310 	mls	r3, lr, r0, r3
 8001240:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001244:	fb00 fc0c 	mul.w	ip, r0, ip
 8001248:	45a4      	cmp	ip, r4
 800124a:	d909      	bls.n	8001260 <__udivmoddi4+0x8c>
 800124c:	192c      	adds	r4, r5, r4
 800124e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001252:	f080 8107 	bcs.w	8001464 <__udivmoddi4+0x290>
 8001256:	45a4      	cmp	ip, r4
 8001258:	f240 8104 	bls.w	8001464 <__udivmoddi4+0x290>
 800125c:	3802      	subs	r0, #2
 800125e:	442c      	add	r4, r5
 8001260:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001264:	eba4 040c 	sub.w	r4, r4, ip
 8001268:	2700      	movs	r7, #0
 800126a:	b11e      	cbz	r6, 8001274 <__udivmoddi4+0xa0>
 800126c:	40d4      	lsrs	r4, r2
 800126e:	2300      	movs	r3, #0
 8001270:	e9c6 4300 	strd	r4, r3, [r6]
 8001274:	4639      	mov	r1, r7
 8001276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800127a:	428b      	cmp	r3, r1
 800127c:	d909      	bls.n	8001292 <__udivmoddi4+0xbe>
 800127e:	2e00      	cmp	r6, #0
 8001280:	f000 80eb 	beq.w	800145a <__udivmoddi4+0x286>
 8001284:	2700      	movs	r7, #0
 8001286:	e9c6 0100 	strd	r0, r1, [r6]
 800128a:	4638      	mov	r0, r7
 800128c:	4639      	mov	r1, r7
 800128e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001292:	fab3 f783 	clz	r7, r3
 8001296:	2f00      	cmp	r7, #0
 8001298:	d147      	bne.n	800132a <__udivmoddi4+0x156>
 800129a:	428b      	cmp	r3, r1
 800129c:	d302      	bcc.n	80012a4 <__udivmoddi4+0xd0>
 800129e:	4282      	cmp	r2, r0
 80012a0:	f200 80fa 	bhi.w	8001498 <__udivmoddi4+0x2c4>
 80012a4:	1a84      	subs	r4, r0, r2
 80012a6:	eb61 0303 	sbc.w	r3, r1, r3
 80012aa:	2001      	movs	r0, #1
 80012ac:	4698      	mov	r8, r3
 80012ae:	2e00      	cmp	r6, #0
 80012b0:	d0e0      	beq.n	8001274 <__udivmoddi4+0xa0>
 80012b2:	e9c6 4800 	strd	r4, r8, [r6]
 80012b6:	e7dd      	b.n	8001274 <__udivmoddi4+0xa0>
 80012b8:	b902      	cbnz	r2, 80012bc <__udivmoddi4+0xe8>
 80012ba:	deff      	udf	#255	; 0xff
 80012bc:	fab2 f282 	clz	r2, r2
 80012c0:	2a00      	cmp	r2, #0
 80012c2:	f040 808f 	bne.w	80013e4 <__udivmoddi4+0x210>
 80012c6:	1b49      	subs	r1, r1, r5
 80012c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80012cc:	fa1f f885 	uxth.w	r8, r5
 80012d0:	2701      	movs	r7, #1
 80012d2:	fbb1 fcfe 	udiv	ip, r1, lr
 80012d6:	0c23      	lsrs	r3, r4, #16
 80012d8:	fb0e 111c 	mls	r1, lr, ip, r1
 80012dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012e0:	fb08 f10c 	mul.w	r1, r8, ip
 80012e4:	4299      	cmp	r1, r3
 80012e6:	d907      	bls.n	80012f8 <__udivmoddi4+0x124>
 80012e8:	18eb      	adds	r3, r5, r3
 80012ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80012ee:	d202      	bcs.n	80012f6 <__udivmoddi4+0x122>
 80012f0:	4299      	cmp	r1, r3
 80012f2:	f200 80cd 	bhi.w	8001490 <__udivmoddi4+0x2bc>
 80012f6:	4684      	mov	ip, r0
 80012f8:	1a59      	subs	r1, r3, r1
 80012fa:	b2a3      	uxth	r3, r4
 80012fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8001300:	fb0e 1410 	mls	r4, lr, r0, r1
 8001304:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001308:	fb08 f800 	mul.w	r8, r8, r0
 800130c:	45a0      	cmp	r8, r4
 800130e:	d907      	bls.n	8001320 <__udivmoddi4+0x14c>
 8001310:	192c      	adds	r4, r5, r4
 8001312:	f100 33ff 	add.w	r3, r0, #4294967295
 8001316:	d202      	bcs.n	800131e <__udivmoddi4+0x14a>
 8001318:	45a0      	cmp	r8, r4
 800131a:	f200 80b6 	bhi.w	800148a <__udivmoddi4+0x2b6>
 800131e:	4618      	mov	r0, r3
 8001320:	eba4 0408 	sub.w	r4, r4, r8
 8001324:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001328:	e79f      	b.n	800126a <__udivmoddi4+0x96>
 800132a:	f1c7 0c20 	rsb	ip, r7, #32
 800132e:	40bb      	lsls	r3, r7
 8001330:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001334:	ea4e 0e03 	orr.w	lr, lr, r3
 8001338:	fa01 f407 	lsl.w	r4, r1, r7
 800133c:	fa20 f50c 	lsr.w	r5, r0, ip
 8001340:	fa21 f30c 	lsr.w	r3, r1, ip
 8001344:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001348:	4325      	orrs	r5, r4
 800134a:	fbb3 f9f8 	udiv	r9, r3, r8
 800134e:	0c2c      	lsrs	r4, r5, #16
 8001350:	fb08 3319 	mls	r3, r8, r9, r3
 8001354:	fa1f fa8e 	uxth.w	sl, lr
 8001358:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800135c:	fb09 f40a 	mul.w	r4, r9, sl
 8001360:	429c      	cmp	r4, r3
 8001362:	fa02 f207 	lsl.w	r2, r2, r7
 8001366:	fa00 f107 	lsl.w	r1, r0, r7
 800136a:	d90b      	bls.n	8001384 <__udivmoddi4+0x1b0>
 800136c:	eb1e 0303 	adds.w	r3, lr, r3
 8001370:	f109 30ff 	add.w	r0, r9, #4294967295
 8001374:	f080 8087 	bcs.w	8001486 <__udivmoddi4+0x2b2>
 8001378:	429c      	cmp	r4, r3
 800137a:	f240 8084 	bls.w	8001486 <__udivmoddi4+0x2b2>
 800137e:	f1a9 0902 	sub.w	r9, r9, #2
 8001382:	4473      	add	r3, lr
 8001384:	1b1b      	subs	r3, r3, r4
 8001386:	b2ad      	uxth	r5, r5
 8001388:	fbb3 f0f8 	udiv	r0, r3, r8
 800138c:	fb08 3310 	mls	r3, r8, r0, r3
 8001390:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001394:	fb00 fa0a 	mul.w	sl, r0, sl
 8001398:	45a2      	cmp	sl, r4
 800139a:	d908      	bls.n	80013ae <__udivmoddi4+0x1da>
 800139c:	eb1e 0404 	adds.w	r4, lr, r4
 80013a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80013a4:	d26b      	bcs.n	800147e <__udivmoddi4+0x2aa>
 80013a6:	45a2      	cmp	sl, r4
 80013a8:	d969      	bls.n	800147e <__udivmoddi4+0x2aa>
 80013aa:	3802      	subs	r0, #2
 80013ac:	4474      	add	r4, lr
 80013ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013b2:	fba0 8902 	umull	r8, r9, r0, r2
 80013b6:	eba4 040a 	sub.w	r4, r4, sl
 80013ba:	454c      	cmp	r4, r9
 80013bc:	46c2      	mov	sl, r8
 80013be:	464b      	mov	r3, r9
 80013c0:	d354      	bcc.n	800146c <__udivmoddi4+0x298>
 80013c2:	d051      	beq.n	8001468 <__udivmoddi4+0x294>
 80013c4:	2e00      	cmp	r6, #0
 80013c6:	d069      	beq.n	800149c <__udivmoddi4+0x2c8>
 80013c8:	ebb1 050a 	subs.w	r5, r1, sl
 80013cc:	eb64 0403 	sbc.w	r4, r4, r3
 80013d0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80013d4:	40fd      	lsrs	r5, r7
 80013d6:	40fc      	lsrs	r4, r7
 80013d8:	ea4c 0505 	orr.w	r5, ip, r5
 80013dc:	e9c6 5400 	strd	r5, r4, [r6]
 80013e0:	2700      	movs	r7, #0
 80013e2:	e747      	b.n	8001274 <__udivmoddi4+0xa0>
 80013e4:	f1c2 0320 	rsb	r3, r2, #32
 80013e8:	fa20 f703 	lsr.w	r7, r0, r3
 80013ec:	4095      	lsls	r5, r2
 80013ee:	fa01 f002 	lsl.w	r0, r1, r2
 80013f2:	fa21 f303 	lsr.w	r3, r1, r3
 80013f6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80013fa:	4338      	orrs	r0, r7
 80013fc:	0c01      	lsrs	r1, r0, #16
 80013fe:	fbb3 f7fe 	udiv	r7, r3, lr
 8001402:	fa1f f885 	uxth.w	r8, r5
 8001406:	fb0e 3317 	mls	r3, lr, r7, r3
 800140a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800140e:	fb07 f308 	mul.w	r3, r7, r8
 8001412:	428b      	cmp	r3, r1
 8001414:	fa04 f402 	lsl.w	r4, r4, r2
 8001418:	d907      	bls.n	800142a <__udivmoddi4+0x256>
 800141a:	1869      	adds	r1, r5, r1
 800141c:	f107 3cff 	add.w	ip, r7, #4294967295
 8001420:	d22f      	bcs.n	8001482 <__udivmoddi4+0x2ae>
 8001422:	428b      	cmp	r3, r1
 8001424:	d92d      	bls.n	8001482 <__udivmoddi4+0x2ae>
 8001426:	3f02      	subs	r7, #2
 8001428:	4429      	add	r1, r5
 800142a:	1acb      	subs	r3, r1, r3
 800142c:	b281      	uxth	r1, r0
 800142e:	fbb3 f0fe 	udiv	r0, r3, lr
 8001432:	fb0e 3310 	mls	r3, lr, r0, r3
 8001436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800143a:	fb00 f308 	mul.w	r3, r0, r8
 800143e:	428b      	cmp	r3, r1
 8001440:	d907      	bls.n	8001452 <__udivmoddi4+0x27e>
 8001442:	1869      	adds	r1, r5, r1
 8001444:	f100 3cff 	add.w	ip, r0, #4294967295
 8001448:	d217      	bcs.n	800147a <__udivmoddi4+0x2a6>
 800144a:	428b      	cmp	r3, r1
 800144c:	d915      	bls.n	800147a <__udivmoddi4+0x2a6>
 800144e:	3802      	subs	r0, #2
 8001450:	4429      	add	r1, r5
 8001452:	1ac9      	subs	r1, r1, r3
 8001454:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001458:	e73b      	b.n	80012d2 <__udivmoddi4+0xfe>
 800145a:	4637      	mov	r7, r6
 800145c:	4630      	mov	r0, r6
 800145e:	e709      	b.n	8001274 <__udivmoddi4+0xa0>
 8001460:	4607      	mov	r7, r0
 8001462:	e6e7      	b.n	8001234 <__udivmoddi4+0x60>
 8001464:	4618      	mov	r0, r3
 8001466:	e6fb      	b.n	8001260 <__udivmoddi4+0x8c>
 8001468:	4541      	cmp	r1, r8
 800146a:	d2ab      	bcs.n	80013c4 <__udivmoddi4+0x1f0>
 800146c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001470:	eb69 020e 	sbc.w	r2, r9, lr
 8001474:	3801      	subs	r0, #1
 8001476:	4613      	mov	r3, r2
 8001478:	e7a4      	b.n	80013c4 <__udivmoddi4+0x1f0>
 800147a:	4660      	mov	r0, ip
 800147c:	e7e9      	b.n	8001452 <__udivmoddi4+0x27e>
 800147e:	4618      	mov	r0, r3
 8001480:	e795      	b.n	80013ae <__udivmoddi4+0x1da>
 8001482:	4667      	mov	r7, ip
 8001484:	e7d1      	b.n	800142a <__udivmoddi4+0x256>
 8001486:	4681      	mov	r9, r0
 8001488:	e77c      	b.n	8001384 <__udivmoddi4+0x1b0>
 800148a:	3802      	subs	r0, #2
 800148c:	442c      	add	r4, r5
 800148e:	e747      	b.n	8001320 <__udivmoddi4+0x14c>
 8001490:	f1ac 0c02 	sub.w	ip, ip, #2
 8001494:	442b      	add	r3, r5
 8001496:	e72f      	b.n	80012f8 <__udivmoddi4+0x124>
 8001498:	4638      	mov	r0, r7
 800149a:	e708      	b.n	80012ae <__udivmoddi4+0xda>
 800149c:	4637      	mov	r7, r6
 800149e:	e6e9      	b.n	8001274 <__udivmoddi4+0xa0>

080014a0 <__aeabi_idiv0>:
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop

080014a4 <HAL_GPIO_EXTI_Callback>:
/**
 * Interrupt for USER pushbutton.
 * Changes modes for the display, i.e. fft <--> time domain
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
	if (isFFT == 0)
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d103      	bne.n	80014be <HAL_GPIO_EXTI_Callback+0x1a>
		isFFT = 1;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
		isFFT = 2;
	else if (isFFT == 2)
		isFFT = 3;
	else
		isFFT = 0;
}
 80014bc:	e012      	b.n	80014e4 <HAL_GPIO_EXTI_Callback+0x40>
	else if (isFFT == 1)
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d103      	bne.n	80014ce <HAL_GPIO_EXTI_Callback+0x2a>
		isFFT = 2;
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	601a      	str	r2, [r3, #0]
}
 80014cc:	e00a      	b.n	80014e4 <HAL_GPIO_EXTI_Callback+0x40>
	else if (isFFT == 2)
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d103      	bne.n	80014de <HAL_GPIO_EXTI_Callback+0x3a>
		isFFT = 3;
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80014d8:	2203      	movs	r2, #3
 80014da:	601a      	str	r2, [r3, #0]
}
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_EXTI_Callback+0x40>
		isFFT = 0;
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	200000ec 	.word	0x200000ec

080014f4 <displayGraphSetup>:

/**
 * Sets up the graph on the LCD
 * Sets the axis and labels of the graph depending on isFFT flag.
 */
void displayGraphSetup() {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80014f8:	48ab      	ldr	r0, [pc, #684]	; (80017a8 <displayGraphSetup+0x2b4>)
 80014fa:	f003 f82f 	bl	800455c <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80014fe:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001502:	f003 f843 	bl	800458c <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font12);
 8001506:	48a9      	ldr	r0, [pc, #676]	; (80017ac <displayGraphSetup+0x2b8>)
 8001508:	f003 f85a 	bl	80045c0 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"Magnitude(dB)", CENTER_MODE);
 800150c:	2301      	movs	r3, #1
 800150e:	4aa8      	ldr	r2, [pc, #672]	; (80017b0 <displayGraphSetup+0x2bc>)
 8001510:	2100      	movs	r1, #0
 8001512:	2000      	movs	r0, #0
 8001514:	f003 f8da 	bl	80046cc <BSP_LCD_DisplayStringAt>
	if (isFFT == 0) {
 8001518:	4ba6      	ldr	r3, [pc, #664]	; (80017b4 <displayGraphSetup+0x2c0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d168      	bne.n	80015f2 <displayGraphSetup+0xfe>
		BSP_LCD_DisplayChar(225, 20, '0');
 8001520:	2230      	movs	r2, #48	; 0x30
 8001522:	2114      	movs	r1, #20
 8001524:	20e1      	movs	r0, #225	; 0xe1
 8001526:	f003 f88d 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayStringAt(112, 20, (uint8_t*)"-50", LEFT_MODE);
 800152a:	2303      	movs	r3, #3
 800152c:	4aa2      	ldr	r2, [pc, #648]	; (80017b8 <displayGraphSetup+0x2c4>)
 800152e:	2114      	movs	r1, #20
 8001530:	2070      	movs	r0, #112	; 0x70
 8001532:	f003 f8cb 	bl	80046cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayChar(0, 50, 'F');
 8001536:	2246      	movs	r2, #70	; 0x46
 8001538:	2132      	movs	r1, #50	; 0x32
 800153a:	2000      	movs	r0, #0
 800153c:	f003 f882 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 70, 'R');
 8001540:	2252      	movs	r2, #82	; 0x52
 8001542:	2146      	movs	r1, #70	; 0x46
 8001544:	2000      	movs	r0, #0
 8001546:	f003 f87d 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 90, 'E');
 800154a:	2245      	movs	r2, #69	; 0x45
 800154c:	215a      	movs	r1, #90	; 0x5a
 800154e:	2000      	movs	r0, #0
 8001550:	f003 f878 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 110, 'Q');
 8001554:	2251      	movs	r2, #81	; 0x51
 8001556:	216e      	movs	r1, #110	; 0x6e
 8001558:	2000      	movs	r0, #0
 800155a:	f003 f873 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 130, 'U');
 800155e:	2255      	movs	r2, #85	; 0x55
 8001560:	2182      	movs	r1, #130	; 0x82
 8001562:	2000      	movs	r0, #0
 8001564:	f003 f86e 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 150, 'E');
 8001568:	2245      	movs	r2, #69	; 0x45
 800156a:	2196      	movs	r1, #150	; 0x96
 800156c:	2000      	movs	r0, #0
 800156e:	f003 f869 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 170, 'N');
 8001572:	224e      	movs	r2, #78	; 0x4e
 8001574:	21aa      	movs	r1, #170	; 0xaa
 8001576:	2000      	movs	r0, #0
 8001578:	f003 f864 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 190, 'C');
 800157c:	2243      	movs	r2, #67	; 0x43
 800157e:	21be      	movs	r1, #190	; 0xbe
 8001580:	2000      	movs	r0, #0
 8001582:	f003 f85f 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 210, 'Y');
 8001586:	2259      	movs	r2, #89	; 0x59
 8001588:	21d2      	movs	r1, #210	; 0xd2
 800158a:	2000      	movs	r0, #0
 800158c:	f003 f85a 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_SetFont(&Font8);
 8001590:	488a      	ldr	r0, [pc, #552]	; (80017bc <displayGraphSetup+0x2c8>)
 8001592:	f003 f815 	bl	80045c0 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 255, (uint8_t*)"(kHz)", LEFT_MODE);
 8001596:	2303      	movs	r3, #3
 8001598:	4a89      	ldr	r2, [pc, #548]	; (80017c0 <displayGraphSetup+0x2cc>)
 800159a:	21ff      	movs	r1, #255	; 0xff
 800159c:	2000      	movs	r0, #0
 800159e:	f003 f895 	bl	80046cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayChar(15, 30, '0');
 80015a2:	2230      	movs	r2, #48	; 0x30
 80015a4:	211e      	movs	r1, #30
 80015a6:	200f      	movs	r0, #15
 80015a8:	f003 f84c 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(15, 70, '3');
 80015ac:	2233      	movs	r2, #51	; 0x33
 80015ae:	2146      	movs	r1, #70	; 0x46
 80015b0:	200f      	movs	r0, #15
 80015b2:	f003 f847 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(15, 110, '6');
 80015b6:	2236      	movs	r2, #54	; 0x36
 80015b8:	216e      	movs	r1, #110	; 0x6e
 80015ba:	200f      	movs	r0, #15
 80015bc:	f003 f842 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(15, 150, '9');
 80015c0:	2239      	movs	r2, #57	; 0x39
 80015c2:	2196      	movs	r1, #150	; 0x96
 80015c4:	200f      	movs	r0, #15
 80015c6:	f003 f83d 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayStringAt(15, 200, (uint8_t*)"12", LEFT_MODE);
 80015ca:	2303      	movs	r3, #3
 80015cc:	4a7d      	ldr	r2, [pc, #500]	; (80017c4 <displayGraphSetup+0x2d0>)
 80015ce:	21c8      	movs	r1, #200	; 0xc8
 80015d0:	200f      	movs	r0, #15
 80015d2:	f003 f87b 	bl	80046cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(15, 240, (uint8_t*)"15", LEFT_MODE);
 80015d6:	2303      	movs	r3, #3
 80015d8:	4a7b      	ldr	r2, [pc, #492]	; (80017c8 <displayGraphSetup+0x2d4>)
 80015da:	21f0      	movs	r1, #240	; 0xf0
 80015dc:	200f      	movs	r0, #15
 80015de:	f003 f875 	bl	80046cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(15, 280, (uint8_t*)"18", LEFT_MODE);
 80015e2:	2303      	movs	r3, #3
 80015e4:	4a79      	ldr	r2, [pc, #484]	; (80017cc <displayGraphSetup+0x2d8>)
 80015e6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80015ea:	200f      	movs	r0, #15
 80015ec:	f003 f86e 	bl	80046cc <BSP_LCD_DisplayStringAt>
 80015f0:	e0c9      	b.n	8001786 <displayGraphSetup+0x292>

	} else if (isFFT == 1) {
 80015f2:	4b70      	ldr	r3, [pc, #448]	; (80017b4 <displayGraphSetup+0x2c0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d123      	bne.n	8001642 <displayGraphSetup+0x14e>
		BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"Amplitude(V)", CENTER_MODE);
 80015fa:	2301      	movs	r3, #1
 80015fc:	4a74      	ldr	r2, [pc, #464]	; (80017d0 <displayGraphSetup+0x2dc>)
 80015fe:	2100      	movs	r1, #0
 8001600:	2000      	movs	r0, #0
 8001602:	f003 f863 	bl	80046cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayChar(0, 50, 'T');
 8001606:	2254      	movs	r2, #84	; 0x54
 8001608:	2132      	movs	r1, #50	; 0x32
 800160a:	2000      	movs	r0, #0
 800160c:	f003 f81a 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 70, 'I');
 8001610:	2249      	movs	r2, #73	; 0x49
 8001612:	2146      	movs	r1, #70	; 0x46
 8001614:	2000      	movs	r0, #0
 8001616:	f003 f815 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 90, 'M');
 800161a:	224d      	movs	r2, #77	; 0x4d
 800161c:	215a      	movs	r1, #90	; 0x5a
 800161e:	2000      	movs	r0, #0
 8001620:	f003 f810 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 110, 'E');
 8001624:	2245      	movs	r2, #69	; 0x45
 8001626:	216e      	movs	r1, #110	; 0x6e
 8001628:	2000      	movs	r0, #0
 800162a:	f003 f80b 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_SetFont(&Font8);
 800162e:	4863      	ldr	r0, [pc, #396]	; (80017bc <displayGraphSetup+0x2c8>)
 8001630:	f002 ffc6 	bl	80045c0 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 255, (uint8_t*)"(s)", LEFT_MODE);
 8001634:	2303      	movs	r3, #3
 8001636:	4a67      	ldr	r2, [pc, #412]	; (80017d4 <displayGraphSetup+0x2e0>)
 8001638:	21ff      	movs	r1, #255	; 0xff
 800163a:	2000      	movs	r0, #0
 800163c:	f003 f846 	bl	80046cc <BSP_LCD_DisplayStringAt>
 8001640:	e0a1      	b.n	8001786 <displayGraphSetup+0x292>
	} else if (isFFT == 2) {
 8001642:	4b5c      	ldr	r3, [pc, #368]	; (80017b4 <displayGraphSetup+0x2c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d174      	bne.n	8001734 <displayGraphSetup+0x240>
		BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"Magnitude(dB)", CENTER_MODE);
 800164a:	2301      	movs	r3, #1
 800164c:	4a58      	ldr	r2, [pc, #352]	; (80017b0 <displayGraphSetup+0x2bc>)
 800164e:	2100      	movs	r1, #0
 8001650:	2000      	movs	r0, #0
 8001652:	f003 f83b 	bl	80046cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayChar(225, 20, '0');
 8001656:	2230      	movs	r2, #48	; 0x30
 8001658:	2114      	movs	r1, #20
 800165a:	20e1      	movs	r0, #225	; 0xe1
 800165c:	f002 fff2 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayStringAt(112, 20, (uint8_t*)"-50", LEFT_MODE);
 8001660:	2303      	movs	r3, #3
 8001662:	4a55      	ldr	r2, [pc, #340]	; (80017b8 <displayGraphSetup+0x2c4>)
 8001664:	2114      	movs	r1, #20
 8001666:	2070      	movs	r0, #112	; 0x70
 8001668:	f003 f830 	bl	80046cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayChar(0, 50, 'F');
 800166c:	2246      	movs	r2, #70	; 0x46
 800166e:	2132      	movs	r1, #50	; 0x32
 8001670:	2000      	movs	r0, #0
 8001672:	f002 ffe7 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 70, 'R');
 8001676:	2252      	movs	r2, #82	; 0x52
 8001678:	2146      	movs	r1, #70	; 0x46
 800167a:	2000      	movs	r0, #0
 800167c:	f002 ffe2 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 90, 'E');
 8001680:	2245      	movs	r2, #69	; 0x45
 8001682:	215a      	movs	r1, #90	; 0x5a
 8001684:	2000      	movs	r0, #0
 8001686:	f002 ffdd 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 110, 'Q');
 800168a:	2251      	movs	r2, #81	; 0x51
 800168c:	216e      	movs	r1, #110	; 0x6e
 800168e:	2000      	movs	r0, #0
 8001690:	f002 ffd8 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 130, 'U');
 8001694:	2255      	movs	r2, #85	; 0x55
 8001696:	2182      	movs	r1, #130	; 0x82
 8001698:	2000      	movs	r0, #0
 800169a:	f002 ffd3 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 150, 'E');
 800169e:	2245      	movs	r2, #69	; 0x45
 80016a0:	2196      	movs	r1, #150	; 0x96
 80016a2:	2000      	movs	r0, #0
 80016a4:	f002 ffce 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 170, 'N');
 80016a8:	224e      	movs	r2, #78	; 0x4e
 80016aa:	21aa      	movs	r1, #170	; 0xaa
 80016ac:	2000      	movs	r0, #0
 80016ae:	f002 ffc9 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 190, 'C');
 80016b2:	2243      	movs	r2, #67	; 0x43
 80016b4:	21be      	movs	r1, #190	; 0xbe
 80016b6:	2000      	movs	r0, #0
 80016b8:	f002 ffc4 	bl	8004644 <BSP_LCD_DisplayChar>

		BSP_LCD_DisplayChar(0, 210, 'Y');
 80016bc:	2259      	movs	r2, #89	; 0x59
 80016be:	21d2      	movs	r1, #210	; 0xd2
 80016c0:	2000      	movs	r0, #0
 80016c2:	f002 ffbf 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_SetFont(&Font8);
 80016c6:	483d      	ldr	r0, [pc, #244]	; (80017bc <displayGraphSetup+0x2c8>)
 80016c8:	f002 ff7a 	bl	80045c0 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 255, (uint8_t*)"(kHz)", LEFT_MODE);
 80016cc:	2303      	movs	r3, #3
 80016ce:	4a3c      	ldr	r2, [pc, #240]	; (80017c0 <displayGraphSetup+0x2cc>)
 80016d0:	21ff      	movs	r1, #255	; 0xff
 80016d2:	2000      	movs	r0, #0
 80016d4:	f002 fffa 	bl	80046cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"Filtered", LEFT_MODE);
 80016d8:	2303      	movs	r3, #3
 80016da:	4a3f      	ldr	r2, [pc, #252]	; (80017d8 <displayGraphSetup+0x2e4>)
 80016dc:	2100      	movs	r1, #0
 80016de:	2000      	movs	r0, #0
 80016e0:	f002 fff4 	bl	80046cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayChar(15, 30, '0');
 80016e4:	2230      	movs	r2, #48	; 0x30
 80016e6:	211e      	movs	r1, #30
 80016e8:	200f      	movs	r0, #15
 80016ea:	f002 ffab 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(15, 70, '3');
 80016ee:	2233      	movs	r2, #51	; 0x33
 80016f0:	2146      	movs	r1, #70	; 0x46
 80016f2:	200f      	movs	r0, #15
 80016f4:	f002 ffa6 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(15, 110, '6');
 80016f8:	2236      	movs	r2, #54	; 0x36
 80016fa:	216e      	movs	r1, #110	; 0x6e
 80016fc:	200f      	movs	r0, #15
 80016fe:	f002 ffa1 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(15, 150, '9');
 8001702:	2239      	movs	r2, #57	; 0x39
 8001704:	2196      	movs	r1, #150	; 0x96
 8001706:	200f      	movs	r0, #15
 8001708:	f002 ff9c 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayStringAt(15, 200, (uint8_t*)"12", LEFT_MODE);
 800170c:	2303      	movs	r3, #3
 800170e:	4a2d      	ldr	r2, [pc, #180]	; (80017c4 <displayGraphSetup+0x2d0>)
 8001710:	21c8      	movs	r1, #200	; 0xc8
 8001712:	200f      	movs	r0, #15
 8001714:	f002 ffda 	bl	80046cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(15, 240, (uint8_t*)"15", LEFT_MODE);
 8001718:	2303      	movs	r3, #3
 800171a:	4a2b      	ldr	r2, [pc, #172]	; (80017c8 <displayGraphSetup+0x2d4>)
 800171c:	21f0      	movs	r1, #240	; 0xf0
 800171e:	200f      	movs	r0, #15
 8001720:	f002 ffd4 	bl	80046cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(15, 280, (uint8_t*)"18", LEFT_MODE);
 8001724:	2303      	movs	r3, #3
 8001726:	4a29      	ldr	r2, [pc, #164]	; (80017cc <displayGraphSetup+0x2d8>)
 8001728:	f44f 718c 	mov.w	r1, #280	; 0x118
 800172c:	200f      	movs	r0, #15
 800172e:	f002 ffcd 	bl	80046cc <BSP_LCD_DisplayStringAt>
 8001732:	e028      	b.n	8001786 <displayGraphSetup+0x292>
	} else {
		BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"Amplitude(V)", CENTER_MODE);
 8001734:	2301      	movs	r3, #1
 8001736:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <displayGraphSetup+0x2dc>)
 8001738:	2100      	movs	r1, #0
 800173a:	2000      	movs	r0, #0
 800173c:	f002 ffc6 	bl	80046cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayChar(0, 50, 'T');
 8001740:	2254      	movs	r2, #84	; 0x54
 8001742:	2132      	movs	r1, #50	; 0x32
 8001744:	2000      	movs	r0, #0
 8001746:	f002 ff7d 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 70, 'I');
 800174a:	2249      	movs	r2, #73	; 0x49
 800174c:	2146      	movs	r1, #70	; 0x46
 800174e:	2000      	movs	r0, #0
 8001750:	f002 ff78 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 90, 'M');
 8001754:	224d      	movs	r2, #77	; 0x4d
 8001756:	215a      	movs	r1, #90	; 0x5a
 8001758:	2000      	movs	r0, #0
 800175a:	f002 ff73 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_DisplayChar(0, 110, 'E');
 800175e:	2245      	movs	r2, #69	; 0x45
 8001760:	216e      	movs	r1, #110	; 0x6e
 8001762:	2000      	movs	r0, #0
 8001764:	f002 ff6e 	bl	8004644 <BSP_LCD_DisplayChar>
		BSP_LCD_SetFont(&Font8);
 8001768:	4814      	ldr	r0, [pc, #80]	; (80017bc <displayGraphSetup+0x2c8>)
 800176a:	f002 ff29 	bl	80045c0 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 255, (uint8_t*)"(s)", LEFT_MODE);
 800176e:	2303      	movs	r3, #3
 8001770:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <displayGraphSetup+0x2e0>)
 8001772:	21ff      	movs	r1, #255	; 0xff
 8001774:	2000      	movs	r0, #0
 8001776:	f002 ffa9 	bl	80046cc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"Filtered", LEFT_MODE);
 800177a:	2303      	movs	r3, #3
 800177c:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <displayGraphSetup+0x2e4>)
 800177e:	2100      	movs	r1, #0
 8001780:	2000      	movs	r0, #0
 8001782:	f002 ffa3 	bl	80046cc <BSP_LCD_DisplayStringAt>
	}
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001786:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800178a:	f002 fee7 	bl	800455c <BSP_LCD_SetTextColor>
	BSP_LCD_DrawHLine(25, 30, 200);
 800178e:	22c8      	movs	r2, #200	; 0xc8
 8001790:	211e      	movs	r1, #30
 8001792:	2019      	movs	r0, #25
 8001794:	f003 f854 	bl	8004840 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawVLine(25, 30, 256);
 8001798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179c:	211e      	movs	r1, #30
 800179e:	2019      	movs	r0, #25
 80017a0:	f003 f88c 	bl	80048bc <BSP_LCD_DrawVLine>


}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	ffff0000 	.word	0xffff0000
 80017ac:	2000004c 	.word	0x2000004c
 80017b0:	0800e7d8 	.word	0x0800e7d8
 80017b4:	200000ec 	.word	0x200000ec
 80017b8:	0800e7e8 	.word	0x0800e7e8
 80017bc:	20000054 	.word	0x20000054
 80017c0:	0800e7ec 	.word	0x0800e7ec
 80017c4:	0800e7f4 	.word	0x0800e7f4
 80017c8:	0800e7f8 	.word	0x0800e7f8
 80017cc:	0800e7fc 	.word	0x0800e7fc
 80017d0:	0800e800 	.word	0x0800e800
 80017d4:	0800e810 	.word	0x0800e810
 80017d8:	0800e814 	.word	0x0800e814

080017dc <AWGNGenerator>:

/**
 * Generates Additive White Gaussian Noise
 */
float32_t AWGNGenerator()
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
	int temp = 1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
	float32_t val;
	while (temp > 0) {
 80017e6:	e018      	b.n	800181a <AWGNGenerator+0x3e>
		val = (float32_t)rand()/RAND_MAX;
 80017e8:	f008 ffd4 	bl	800a794 <rand>
 80017ec:	ee07 0a90 	vmov	s15, r0
 80017f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001888 <AWGNGenerator+0xac>
 80017f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fc:	edc7 7a02 	vstr	s15, [r7, #8]
		if (val == 0)
 8001800:	edd7 7a02 	vldr	s15, [r7, #8]
 8001804:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	d102      	bne.n	8001814 <AWGNGenerator+0x38>
			temp = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e002      	b.n	800181a <AWGNGenerator+0x3e>
		else
			temp = -1;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
 8001818:	60fb      	str	r3, [r7, #12]
	while (temp > 0) {
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	dce3      	bgt.n	80017e8 <AWGNGenerator+0xc>
	}
	float32_t val2 = cosf(2*M_PI) * rand() / RAND_MAX;
 8001820:	f008 ffb8 	bl	800a794 <rand>
 8001824:	ee07 0a90 	vmov	s15, r0
 8001828:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800182c:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001888 <AWGNGenerator+0xac>
 8001830:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001834:	edc7 7a01 	vstr	s15, [r7, #4]
	return (sqrtf(-2 * log(val)) * val2);
 8001838:	68b8      	ldr	r0, [r7, #8]
 800183a:	f7fe fe3d 	bl	80004b8 <__aeabi_f2d>
 800183e:	4603      	mov	r3, r0
 8001840:	460c      	mov	r4, r1
 8001842:	ec44 3b10 	vmov	d0, r3, r4
 8001846:	f009 fc65 	bl	800b114 <log>
 800184a:	ec51 0b10 	vmov	r0, r1, d0
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001856:	f7fe fe87 	bl	8000568 <__aeabi_dmul>
 800185a:	4603      	mov	r3, r0
 800185c:	460c      	mov	r4, r1
 800185e:	4618      	mov	r0, r3
 8001860:	4621      	mov	r1, r4
 8001862:	f7ff f979 	bl	8000b58 <__aeabi_d2f>
 8001866:	4603      	mov	r3, r0
 8001868:	ee00 3a10 	vmov	s0, r3
 800186c:	f009 fea6 	bl	800b5bc <sqrtf>
 8001870:	eeb0 7a40 	vmov.f32	s14, s0
 8001874:	edd7 7a01 	vldr	s15, [r7, #4]
 8001878:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800187c:	eeb0 0a67 	vmov.f32	s0, s15
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bd90      	pop	{r4, r7, pc}
 8001886:	bf00      	nop
 8001888:	4f000000 	.word	0x4f000000
 800188c:	00000000 	.word	0x00000000

08001890 <simulateSineWave>:

/**
 * Simulates the sine wave for the DAC
 */
void simulateSineWave()
{
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8001896:	af00      	add	r7, sp, #0
	static int flag = 1;
	static int counter = 0;
	float32_t sine[128];
	float32_t phaseInc = 2*M_PI/128;
 8001898:	4b7f      	ldr	r3, [pc, #508]	; (8001a98 <simulateSineWave+0x208>)
 800189a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	float32_t phase = 0;
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	for (int i = 0; i < 128; ++i) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80018ac:	e08b      	b.n	80019c6 <simulateSineWave+0x136>
//		sine[i] = sin(phase);
//		phase += phaseInc;

		//3 sinusoids, 1.5kHz, 3kHz, 6kHz
		sine[i] = 2*(sin(2 * M_PI * i / 23.4375) + 1) * (4096 / 2)+2*(sin(2 * M_PI * i / 31.25) + 1)+AWGNGenerator();
 80018ae:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80018b2:	f7fe fdef 	bl	8000494 <__aeabi_i2d>
 80018b6:	a374      	add	r3, pc, #464	; (adr r3, 8001a88 <simulateSineWave+0x1f8>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe fe54 	bl	8000568 <__aeabi_dmul>
 80018c0:	4603      	mov	r3, r0
 80018c2:	460c      	mov	r4, r1
 80018c4:	4618      	mov	r0, r3
 80018c6:	4621      	mov	r1, r4
 80018c8:	a371      	add	r3, pc, #452	; (adr r3, 8001a90 <simulateSineWave+0x200>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	f7fe ff75 	bl	80007bc <__aeabi_ddiv>
 80018d2:	4603      	mov	r3, r0
 80018d4:	460c      	mov	r4, r1
 80018d6:	ec44 3b17 	vmov	d7, r3, r4
 80018da:	eeb0 0a47 	vmov.f32	s0, s14
 80018de:	eef0 0a67 	vmov.f32	s1, s15
 80018e2:	f009 fa8d 	bl	800ae00 <sin>
 80018e6:	ec51 0b10 	vmov	r0, r1, d0
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	4b6b      	ldr	r3, [pc, #428]	; (8001a9c <simulateSineWave+0x20c>)
 80018f0:	f7fe fc84 	bl	80001fc <__adddf3>
 80018f4:	4603      	mov	r3, r0
 80018f6:	460c      	mov	r4, r1
 80018f8:	4618      	mov	r0, r3
 80018fa:	4621      	mov	r1, r4
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	f7fe fc7c 	bl	80001fc <__adddf3>
 8001904:	4603      	mov	r3, r0
 8001906:	460c      	mov	r4, r1
 8001908:	4618      	mov	r0, r3
 800190a:	4621      	mov	r1, r4
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <simulateSineWave+0x210>)
 8001912:	f7fe fe29 	bl	8000568 <__aeabi_dmul>
 8001916:	4603      	mov	r3, r0
 8001918:	460c      	mov	r4, r1
 800191a:	4625      	mov	r5, r4
 800191c:	461c      	mov	r4, r3
 800191e:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8001922:	f7fe fdb7 	bl	8000494 <__aeabi_i2d>
 8001926:	a358      	add	r3, pc, #352	; (adr r3, 8001a88 <simulateSineWave+0x1f8>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fe1c 	bl	8000568 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	4b59      	ldr	r3, [pc, #356]	; (8001aa4 <simulateSineWave+0x214>)
 800193e:	f7fe ff3d 	bl	80007bc <__aeabi_ddiv>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	ec43 2b17 	vmov	d7, r2, r3
 800194a:	eeb0 0a47 	vmov.f32	s0, s14
 800194e:	eef0 0a67 	vmov.f32	s1, s15
 8001952:	f009 fa55 	bl	800ae00 <sin>
 8001956:	ec51 0b10 	vmov	r0, r1, d0
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b4f      	ldr	r3, [pc, #316]	; (8001a9c <simulateSineWave+0x20c>)
 8001960:	f7fe fc4c 	bl	80001fc <__adddf3>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	f7fe fc44 	bl	80001fc <__adddf3>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4620      	mov	r0, r4
 800197a:	4629      	mov	r1, r5
 800197c:	f7fe fc3e 	bl	80001fc <__adddf3>
 8001980:	4603      	mov	r3, r0
 8001982:	460c      	mov	r4, r1
 8001984:	4625      	mov	r5, r4
 8001986:	461c      	mov	r4, r3
 8001988:	f7ff ff28 	bl	80017dc <AWGNGenerator>
 800198c:	ee10 3a10 	vmov	r3, s0
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fd91 	bl	80004b8 <__aeabi_f2d>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4620      	mov	r0, r4
 800199c:	4629      	mov	r1, r5
 800199e:	f7fe fc2d 	bl	80001fc <__adddf3>
 80019a2:	4603      	mov	r3, r0
 80019a4:	460c      	mov	r4, r1
 80019a6:	4618      	mov	r0, r3
 80019a8:	4621      	mov	r1, r4
 80019aa:	f7ff f8d5 	bl	8000b58 <__aeabi_d2f>
 80019ae:	4601      	mov	r1, r0
 80019b0:	1d3a      	adds	r2, r7, #4
 80019b2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < 128; ++i) {
 80019bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80019c0:	3301      	adds	r3, #1
 80019c2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80019c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80019ca:	2b7f      	cmp	r3, #127	; 0x7f
 80019cc:	f77f af6f 	ble.w	80018ae <simulateSineWave+0x1e>
//		sine[i] = (sin(2 * M_PI * i / 23.4375) + 1) * (4096 / 2) + (sin(2 * M_PI * i / 11.71875) + 1) * (4096 / 2) + (sin(2 * M_PI * i / 5.859375) + 1) * (4096 / 2) + AWGNGenerator();
//		sine[i] = (sin(2 * M_PI * i / 23.4375) + 1) * (4096 / 2) +(sin(2 * M_PI * i / 5) + 1) * (4096 / 2)+(sin(2 * M_PI * i / 11) + 1) * (4096 / 2)+(sin(2 * M_PI * i / 2) + 1) * (4096 / 2) ;
	}

	if (flag == 1) {
 80019d0:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <simulateSineWave+0x218>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d120      	bne.n	8001a1a <simulateSineWave+0x18a>
		flag = 0;
 80019d8:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <simulateSineWave+0x218>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 128; ++i) {
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80019e4:	e014      	b.n	8001a10 <simulateSineWave+0x180>
			sampleValues[i] = sine[i];
 80019e6:	1d3a      	adds	r2, r7, #4
 80019e8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f8:	ee17 1a90 	vmov	r1, s15
 80019fc:	4a2b      	ldr	r2, [pc, #172]	; (8001aac <simulateSineWave+0x21c>)
 80019fe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001a02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 128; ++i) {
 8001a06:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001a10:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001a14:	2b7f      	cmp	r3, #127	; 0x7f
 8001a16:	dde6      	ble.n	80019e6 <simulateSineWave+0x156>
//		sampleValues[127] = dacSineOutput[counter++];
//		if (counter >= 100)
//			counter = 0;
//	}

}
 8001a18:	e02f      	b.n	8001a7a <simulateSineWave+0x1ea>
		for (int i = 0; i < 127; ++i)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001a20:	e00f      	b.n	8001a42 <simulateSineWave+0x1b2>
			sampleValues[i] = sampleValues[i+1];
 8001a22:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001a26:	3301      	adds	r3, #1
 8001a28:	4a20      	ldr	r2, [pc, #128]	; (8001aac <simulateSineWave+0x21c>)
 8001a2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a2e:	491f      	ldr	r1, [pc, #124]	; (8001aac <simulateSineWave+0x21c>)
 8001a30:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 127; ++i)
 8001a38:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001a42:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001a46:	2b7e      	cmp	r3, #126	; 0x7e
 8001a48:	ddeb      	ble.n	8001a22 <simulateSineWave+0x192>
		sampleValues[127] = sine[counter++];
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <simulateSineWave+0x220>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	4917      	ldr	r1, [pc, #92]	; (8001ab0 <simulateSineWave+0x220>)
 8001a52:	600a      	str	r2, [r1, #0]
 8001a54:	1d3a      	adds	r2, r7, #4
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a62:	ee17 2a90 	vmov	r2, s15
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <simulateSineWave+0x21c>)
 8001a68:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		if (counter >= 128) counter = 0;
 8001a6c:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <simulateSineWave+0x220>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b7f      	cmp	r3, #127	; 0x7f
 8001a72:	dd02      	ble.n	8001a7a <simulateSineWave+0x1ea>
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <simulateSineWave+0x220>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bdb0      	pop	{r4, r5, r7, pc}
 8001a84:	f3af 8000 	nop.w
 8001a88:	54442d18 	.word	0x54442d18
 8001a8c:	401921fb 	.word	0x401921fb
 8001a90:	00000000 	.word	0x00000000
 8001a94:	40377000 	.word	0x40377000
 8001a98:	3d490fdb 	.word	0x3d490fdb
 8001a9c:	3ff00000 	.word	0x3ff00000
 8001aa0:	40a00000 	.word	0x40a00000
 8001aa4:	403f4000 	.word	0x403f4000
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000888 	.word	0x20000888
 8001ab0:	200000f0 	.word	0x200000f0

08001ab4 <FIR_Filter>:
 * FIR filter
 * Implements the Hamming window function with precomputed coefficients.
 * Convolves input samples with coefficients.
 */
void FIR_Filter()
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b0eb      	sub	sp, #428	; 0x1ac
 8001ab8:	af00      	add	r7, sp, #0

	for (int i = 0; i < 256; ++i)
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001ac0:	e00c      	b.n	8001adc <FIR_Filter+0x28>
		filteredValueCopy[i] = 0;
 8001ac2:	4a52      	ldr	r2, [pc, #328]	; (8001c0c <FIR_Filter+0x158>)
 8001ac4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 256; ++i)
 8001ad2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001adc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001ae0:	2bff      	cmp	r3, #255	; 0xff
 8001ae2:	ddee      	ble.n	8001ac2 <FIR_Filter+0xe>
	float32_t buff[99];
	for (int i = 0; i < 99; ++i) buff[i] = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001aea:	e00c      	b.n	8001b06 <FIR_Filter+0x52>
 8001aec:	1d3a      	adds	r2, r7, #4
 8001aee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b00:	3301      	adds	r3, #1
 8001b02:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b06:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b0a:	2b62      	cmp	r3, #98	; 0x62
 8001b0c:	ddee      	ble.n	8001aec <FIR_Filter+0x38>
	for (int i = 0; i < 128; ++i) {
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b14:	e06f      	b.n	8001bf6 <FIR_Filter+0x142>
		float32_t firSum = 0;
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
//	    for (int k = 0; k < 98; ++k)
//	    	buff[98-k] = buff[97-k];
//	    buff[0] = sampleValues[i];
		for (int k = 98; k > 0; --k)
 8001b1e:	2362      	movs	r3, #98	; 0x62
 8001b20:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001b24:	e011      	b.n	8001b4a <FIR_Filter+0x96>
			buff[k] = buff[k - 1];
 8001b26:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	1d3a      	adds	r2, r7, #4
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	1d39      	adds	r1, r7, #4
 8001b36:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	601a      	str	r2, [r3, #0]
		for (int k = 98; k > 0; --k)
 8001b40:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001b44:	3b01      	subs	r3, #1
 8001b46:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001b4a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	dce9      	bgt.n	8001b26 <FIR_Filter+0x72>
		buff[0] = sampleValues[i];
 8001b52:	4a2f      	ldr	r2, [pc, #188]	; (8001c10 <FIR_Filter+0x15c>)
 8001b54:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	edc3 7a00 	vstr	s15, [r3]

	    for (int k = 0; k < 99; ++k)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001b70:	e01a      	b.n	8001ba8 <FIR_Filter+0xf4>
	    	firSum += hammingCoefficients[k] * buff[k];
 8001b72:	4a28      	ldr	r2, [pc, #160]	; (8001c14 <FIR_Filter+0x160>)
 8001b74:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	ed93 7a00 	vldr	s14, [r3]
 8001b80:	1d3a      	adds	r2, r7, #4
 8001b82:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b92:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 8001b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9a:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
	    for (int k = 0; k < 99; ++k)
 8001b9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001ba8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bac:	2b62      	cmp	r3, #98	; 0x62
 8001bae:	dde0      	ble.n	8001b72 <FIR_Filter+0xbe>
	    filteredValueCopy[i*2] = filteredValue[i] = firSum;
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <FIR_Filter+0x164>)
 8001bb2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4914      	ldr	r1, [pc, #80]	; (8001c18 <FIR_Filter+0x164>)
 8001bc8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001bcc:	0092      	lsls	r2, r2, #2
 8001bce:	440a      	add	r2, r1
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	490e      	ldr	r1, [pc, #56]	; (8001c0c <FIR_Filter+0x158>)
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	601a      	str	r2, [r3, #0]
	    filteredValueCopy[i+1] = 0;
 8001bda:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001bde:	3301      	adds	r3, #1
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <FIR_Filter+0x158>)
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 128; ++i) {
 8001bec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001bf6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8001bfc:	dd8b      	ble.n	8001b16 <FIR_Filter+0x62>
//		    for (int k = 0; k < 25; ++k)
//		    	firSum += hammingCoefficients[k] * buff[k];
//		    filteredValueCopy[i*2] = filteredValue[i] = firSum;
//		    filteredValueCopy[i+1] = 0;
//		}
}
 8001bfe:	bf00      	nop
 8001c00:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	20000fb0 	.word	0x20000fb0
 8001c10:	20000888 	.word	0x20000888
 8001c14:	0800e9c8 	.word	0x0800e9c8
 8001c18:	20000b7c 	.word	0x20000b7c

08001c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c1c:	b5b0      	push	{r4, r5, r7, lr}
 8001c1e:	f6ad 0d78 	subw	sp, sp, #2168	; 0x878
 8001c22:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	//initializes array
	for(int k = 0; k < 128; ++k)
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 8001c2a:	e00a      	b.n	8001c42 <main+0x26>
	  	sampleValues[k] = 0;
 8001c2c:	4aac      	ldr	r2, [pc, #688]	; (8001ee0 <main+0x2c4>)
 8001c2e:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001c32:	2100      	movs	r1, #0
 8001c34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int k = 0; k < 128; ++k)
 8001c38:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 8001c42:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001c46:	2b7f      	cmp	r3, #127	; 0x7f
 8001c48:	ddf0      	ble.n	8001c2c <main+0x10>

	//generates the sine wave values the DAC will use
	srand(time(0));
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f008 fde6 	bl	800a81c <time>
 8001c50:	4603      	mov	r3, r0
 8001c52:	460c      	mov	r4, r1
 8001c54:	4618      	mov	r0, r3
 8001c56:	f008 fd79 	bl	800a74c <srand>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c5a:	f003 fb5d 	bl	8005318 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c5e:	f000 fbc3 	bl	80023e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c62:	f000 ff05 	bl	8002a70 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c66:	f000 fe95 	bl	8002994 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c6a:	f000 fc47 	bl	80024fc <MX_ADC1_Init>
  MX_DAC_Init();
 8001c6e:	f000 fc99 	bl	80025a4 <MX_DAC_Init>
  MX_DMA2D_Init();
 8001c72:	f000 fcc1 	bl	80025f8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001c76:	f000 fead 	bl	80029d4 <MX_FMC_Init>
  MX_I2C3_Init();
 8001c7a:	f000 fcef 	bl	800265c <MX_I2C3_Init>
  MX_LTDC_Init();
 8001c7e:	f000 fd2d 	bl	80026dc <MX_LTDC_Init>
  MX_SPI5_Init();
 8001c82:	f000 fddb 	bl	800283c <MX_SPI5_Init>
  MX_TIM2_Init();
 8001c86:	f000 fe0f 	bl	80028a8 <MX_TIM2_Init>
  MX_UART5_Init();
 8001c8a:	f000 fe59 	bl	8002940 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  //initializes LCD
  BSP_LCD_Init();
 8001c8e:	f002 fb6f 	bl	8004370 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 8001c92:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001c96:	2000      	movs	r0, #0
 8001c98:	f002 fbec 	bl	8004474 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8001c9c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f002 fbe7 	bl	8004474 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f002 fc48 	bl	800453c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8001cac:	f002 ff6c 	bl	8004b88 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001cb0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001cb4:	f002 fc9e 	bl	80045f4 <BSP_LCD_Clear>

  //Starts timer 2 for DAC
  HAL_TIM_Base_Start(&htim2);
 8001cb8:	488a      	ldr	r0, [pc, #552]	; (8001ee4 <main+0x2c8>)
 8001cba:	f007 fb72 	bl	80093a2 <HAL_TIM_Base_Start>
  //Starts the DAC using DMA.
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, dacSineOutput, 100, DAC_ALIGN_12B_R);
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2364      	movs	r3, #100	; 0x64
 8001cc4:	4a88      	ldr	r2, [pc, #544]	; (8001ee8 <main+0x2cc>)
 8001cc6:	2110      	movs	r1, #16
 8001cc8:	4888      	ldr	r0, [pc, #544]	; (8001eec <main+0x2d0>)
 8001cca:	f003 ff5f 	bl	8005b8c <HAL_DAC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  simulateSineWave();
 8001cce:	f7ff fddf 	bl	8001890 <simulateSineWave>
	  //sets up graph for fft/time domain
	  displayGraphSetup();
 8001cd2:	f7ff fc0f 	bl	80014f4 <displayGraphSetup>

	  //filters the samples:
	  FIR_Filter();
 8001cd6:	f7ff feed 	bl	8001ab4 <FIR_Filter>

	  uint16_t y_pos = 30;
 8001cda:	231e      	movs	r3, #30
 8001cdc:	f8a7 386a 	strh.w	r3, [r7, #2154]	; 0x86a
	  if (isFFT == 0) {
 8001ce0:	4b83      	ldr	r3, [pc, #524]	; (8001ef0 <main+0x2d4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 808d 	bne.w	8001e04 <main+0x1e8>
//		  arm_cfft_f32(&arm_cfft_sR_f32_len128, sampleValuesCopy, 0, 1);
////		  calculates the magnitude of the FFT values.
//		  arm_cmplx_mag_f32(sampleValuesCopy, fftOutput, 128);
//		  arm_max_f32(fftOutput, 128, &maxVal, &indexMax);
		  COMPLEX sampleCmplx[128];
		  for (int i = 0; i < 128; ++i) sampleCmplx[i] = sampleValues[i];
 8001cea:	2300      	movs	r3, #0
 8001cec:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 8001cf0:	e01d      	b.n	8001d2e <main+0x112>
 8001cf2:	4a7b      	ldr	r2, [pc, #492]	; (8001ee0 <main+0x2c4>)
 8001cf4:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8001cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fbb9 	bl	8000474 <__aeabi_ui2d>
 8001d02:	4603      	mov	r3, r0
 8001d04:	460c      	mov	r4, r1
 8001d06:	4625      	mov	r5, r4
 8001d08:	461c      	mov	r4, r3
 8001d0a:	f04f 0100 	mov.w	r1, #0
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	4638      	mov	r0, r7
 8001d14:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	4403      	add	r3, r0
 8001d1c:	e9c3 4500 	strd	r4, r5, [r3]
 8001d20:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8001d24:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 8001d2e:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8001d32:	2b7f      	cmp	r3, #127	; 0x7f
 8001d34:	dddd      	ble.n	8001cf2 <main+0xd6>
		  double *fftPlot = fftOutput;
 8001d36:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <main+0x2d8>)
 8001d38:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
		  fftPlot = FFT(sampleCmplx, 128);
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	2180      	movs	r1, #128	; 0x80
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 f879 	bl	8002e38 <FFT>
 8001d46:	f8c7 0808 	str.w	r0, [r7, #2056]	; 0x808
		  maxVal = findMax(fftPlot, 128);
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	f8d7 0808 	ldr.w	r0, [r7, #2056]	; 0x808
 8001d50:	f001 faba 	bl	80032c8 <findMax>
 8001d54:	ec54 3b10 	vmov	r3, r4, d0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	f7fe fefc 	bl	8000b58 <__aeabi_d2f>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f607 0204 	addw	r2, r7, #2052	; 0x804
 8001d66:	6013      	str	r3, [r2, #0]

		  for (size_t i=0; i < 64; ++i) {
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 3860 	str.w	r3, [r7, #2144]	; 0x860
 8001d6e:	e044      	b.n	8001dfa <main+0x1de>
			  if (fftPlot[i] >= 0) {
 8001d70:	f8d7 3860 	ldr.w	r3, [r7, #2144]	; 0x860
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8001d7a:	4413      	add	r3, r2
 8001d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	f7fe fe74 	bl	8000a74 <__aeabi_dcmpge>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d029      	beq.n	8001de6 <main+0x1ca>
				  BSP_LCD_FillRect(25, y_pos, fftPlot[i]/maxVal*200, 3);
 8001d92:	f8d7 3860 	ldr.w	r3, [r7, #2144]	; 0x860
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8001d9c:	4413      	add	r3, r2
 8001d9e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001da2:	f607 0304 	addw	r3, r7, #2052	; 0x804
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	f7fe fb86 	bl	80004b8 <__aeabi_f2d>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4620      	mov	r0, r4
 8001db2:	4629      	mov	r1, r5
 8001db4:	f7fe fd02 	bl	80007bc <__aeabi_ddiv>
 8001db8:	4603      	mov	r3, r0
 8001dba:	460c      	mov	r4, r1
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <main+0x2dc>)
 8001dc6:	f7fe fbcf 	bl	8000568 <__aeabi_dmul>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	460c      	mov	r4, r1
 8001dce:	4618      	mov	r0, r3
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	f7fe fea1 	bl	8000b18 <__aeabi_d2uiz>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	f8b7 186a 	ldrh.w	r1, [r7, #2154]	; 0x86a
 8001dde:	2303      	movs	r3, #3
 8001de0:	2019      	movs	r0, #25
 8001de2:	f002 fe77 	bl	8004ad4 <BSP_LCD_FillRect>
//				  if (i % 10 == 0)
//					  BSP_LCD_DrawHLine(20, y_pos, 5);
			  }
			  y_pos += 4;
 8001de6:	f8b7 386a 	ldrh.w	r3, [r7, #2154]	; 0x86a
 8001dea:	3304      	adds	r3, #4
 8001dec:	f8a7 386a 	strh.w	r3, [r7, #2154]	; 0x86a
		  for (size_t i=0; i < 64; ++i) {
 8001df0:	f8d7 3860 	ldr.w	r3, [r7, #2144]	; 0x860
 8001df4:	3301      	adds	r3, #1
 8001df6:	f8c7 3860 	str.w	r3, [r7, #2144]	; 0x860
 8001dfa:	f8d7 3860 	ldr.w	r3, [r7, #2144]	; 0x860
 8001dfe:	2b3f      	cmp	r3, #63	; 0x3f
 8001e00:	d9b6      	bls.n	8001d70 <main+0x154>
 8001e02:	e2e2      	b.n	80023ca <main+0x7ae>
		  }
	  } else if (isFFT == 1) {
 8001e04:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <main+0x2d4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	f040 8121 	bne.w	8002050 <main+0x434>
		  float32_t maxNumTime = sampleValues[0];
 8001e0e:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <main+0x2c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e1a:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 8001e1e:	edc3 7a00 	vstr	s15, [r3]
		  float32_t minNumTime = sampleValues[0];
 8001e22:	4b2f      	ldr	r3, [pc, #188]	; (8001ee0 <main+0x2c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e2e:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001e32:	edc3 7a00 	vstr	s15, [r3]
		  for (size_t i = 1; i < 128; ++i) {
 8001e36:	2301      	movs	r3, #1
 8001e38:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 8001e3c:	e042      	b.n	8001ec4 <main+0x2a8>
			  if (sampleValues[i] > maxNumTime)
 8001e3e:	4a28      	ldr	r2, [pc, #160]	; (8001ee0 <main+0x2c4>)
 8001e40:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8001e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e50:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 8001e54:	ed93 7a00 	vldr	s14, [r3]
 8001e58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e60:	d50c      	bpl.n	8001e7c <main+0x260>
				  maxNumTime = sampleValues[i];
 8001e62:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <main+0x2c4>)
 8001e64:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8001e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e74:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 8001e78:	edc3 7a00 	vstr	s15, [r3]
			  if (sampleValues[i] < minNumTime)
 8001e7c:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <main+0x2c4>)
 8001e7e:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e8e:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001e92:	ed93 7a00 	vldr	s14, [r3]
 8001e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	dd0c      	ble.n	8001eba <main+0x29e>
				  minNumTime = sampleValues[i];
 8001ea0:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <main+0x2c4>)
 8001ea2:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eb2:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001eb6:	edc3 7a00 	vstr	s15, [r3]
		  for (size_t i = 1; i < 128; ++i) {
 8001eba:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 8001ec4:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8001ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8001eca:	d9b8      	bls.n	8001e3e <main+0x222>
		  }
		  int flagH = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
		  int flagL = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
		  for (size_t i = 0; i < 127; ++i) {
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 8001ede:	e0b1      	b.n	8002044 <main+0x428>
 8001ee0:	20000888 	.word	0x20000888
 8001ee4:	20000adc 	.word	0x20000adc
 8001ee8:	0800e838 	.word	0x0800e838
 8001eec:	20000a88 	.word	0x20000a88
 8001ef0:	200000ec 	.word	0x200000ec
 8001ef4:	20000db0 	.word	0x20000db0
 8001ef8:	40690000 	.word	0x40690000
			  float32_t temp1;
			  float32_t temp2;

			  temp1 = sampleValues[i]/maxNumTime * 200 + 25;
 8001efc:	4abc      	ldr	r2, [pc, #752]	; (80021f0 <main+0x5d4>)
 8001efe:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8001f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f0e:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 8001f12:	ed93 7a00 	vldr	s14, [r3]
 8001f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f1a:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 80021f4 <main+0x5d8>
 8001f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f22:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001f26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f2a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001f2e:	edc3 7a00 	vstr	s15, [r3]
			  temp2 = sampleValues[i+1]/maxNumTime * 200 + 25;
 8001f32:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8001f36:	3301      	adds	r3, #1
 8001f38:	4aad      	ldr	r2, [pc, #692]	; (80021f0 <main+0x5d4>)
 8001f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f46:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 8001f4a:	ed93 7a00 	vldr	s14, [r3]
 8001f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f52:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 80021f4 <main+0x5d8>
 8001f56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f5a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001f5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f62:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 8001f66:	edc3 7a00 	vstr	s15, [r3]

			  BSP_LCD_DrawLine(temp1, y_pos, temp2, y_pos+2);
 8001f6a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f76:	ee17 3a90 	vmov	r3, s15
 8001f7a:	b298      	uxth	r0, r3
 8001f7c:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 8001f80:	edd3 7a00 	vldr	s15, [r3]
 8001f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f88:	ee17 3a90 	vmov	r3, s15
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	f8b7 386a 	ldrh.w	r3, [r7, #2154]	; 0x86a
 8001f92:	3302      	adds	r3, #2
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	f8b7 186a 	ldrh.w	r1, [r7, #2154]	; 0x86a
 8001f9a:	f002 fcd1 	bl	8004940 <BSP_LCD_DrawLine>
			  if (temp1 == 225 || temp2 == 225 && flagH == 0) {
 8001f9e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80021f8 <main+0x5dc>
 8001faa:	eef4 7a47 	vcmp.f32	s15, s14
 8001fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb2:	d00e      	beq.n	8001fd2 <main+0x3b6>
 8001fb4:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80021f8 <main+0x5dc>
 8001fc0:	eef4 7a47 	vcmp.f32	s15, s14
 8001fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc8:	d10b      	bne.n	8001fe2 <main+0x3c6>
 8001fca:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d107      	bne.n	8001fe2 <main+0x3c6>
				  BSP_LCD_DisplayChar(225, 20, '1');
 8001fd2:	2231      	movs	r2, #49	; 0x31
 8001fd4:	2114      	movs	r1, #20
 8001fd6:	20e1      	movs	r0, #225	; 0xe1
 8001fd8:	f002 fb34 	bl	8004644 <BSP_LCD_DisplayChar>
				  flagH = 1;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
			  }
			  if (sampleValues[i] == minNumTime && flagL == 0) {
 8001fe2:	4a83      	ldr	r2, [pc, #524]	; (80021f0 <main+0x5d4>)
 8001fe4:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8001fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ff4:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001ff8:	ed93 7a00 	vldr	s14, [r3]
 8001ffc:	eeb4 7a67 	vcmp.f32	s14, s15
 8002000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002004:	d114      	bne.n	8002030 <main+0x414>
 8002006:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 800200a:	2b00      	cmp	r3, #0
 800200c:	d110      	bne.n	8002030 <main+0x414>
				  BSP_LCD_DisplayStringAt(temp1, 20, "-1", LEFT_MODE);
 800200e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201a:	ee17 3a90 	vmov	r3, s15
 800201e:	b298      	uxth	r0, r3
 8002020:	2303      	movs	r3, #3
 8002022:	4a76      	ldr	r2, [pc, #472]	; (80021fc <main+0x5e0>)
 8002024:	2114      	movs	r1, #20
 8002026:	f002 fb51 	bl	80046cc <BSP_LCD_DisplayStringAt>
				  flagL = 1;
 800202a:	2301      	movs	r3, #1
 800202c:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
			  }
			  y_pos += 2;
 8002030:	f8b7 386a 	ldrh.w	r3, [r7, #2154]	; 0x86a
 8002034:	3302      	adds	r3, #2
 8002036:	f8a7 386a 	strh.w	r3, [r7, #2154]	; 0x86a
		  for (size_t i = 0; i < 127; ++i) {
 800203a:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 800203e:	3301      	adds	r3, #1
 8002040:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 8002044:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8002048:	2b7e      	cmp	r3, #126	; 0x7e
 800204a:	f67f af57 	bls.w	8001efc <main+0x2e0>
 800204e:	e1bc      	b.n	80023ca <main+0x7ae>
		  }
	  } else if (isFFT == 2) {
 8002050:	4b6b      	ldr	r3, [pc, #428]	; (8002200 <main+0x5e4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b02      	cmp	r3, #2
 8002056:	f040 80bc 	bne.w	80021d2 <main+0x5b6>
//		  arm_cfft_f32(&arm_cfft_sR_f32_len128, filteredValue, 0, 1);
//		  arm_cmplx_mag_f32(filteredValue, fftOutputFiltered, 128);
//		  arm_max_f32(fftOutputFiltered, 128, &maxValFilter, &indexMaxFilter);

		  COMPLEX sampleCmplx[128];
		  for (int i = 0; i < 128; ++i) sampleCmplx[i] = filteredValue[i];
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 8002060:	e01e      	b.n	80020a0 <main+0x484>
 8002062:	4a68      	ldr	r2, [pc, #416]	; (8002204 <main+0x5e8>)
 8002064:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa22 	bl	80004b8 <__aeabi_f2d>
 8002074:	4603      	mov	r3, r0
 8002076:	460c      	mov	r4, r1
 8002078:	4625      	mov	r5, r4
 800207a:	461c      	mov	r4, r3
 800207c:	f04f 0100 	mov.w	r1, #0
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	4638      	mov	r0, r7
 8002086:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	4403      	add	r3, r0
 800208e:	e9c3 4500 	strd	r4, r5, [r3]
 8002092:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8002096:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 800209a:	3301      	adds	r3, #1
 800209c:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 80020a0:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 80020a4:	2b7f      	cmp	r3, #127	; 0x7f
 80020a6:	dddc      	ble.n	8002062 <main+0x446>
		  		  double *fftPlot = fftOutputFiltered;
 80020a8:	4b57      	ldr	r3, [pc, #348]	; (8002208 <main+0x5ec>)
 80020aa:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
		  		  fftPlot = FFT(sampleCmplx, 128);
 80020ae:	463b      	mov	r3, r7
 80020b0:	2180      	movs	r1, #128	; 0x80
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fec0 	bl	8002e38 <FFT>
 80020b8:	f8c7 0818 	str.w	r0, [r7, #2072]	; 0x818
		  		  maxValFilter = findMax(fftPlot, 128);
 80020bc:	2180      	movs	r1, #128	; 0x80
 80020be:	f8d7 0818 	ldr.w	r0, [r7, #2072]	; 0x818
 80020c2:	f001 f901 	bl	80032c8 <findMax>
 80020c6:	ec54 3b10 	vmov	r3, r4, d0
 80020ca:	4618      	mov	r0, r3
 80020cc:	4621      	mov	r1, r4
 80020ce:	f7fe fd43 	bl	8000b58 <__aeabi_d2f>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f607 0214 	addw	r2, r7, #2068	; 0x814
 80020d8:	6013      	str	r3, [r2, #0]

		  for (size_t i=0; i < 64; ++i) {
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
 80020e0:	e072      	b.n	80021c8 <main+0x5ac>
			  if (fftPlot[i] >= 0) {
 80020e2:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 80020ec:	4413      	add	r3, r2
 80020ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	f7fe fcbb 	bl	8000a74 <__aeabi_dcmpge>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d057      	beq.n	80021b4 <main+0x598>
		  		BSP_LCD_FillRect(25, y_pos, fftPlot[i]/maxValFilter*200, 3);
 8002104:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 800210e:	4413      	add	r3, r2
 8002110:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002114:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	f7fe f9cd 	bl	80004b8 <__aeabi_f2d>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4620      	mov	r0, r4
 8002124:	4629      	mov	r1, r5
 8002126:	f7fe fb49 	bl	80007bc <__aeabi_ddiv>
 800212a:	4603      	mov	r3, r0
 800212c:	460c      	mov	r4, r1
 800212e:	4618      	mov	r0, r3
 8002130:	4621      	mov	r1, r4
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <main+0x5f0>)
 8002138:	f7fe fa16 	bl	8000568 <__aeabi_dmul>
 800213c:	4603      	mov	r3, r0
 800213e:	460c      	mov	r4, r1
 8002140:	4618      	mov	r0, r3
 8002142:	4621      	mov	r1, r4
 8002144:	f7fe fce8 	bl	8000b18 <__aeabi_d2uiz>
 8002148:	4603      	mov	r3, r0
 800214a:	b29a      	uxth	r2, r3
 800214c:	f8b7 186a 	ldrh.w	r1, [r7, #2154]	; 0x86a
 8002150:	2303      	movs	r3, #3
 8002152:	2019      	movs	r0, #25
 8002154:	f002 fcbe 	bl	8004ad4 <BSP_LCD_FillRect>
		  		if (i == 0)
 8002158:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 800215c:	2b00      	cmp	r3, #0
 800215e:	d129      	bne.n	80021b4 <main+0x598>
		  			BSP_LCD_FillRect(25, y_pos, fftPlot[i]/maxValFilter*200, 3);
 8002160:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 800216a:	4413      	add	r3, r2
 800216c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002170:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	f7fe f99f 	bl	80004b8 <__aeabi_f2d>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4620      	mov	r0, r4
 8002180:	4629      	mov	r1, r5
 8002182:	f7fe fb1b 	bl	80007bc <__aeabi_ddiv>
 8002186:	4603      	mov	r3, r0
 8002188:	460c      	mov	r4, r1
 800218a:	4618      	mov	r0, r3
 800218c:	4621      	mov	r1, r4
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <main+0x5f0>)
 8002194:	f7fe f9e8 	bl	8000568 <__aeabi_dmul>
 8002198:	4603      	mov	r3, r0
 800219a:	460c      	mov	r4, r1
 800219c:	4618      	mov	r0, r3
 800219e:	4621      	mov	r1, r4
 80021a0:	f7fe fcba 	bl	8000b18 <__aeabi_d2uiz>
 80021a4:	4603      	mov	r3, r0
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	f8b7 186a 	ldrh.w	r1, [r7, #2154]	; 0x86a
 80021ac:	2303      	movs	r3, #3
 80021ae:	2019      	movs	r0, #25
 80021b0:	f002 fc90 	bl	8004ad4 <BSP_LCD_FillRect>
//		  		if (i % 10 == 0)
//		  			BSP_LCD_DrawHLine(20, y_pos, 5);
			  }
		  			  y_pos += 4;
 80021b4:	f8b7 386a 	ldrh.w	r3, [r7, #2154]	; 0x86a
 80021b8:	3304      	adds	r3, #4
 80021ba:	f8a7 386a 	strh.w	r3, [r7, #2154]	; 0x86a
		  for (size_t i=0; i < 64; ++i) {
 80021be:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 80021c2:	3301      	adds	r3, #1
 80021c4:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
 80021c8:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 80021cc:	2b3f      	cmp	r3, #63	; 0x3f
 80021ce:	d988      	bls.n	80020e2 <main+0x4c6>
 80021d0:	e0fb      	b.n	80023ca <main+0x7ae>
		  }

	  } else {
		  float32_t maxNumTime = filteredValue[0];
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <main+0x5e8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f607 023c 	addw	r2, r7, #2108	; 0x83c
 80021da:	6013      	str	r3, [r2, #0]
		  float32_t minNumTime = filteredValue[0];
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <main+0x5e8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f607 0238 	addw	r2, r7, #2104	; 0x838
 80021e4:	6013      	str	r3, [r2, #0]
		  for (size_t i = 1; i < 128; ++i) {
 80021e6:	2301      	movs	r3, #1
 80021e8:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 80021ec:	e047      	b.n	800227e <main+0x662>
 80021ee:	bf00      	nop
 80021f0:	20000888 	.word	0x20000888
 80021f4:	43480000 	.word	0x43480000
 80021f8:	43610000 	.word	0x43610000
 80021fc:	0800e820 	.word	0x0800e820
 8002200:	200000ec 	.word	0x200000ec
 8002204:	20000b7c 	.word	0x20000b7c
 8002208:	200013b0 	.word	0x200013b0
 800220c:	40690000 	.word	0x40690000
			  if (filteredValue[i] > maxNumTime)
 8002210:	4a72      	ldr	r2, [pc, #456]	; (80023dc <main+0x7c0>)
 8002212:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8002222:	ed93 7a00 	vldr	s14, [r3]
 8002226:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800222a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222e:	d508      	bpl.n	8002242 <main+0x626>
				  maxNumTime = filteredValue[i];
 8002230:	4a6a      	ldr	r2, [pc, #424]	; (80023dc <main+0x7c0>)
 8002232:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f607 023c 	addw	r2, r7, #2108	; 0x83c
 8002240:	6013      	str	r3, [r2, #0]
			  if (filteredValue[i] < minNumTime)
 8002242:	4a66      	ldr	r2, [pc, #408]	; (80023dc <main+0x7c0>)
 8002244:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	edd3 7a00 	vldr	s15, [r3]
 8002250:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8002254:	ed93 7a00 	vldr	s14, [r3]
 8002258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002260:	dd08      	ble.n	8002274 <main+0x658>
				  minNumTime = filteredValue[i];
 8002262:	4a5e      	ldr	r2, [pc, #376]	; (80023dc <main+0x7c0>)
 8002264:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f607 0238 	addw	r2, r7, #2104	; 0x838
 8002272:	6013      	str	r3, [r2, #0]
		  for (size_t i = 1; i < 128; ++i) {
 8002274:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002278:	3301      	adds	r3, #1
 800227a:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 800227e:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002282:	2b7f      	cmp	r3, #127	; 0x7f
 8002284:	d9c4      	bls.n	8002210 <main+0x5f4>
		  }
		  int isLowest = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
		  int flagH = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
		  int flagL = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
		  for (size_t i = 0; i < 127; ++i) {
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 800229e:	e08f      	b.n	80023c0 <main+0x7a4>
			  float32_t temp1;
			  float32_t temp2;

			  if (isLowest == 0 ||  filteredValue[i] < 0 ||  filteredValue[i+1] < 0) {
 80022a0:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d018      	beq.n	80022da <main+0x6be>
 80022a8:	4a4c      	ldr	r2, [pc, #304]	; (80023dc <main+0x7c0>)
 80022aa:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	d40c      	bmi.n	80022da <main+0x6be>
 80022c0:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80022c4:	3301      	adds	r3, #1
 80022c6:	4a45      	ldr	r2, [pc, #276]	; (80023dc <main+0x7c0>)
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	d508      	bpl.n	80022ec <main+0x6d0>
				  temp1 = 27;
 80022da:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <main+0x7c4>)
 80022dc:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80022e0:	6013      	str	r3, [r2, #0]
				  temp2 = 27;
 80022e2:	4b3f      	ldr	r3, [pc, #252]	; (80023e0 <main+0x7c4>)
 80022e4:	f607 0224 	addw	r2, r7, #2084	; 0x824
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e032      	b.n	8002352 <main+0x736>
			  } else {
				  temp1 = filteredValue[i]/maxNumTime * 200 + 27;
 80022ec:	4a3b      	ldr	r2, [pc, #236]	; (80023dc <main+0x7c0>)
 80022ee:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	edd3 6a00 	vldr	s13, [r3]
 80022fa:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 80022fe:	ed93 7a00 	vldr	s14, [r3]
 8002302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002306:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80023e4 <main+0x7c8>
 800230a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800230e:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 8002312:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002316:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800231a:	edc3 7a00 	vstr	s15, [r3]
				  temp2 = filteredValue[i+1]/maxNumTime * 200 + 27;
 800231e:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8002322:	3301      	adds	r3, #1
 8002324:	4a2d      	ldr	r2, [pc, #180]	; (80023dc <main+0x7c0>)
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	edd3 6a00 	vldr	s13, [r3]
 800232e:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8002332:	ed93 7a00 	vldr	s14, [r3]
 8002336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800233a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80023e4 <main+0x7c8>
 800233e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002342:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 8002346:	ee77 7a87 	vadd.f32	s15, s15, s14
 800234a:	f607 0324 	addw	r3, r7, #2084	; 0x824
 800234e:	edc3 7a00 	vstr	s15, [r3]
			  }

			  BSP_LCD_DrawLine(temp1, y_pos, temp2, y_pos+2);
 8002352:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800235e:	ee17 3a90 	vmov	r3, s15
 8002362:	b298      	uxth	r0, r3
 8002364:	f607 0324 	addw	r3, r7, #2084	; 0x824
 8002368:	edd3 7a00 	vldr	s15, [r3]
 800236c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002370:	ee17 3a90 	vmov	r3, s15
 8002374:	b29a      	uxth	r2, r3
 8002376:	f8b7 386a 	ldrh.w	r3, [r7, #2154]	; 0x86a
 800237a:	3302      	adds	r3, #2
 800237c:	b29b      	uxth	r3, r3
 800237e:	f8b7 186a 	ldrh.w	r1, [r7, #2154]	; 0x86a
 8002382:	f002 fadd 	bl	8004940 <BSP_LCD_DrawLine>
//			  }
//			  if (filteredValue[i] == minNumTime && flagL == 0) {
//				  BSP_LCD_DisplayStringAt(temp1, 20, "-1", LEFT_MODE);
//				  flagL = 1;
//			  }
			  y_pos += 2;
 8002386:	f8b7 386a 	ldrh.w	r3, [r7, #2154]	; 0x86a
 800238a:	3302      	adds	r3, #2
 800238c:	f8a7 386a 	strh.w	r3, [r7, #2154]	; 0x86a
			  if (filteredValue[i] == minNumTime)
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <main+0x7c0>)
 8002392:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	eeb4 7a67 	vcmp.f32	s14, s15
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	d102      	bne.n	80023b6 <main+0x79a>
				  isLowest = 1;
 80023b0:	2301      	movs	r3, #1
 80023b2:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
		  for (size_t i = 0; i < 127; ++i) {
 80023b6:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80023ba:	3301      	adds	r3, #1
 80023bc:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 80023c0:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80023c4:	2b7e      	cmp	r3, #126	; 0x7e
 80023c6:	f67f af6b 	bls.w	80022a0 <main+0x684>
		  }
	  }

	  HAL_Delay(200);
 80023ca:	20c8      	movs	r0, #200	; 0xc8
 80023cc:	f003 f816 	bl	80053fc <HAL_Delay>
	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80023d0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80023d4:	f002 f90e 	bl	80045f4 <BSP_LCD_Clear>
  {
 80023d8:	e479      	b.n	8001cce <main+0xb2>
 80023da:	bf00      	nop
 80023dc:	20000b7c 	.word	0x20000b7c
 80023e0:	41d80000 	.word	0x41d80000
 80023e4:	43480000 	.word	0x43480000

080023e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b0a0      	sub	sp, #128	; 0x80
 80023ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023f2:	2230      	movs	r2, #48	; 0x30
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f008 f8f8 	bl	800a5ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	2230      	movs	r2, #48	; 0x30
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f008 f8e9 	bl	800a5ec <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	4b35      	ldr	r3, [pc, #212]	; (80024f4 <SystemClock_Config+0x10c>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a34      	ldr	r2, [pc, #208]	; (80024f4 <SystemClock_Config+0x10c>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
 800242a:	4b32      	ldr	r3, [pc, #200]	; (80024f4 <SystemClock_Config+0x10c>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	4b2f      	ldr	r3, [pc, #188]	; (80024f8 <SystemClock_Config+0x110>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a2e      	ldr	r2, [pc, #184]	; (80024f8 <SystemClock_Config+0x110>)
 8002440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <SystemClock_Config+0x110>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002452:	2302      	movs	r3, #2
 8002454:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002456:	2301      	movs	r3, #1
 8002458:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800245a:	2310      	movs	r3, #16
 800245c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800245e:	2302      	movs	r3, #2
 8002460:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002462:	2300      	movs	r3, #0
 8002464:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002466:	2308      	movs	r3, #8
 8002468:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800246a:	23b4      	movs	r3, #180	; 0xb4
 800246c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800246e:	2302      	movs	r3, #2
 8002470:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002472:	2307      	movs	r3, #7
 8002474:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002476:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800247a:	4618      	mov	r0, r3
 800247c:	f005 fb3c 	bl	8007af8 <HAL_RCC_OscConfig>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002486:	f000 ff4e 	bl	8003326 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800248a:	f005 fae5 	bl	8007a58 <HAL_PWREx_EnableOverDrive>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002494:	f000 ff47 	bl	8003326 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002498:	230f      	movs	r3, #15
 800249a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800249c:	2302      	movs	r3, #2
 800249e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024a0:	2300      	movs	r3, #0
 80024a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024b4:	2105      	movs	r1, #5
 80024b6:	4618      	mov	r0, r3
 80024b8:	f005 fd8e 	bl	8007fd8 <HAL_RCC_ClockConfig>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80024c2:	f000 ff30 	bl	8003326 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80024c6:	2308      	movs	r3, #8
 80024c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80024ca:	2332      	movs	r3, #50	; 0x32
 80024cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80024ce:	2302      	movs	r3, #2
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80024d2:	2300      	movs	r3, #0
 80024d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	4618      	mov	r0, r3
 80024dc:	f005 ff6e 	bl	80083bc <HAL_RCCEx_PeriphCLKConfig>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <SystemClock_Config+0x102>
  {
    Error_Handler();
 80024e6:	f000 ff1e 	bl	8003326 <Error_Handler>
  }
}
 80024ea:	bf00      	nop
 80024ec:	3780      	adds	r7, #128	; 0x80
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40007000 	.word	0x40007000

080024fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002502:	463b      	mov	r3, r7
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800250e:	4b22      	ldr	r3, [pc, #136]	; (8002598 <MX_ADC1_Init+0x9c>)
 8002510:	4a22      	ldr	r2, [pc, #136]	; (800259c <MX_ADC1_Init+0xa0>)
 8002512:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002514:	4b20      	ldr	r3, [pc, #128]	; (8002598 <MX_ADC1_Init+0x9c>)
 8002516:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800251a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800251c:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <MX_ADC1_Init+0x9c>)
 800251e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002522:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002524:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <MX_ADC1_Init+0x9c>)
 8002526:	2201      	movs	r2, #1
 8002528:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <MX_ADC1_Init+0x9c>)
 800252c:	2201      	movs	r2, #1
 800252e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <MX_ADC1_Init+0x9c>)
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <MX_ADC1_Init+0x9c>)
 800253a:	2200      	movs	r2, #0
 800253c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800253e:	4b16      	ldr	r3, [pc, #88]	; (8002598 <MX_ADC1_Init+0x9c>)
 8002540:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <MX_ADC1_Init+0xa4>)
 8002542:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <MX_ADC1_Init+0x9c>)
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <MX_ADC1_Init+0x9c>)
 800254c:	2201      	movs	r2, #1
 800254e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <MX_ADC1_Init+0x9c>)
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <MX_ADC1_Init+0x9c>)
 800255a:	2201      	movs	r2, #1
 800255c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800255e:	480e      	ldr	r0, [pc, #56]	; (8002598 <MX_ADC1_Init+0x9c>)
 8002560:	f002 ff6e 	bl	8005440 <HAL_ADC_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800256a:	f000 fedc 	bl	8003326 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800256e:	230d      	movs	r3, #13
 8002570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002572:	2301      	movs	r3, #1
 8002574:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002576:	2307      	movs	r3, #7
 8002578:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800257a:	463b      	mov	r3, r7
 800257c:	4619      	mov	r1, r3
 800257e:	4806      	ldr	r0, [pc, #24]	; (8002598 <MX_ADC1_Init+0x9c>)
 8002580:	f002 ffa2 	bl	80054c8 <HAL_ADC_ConfigChannel>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800258a:	f000 fecc 	bl	8003326 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000840 	.word	0x20000840
 800259c:	40012000 	.word	0x40012000
 80025a0:	0f000001 	.word	0x0f000001

080025a4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80025aa:	463b      	mov	r3, r7
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80025b2:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <MX_DAC_Init+0x4c>)
 80025b4:	4a0f      	ldr	r2, [pc, #60]	; (80025f4 <MX_DAC_Init+0x50>)
 80025b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80025b8:	480d      	ldr	r0, [pc, #52]	; (80025f0 <MX_DAC_Init+0x4c>)
 80025ba:	f003 fac4 	bl	8005b46 <HAL_DAC_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80025c4:	f000 feaf 	bl	8003326 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80025c8:	2324      	movs	r3, #36	; 0x24
 80025ca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80025d0:	463b      	mov	r3, r7
 80025d2:	2210      	movs	r2, #16
 80025d4:	4619      	mov	r1, r3
 80025d6:	4806      	ldr	r0, [pc, #24]	; (80025f0 <MX_DAC_Init+0x4c>)
 80025d8:	f003 fba4 	bl	8005d24 <HAL_DAC_ConfigChannel>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80025e2:	f000 fea0 	bl	8003326 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000a88 	.word	0x20000a88
 80025f4:	40007400 	.word	0x40007400

080025f8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <MX_DMA2D_Init+0x5c>)
 80025fe:	4a16      	ldr	r2, [pc, #88]	; (8002658 <MX_DMA2D_Init+0x60>)
 8002600:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002602:	4b14      	ldr	r3, [pc, #80]	; (8002654 <MX_DMA2D_Init+0x5c>)
 8002604:	2200      	movs	r2, #0
 8002606:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <MX_DMA2D_Init+0x5c>)
 800260a:	2202      	movs	r2, #2
 800260c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <MX_DMA2D_Init+0x5c>)
 8002610:	2200      	movs	r2, #0
 8002612:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002614:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <MX_DMA2D_Init+0x5c>)
 8002616:	2200      	movs	r2, #0
 8002618:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <MX_DMA2D_Init+0x5c>)
 800261c:	2202      	movs	r2, #2
 800261e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <MX_DMA2D_Init+0x5c>)
 8002622:	2200      	movs	r2, #0
 8002624:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002626:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <MX_DMA2D_Init+0x5c>)
 8002628:	2200      	movs	r2, #0
 800262a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800262c:	4809      	ldr	r0, [pc, #36]	; (8002654 <MX_DMA2D_Init+0x5c>)
 800262e:	f004 f81d 	bl	800666c <HAL_DMA2D_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002638:	f000 fe75 	bl	8003326 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800263c:	2101      	movs	r1, #1
 800263e:	4805      	ldr	r0, [pc, #20]	; (8002654 <MX_DMA2D_Init+0x5c>)
 8002640:	f004 f972 	bl	8006928 <HAL_DMA2D_ConfigLayer>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800264a:	f000 fe6c 	bl	8003326 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000a9c 	.word	0x20000a9c
 8002658:	4002b000 	.word	0x4002b000

0800265c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <MX_I2C3_Init+0x74>)
 8002662:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <MX_I2C3_Init+0x78>)
 8002664:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <MX_I2C3_Init+0x74>)
 8002668:	4a1b      	ldr	r2, [pc, #108]	; (80026d8 <MX_I2C3_Init+0x7c>)
 800266a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800266c:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <MX_I2C3_Init+0x74>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <MX_I2C3_Init+0x74>)
 8002674:	2200      	movs	r2, #0
 8002676:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002678:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <MX_I2C3_Init+0x74>)
 800267a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800267e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002680:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <MX_I2C3_Init+0x74>)
 8002682:	2200      	movs	r2, #0
 8002684:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <MX_I2C3_Init+0x74>)
 8002688:	2200      	movs	r2, #0
 800268a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800268c:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <MX_I2C3_Init+0x74>)
 800268e:	2200      	movs	r2, #0
 8002690:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <MX_I2C3_Init+0x74>)
 8002694:	2200      	movs	r2, #0
 8002696:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002698:	480d      	ldr	r0, [pc, #52]	; (80026d0 <MX_I2C3_Init+0x74>)
 800269a:	f004 fd59 	bl	8007150 <HAL_I2C_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80026a4:	f000 fe3f 	bl	8003326 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026a8:	2100      	movs	r1, #0
 80026aa:	4809      	ldr	r0, [pc, #36]	; (80026d0 <MX_I2C3_Init+0x74>)
 80026ac:	f004 fe88 	bl	80073c0 <HAL_I2CEx_ConfigAnalogFilter>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80026b6:	f000 fe36 	bl	8003326 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80026ba:	2100      	movs	r1, #0
 80026bc:	4804      	ldr	r0, [pc, #16]	; (80026d0 <MX_I2C3_Init+0x74>)
 80026be:	f004 febb 	bl	8007438 <HAL_I2CEx_ConfigDigitalFilter>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80026c8:	f000 fe2d 	bl	8003326 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80026cc:	bf00      	nop
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	200002ac 	.word	0x200002ac
 80026d4:	40005c00 	.word	0x40005c00
 80026d8:	000186a0 	.word	0x000186a0

080026dc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b09a      	sub	sp, #104	; 0x68
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80026e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026e6:	2234      	movs	r2, #52	; 0x34
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f007 ff7e 	bl	800a5ec <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80026f0:	463b      	mov	r3, r7
 80026f2:	2234      	movs	r2, #52	; 0x34
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f007 ff78 	bl	800a5ec <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80026fc:	4b4d      	ldr	r3, [pc, #308]	; (8002834 <MX_LTDC_Init+0x158>)
 80026fe:	4a4e      	ldr	r2, [pc, #312]	; (8002838 <MX_LTDC_Init+0x15c>)
 8002700:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002702:	4b4c      	ldr	r3, [pc, #304]	; (8002834 <MX_LTDC_Init+0x158>)
 8002704:	2200      	movs	r2, #0
 8002706:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002708:	4b4a      	ldr	r3, [pc, #296]	; (8002834 <MX_LTDC_Init+0x158>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800270e:	4b49      	ldr	r3, [pc, #292]	; (8002834 <MX_LTDC_Init+0x158>)
 8002710:	2200      	movs	r2, #0
 8002712:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002714:	4b47      	ldr	r3, [pc, #284]	; (8002834 <MX_LTDC_Init+0x158>)
 8002716:	2200      	movs	r2, #0
 8002718:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800271a:	4b46      	ldr	r3, [pc, #280]	; (8002834 <MX_LTDC_Init+0x158>)
 800271c:	2207      	movs	r2, #7
 800271e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002720:	4b44      	ldr	r3, [pc, #272]	; (8002834 <MX_LTDC_Init+0x158>)
 8002722:	2203      	movs	r2, #3
 8002724:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8002726:	4b43      	ldr	r3, [pc, #268]	; (8002834 <MX_LTDC_Init+0x158>)
 8002728:	220e      	movs	r2, #14
 800272a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800272c:	4b41      	ldr	r3, [pc, #260]	; (8002834 <MX_LTDC_Init+0x158>)
 800272e:	2205      	movs	r2, #5
 8002730:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 8002732:	4b40      	ldr	r3, [pc, #256]	; (8002834 <MX_LTDC_Init+0x158>)
 8002734:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8002738:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 800273a:	4b3e      	ldr	r3, [pc, #248]	; (8002834 <MX_LTDC_Init+0x158>)
 800273c:	22f5      	movs	r2, #245	; 0xf5
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 340;
 8002740:	4b3c      	ldr	r3, [pc, #240]	; (8002834 <MX_LTDC_Init+0x158>)
 8002742:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 247;
 8002748:	4b3a      	ldr	r3, [pc, #232]	; (8002834 <MX_LTDC_Init+0x158>)
 800274a:	22f7      	movs	r2, #247	; 0xf7
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800274e:	4b39      	ldr	r3, [pc, #228]	; (8002834 <MX_LTDC_Init+0x158>)
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002756:	4b37      	ldr	r3, [pc, #220]	; (8002834 <MX_LTDC_Init+0x158>)
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800275e:	4b35      	ldr	r3, [pc, #212]	; (8002834 <MX_LTDC_Init+0x158>)
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002766:	4833      	ldr	r0, [pc, #204]	; (8002834 <MX_LTDC_Init+0x158>)
 8002768:	f004 fea6 	bl	80074b8 <HAL_LTDC_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_LTDC_Init+0x9a>
  {
    Error_Handler();
 8002772:	f000 fdd8 	bl	8003326 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002786:	2300      	movs	r3, #0
 8002788:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002796:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002798:	2305      	movs	r3, #5
 800279a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80027ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027be:	2200      	movs	r2, #0
 80027c0:	4619      	mov	r1, r3
 80027c2:	481c      	ldr	r0, [pc, #112]	; (8002834 <MX_LTDC_Init+0x158>)
 80027c4:	f004 ff48 	bl	8007658 <HAL_LTDC_ConfigLayer>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_LTDC_Init+0xf6>
  {
    Error_Handler();
 80027ce:	f000 fdaa 	bl	8003326 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80027ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027f2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80027f4:	2305      	movs	r3, #5
 80027f6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002816:	463b      	mov	r3, r7
 8002818:	2201      	movs	r2, #1
 800281a:	4619      	mov	r1, r3
 800281c:	4805      	ldr	r0, [pc, #20]	; (8002834 <MX_LTDC_Init+0x158>)
 800281e:	f004 ff1b 	bl	8007658 <HAL_LTDC_ConfigLayer>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_LTDC_Init+0x150>
  {
    Error_Handler();
 8002828:	f000 fd7d 	bl	8003326 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800282c:	bf00      	nop
 800282e:	3768      	adds	r7, #104	; 0x68
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000358 	.word	0x20000358
 8002838:	40016800 	.word	0x40016800

0800283c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002840:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <MX_SPI5_Init+0x64>)
 8002842:	4a18      	ldr	r2, [pc, #96]	; (80028a4 <MX_SPI5_Init+0x68>)
 8002844:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002846:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <MX_SPI5_Init+0x64>)
 8002848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800284c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <MX_SPI5_Init+0x64>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <MX_SPI5_Init+0x64>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <MX_SPI5_Init+0x64>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <MX_SPI5_Init+0x64>)
 8002862:	2200      	movs	r2, #0
 8002864:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <MX_SPI5_Init+0x64>)
 8002868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800286c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800286e:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <MX_SPI5_Init+0x64>)
 8002870:	2200      	movs	r2, #0
 8002872:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002874:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <MX_SPI5_Init+0x64>)
 8002876:	2200      	movs	r2, #0
 8002878:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <MX_SPI5_Init+0x64>)
 800287c:	2200      	movs	r2, #0
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002880:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <MX_SPI5_Init+0x64>)
 8002882:	2200      	movs	r2, #0
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <MX_SPI5_Init+0x64>)
 8002888:	220a      	movs	r2, #10
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800288c:	4804      	ldr	r0, [pc, #16]	; (80028a0 <MX_SPI5_Init+0x64>)
 800288e:	f005 ffd2 	bl	8008836 <HAL_SPI_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002898:	f000 fd45 	bl	8003326 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000300 	.word	0x20000300
 80028a4:	40015000 	.word	0x40015000

080028a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ae:	f107 0308 	add.w	r3, r7, #8
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028bc:	463b      	mov	r3, r7
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028c4:	4b1d      	ldr	r3, [pc, #116]	; (800293c <MX_TIM2_Init+0x94>)
 80028c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <MX_TIM2_Init+0x94>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <MX_TIM2_Init+0x94>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 600-1;
 80028d8:	4b18      	ldr	r3, [pc, #96]	; (800293c <MX_TIM2_Init+0x94>)
 80028da:	f240 2257 	movw	r2, #599	; 0x257
 80028de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e0:	4b16      	ldr	r3, [pc, #88]	; (800293c <MX_TIM2_Init+0x94>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <MX_TIM2_Init+0x94>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028ec:	4813      	ldr	r0, [pc, #76]	; (800293c <MX_TIM2_Init+0x94>)
 80028ee:	f006 fd2d 	bl	800934c <HAL_TIM_Base_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80028f8:	f000 fd15 	bl	8003326 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002900:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002902:	f107 0308 	add.w	r3, r7, #8
 8002906:	4619      	mov	r1, r3
 8002908:	480c      	ldr	r0, [pc, #48]	; (800293c <MX_TIM2_Init+0x94>)
 800290a:	f006 fe76 	bl	80095fa <HAL_TIM_ConfigClockSource>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002914:	f000 fd07 	bl	8003326 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002918:	2320      	movs	r3, #32
 800291a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002920:	463b      	mov	r3, r7
 8002922:	4619      	mov	r1, r3
 8002924:	4805      	ldr	r0, [pc, #20]	; (800293c <MX_TIM2_Init+0x94>)
 8002926:	f007 f88b 	bl	8009a40 <HAL_TIMEx_MasterConfigSynchronization>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002930:	f000 fcf9 	bl	8003326 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002934:	bf00      	nop
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000adc 	.word	0x20000adc

08002940 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <MX_UART5_Init+0x4c>)
 8002946:	4a12      	ldr	r2, [pc, #72]	; (8002990 <MX_UART5_Init+0x50>)
 8002948:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <MX_UART5_Init+0x4c>)
 800294c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002950:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <MX_UART5_Init+0x4c>)
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <MX_UART5_Init+0x4c>)
 800295a:	2200      	movs	r2, #0
 800295c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <MX_UART5_Init+0x4c>)
 8002960:	2200      	movs	r2, #0
 8002962:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <MX_UART5_Init+0x4c>)
 8002966:	220c      	movs	r2, #12
 8002968:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <MX_UART5_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <MX_UART5_Init+0x4c>)
 8002972:	2200      	movs	r2, #0
 8002974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002976:	4805      	ldr	r0, [pc, #20]	; (800298c <MX_UART5_Init+0x4c>)
 8002978:	f007 f8f2 	bl	8009b60 <HAL_UART_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002982:	f000 fcd0 	bl	8003326 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000800 	.word	0x20000800
 8002990:	40005000 	.word	0x40005000

08002994 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <MX_DMA_Init+0x3c>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a0b      	ldr	r2, [pc, #44]	; (80029d0 <MX_DMA_Init+0x3c>)
 80029a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <MX_DMA_Init+0x3c>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2100      	movs	r1, #0
 80029ba:	2011      	movs	r0, #17
 80029bc:	f003 f88d 	bl	8005ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80029c0:	2011      	movs	r0, #17
 80029c2:	f003 f8a6 	bl	8005b12 <HAL_NVIC_EnableIRQ>

}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800

080029d4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
 80029e8:	615a      	str	r2, [r3, #20]
 80029ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80029ec:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <MX_FMC_Init+0x94>)
 80029ee:	4a1f      	ldr	r2, [pc, #124]	; (8002a6c <MX_FMC_Init+0x98>)
 80029f0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <MX_FMC_Init+0x94>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <MX_FMC_Init+0x94>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80029fe:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <MX_FMC_Init+0x94>)
 8002a00:	2204      	movs	r2, #4
 8002a02:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002a04:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <MX_FMC_Init+0x94>)
 8002a06:	2210      	movs	r2, #16
 8002a08:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002a0a:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <MX_FMC_Init+0x94>)
 8002a0c:	2240      	movs	r2, #64	; 0x40
 8002a0e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <MX_FMC_Init+0x94>)
 8002a12:	2280      	movs	r2, #128	; 0x80
 8002a14:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <MX_FMC_Init+0x94>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <MX_FMC_Init+0x94>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <MX_FMC_Init+0x94>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <MX_FMC_Init+0x94>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8002a2e:	2310      	movs	r3, #16
 8002a30:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8002a32:	2310      	movs	r3, #16
 8002a34:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8002a36:	2310      	movs	r3, #16
 8002a38:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8002a3a:	2310      	movs	r3, #16
 8002a3c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8002a3e:	2310      	movs	r3, #16
 8002a40:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8002a42:	2310      	movs	r3, #16
 8002a44:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8002a46:	2310      	movs	r3, #16
 8002a48:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4806      	ldr	r0, [pc, #24]	; (8002a68 <MX_FMC_Init+0x94>)
 8002a50:	f005 fe72 	bl	8008738 <HAL_SDRAM_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8002a5a:	f000 fc64 	bl	8003326 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002a5e:	bf00      	nop
 8002a60:	3720      	adds	r7, #32
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000d7c 	.word	0x20000d7c
 8002a6c:	a0000140 	.word	0xa0000140

08002a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08e      	sub	sp, #56	; 0x38
 8002a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	60da      	str	r2, [r3, #12]
 8002a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]
 8002a8a:	4b95      	ldr	r3, [pc, #596]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a94      	ldr	r2, [pc, #592]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b92      	ldr	r3, [pc, #584]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	623b      	str	r3, [r7, #32]
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	4b8e      	ldr	r3, [pc, #568]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a8d      	ldr	r2, [pc, #564]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002aac:	f043 0320 	orr.w	r3, r3, #32
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b8b      	ldr	r3, [pc, #556]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	4b87      	ldr	r3, [pc, #540]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a86      	ldr	r2, [pc, #536]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b84      	ldr	r3, [pc, #528]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	4b80      	ldr	r3, [pc, #512]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a7f      	ldr	r2, [pc, #508]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b7d      	ldr	r3, [pc, #500]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	4b79      	ldr	r3, [pc, #484]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a78      	ldr	r2, [pc, #480]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b76      	ldr	r3, [pc, #472]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	4b72      	ldr	r3, [pc, #456]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a71      	ldr	r2, [pc, #452]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b6f      	ldr	r3, [pc, #444]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	4b6b      	ldr	r3, [pc, #428]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	4a6a      	ldr	r2, [pc, #424]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002b38:	f043 0310 	orr.w	r3, r3, #16
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	4b68      	ldr	r3, [pc, #416]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	4b64      	ldr	r3, [pc, #400]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	4a63      	ldr	r2, [pc, #396]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5a:	4b61      	ldr	r3, [pc, #388]	; (8002ce0 <MX_GPIO_Init+0x270>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	607b      	str	r3, [r7, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2116      	movs	r1, #22
 8002b6a:	485e      	ldr	r0, [pc, #376]	; (8002ce4 <MX_GPIO_Init+0x274>)
 8002b6c:	f004 fabe 	bl	80070ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002b70:	2200      	movs	r2, #0
 8002b72:	2180      	movs	r1, #128	; 0x80
 8002b74:	485c      	ldr	r0, [pc, #368]	; (8002ce8 <MX_GPIO_Init+0x278>)
 8002b76:	f004 fab9 	bl	80070ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002b80:	485a      	ldr	r0, [pc, #360]	; (8002cec <MX_GPIO_Init+0x27c>)
 8002b82:	f004 fab3 	bl	80070ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002b86:	2200      	movs	r2, #0
 8002b88:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002b8c:	4858      	ldr	r0, [pc, #352]	; (8002cf0 <MX_GPIO_Init+0x280>)
 8002b8e:	f004 faad 	bl	80070ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8002b92:	2316      	movs	r3, #22
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b96:	2301      	movs	r3, #1
 8002b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	484e      	ldr	r0, [pc, #312]	; (8002ce4 <MX_GPIO_Init+0x274>)
 8002baa:	f003 ffeb 	bl	8006b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 8002bae:	f248 0307 	movw	r3, #32775	; 0x8007
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bb4:	4b4f      	ldr	r3, [pc, #316]	; (8002cf4 <MX_GPIO_Init+0x284>)
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4849      	ldr	r0, [pc, #292]	; (8002ce8 <MX_GPIO_Init+0x278>)
 8002bc4:	f003 ffde 	bl	8006b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4842      	ldr	r0, [pc, #264]	; (8002ce8 <MX_GPIO_Init+0x278>)
 8002be0:	f003 ffd0 	bl	8006b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002be4:	2320      	movs	r3, #32
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002be8:	4b42      	ldr	r3, [pc, #264]	; (8002cf4 <MX_GPIO_Init+0x284>)
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	483b      	ldr	r0, [pc, #236]	; (8002ce4 <MX_GPIO_Init+0x274>)
 8002bf8:	f003 ffc4 	bl	8006b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bfc:	2304      	movs	r3, #4
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	483a      	ldr	r0, [pc, #232]	; (8002cf8 <MX_GPIO_Init+0x288>)
 8002c10:	f003 ffb8 	bl	8006b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8002c14:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c22:	2303      	movs	r3, #3
 8002c24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002c26:	230c      	movs	r3, #12
 8002c28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4831      	ldr	r0, [pc, #196]	; (8002cf8 <MX_GPIO_Init+0x288>)
 8002c32:	f003 ffa7 	bl	8006b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c48:	4619      	mov	r1, r3
 8002c4a:	482b      	ldr	r0, [pc, #172]	; (8002cf8 <MX_GPIO_Init+0x288>)
 8002c4c:	f003 ff9a 	bl	8006b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c56:	2300      	movs	r3, #0
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c62:	4619      	mov	r1, r3
 8002c64:	4821      	ldr	r0, [pc, #132]	; (8002cec <MX_GPIO_Init+0x27c>)
 8002c66:	f003 ff8d 	bl	8006b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002c6a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c70:	2301      	movs	r3, #1
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c80:	4619      	mov	r1, r3
 8002c82:	481a      	ldr	r0, [pc, #104]	; (8002cec <MX_GPIO_Init+0x27c>)
 8002c84:	f003 ff7e 	bl	8006b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c96:	2303      	movs	r3, #3
 8002c98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c9a:	2307      	movs	r3, #7
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4810      	ldr	r0, [pc, #64]	; (8002ce8 <MX_GPIO_Init+0x278>)
 8002ca6:	f003 ff6d 	bl	8006b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002caa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	480b      	ldr	r0, [pc, #44]	; (8002cf0 <MX_GPIO_Init+0x280>)
 8002cc4:	f003 ff5e 	bl	8006b84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2100      	movs	r1, #0
 8002ccc:	2006      	movs	r0, #6
 8002cce:	f002 ff04 	bl	8005ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002cd2:	2006      	movs	r0, #6
 8002cd4:	f002 ff1d 	bl	8005b12 <HAL_NVIC_EnableIRQ>

}
 8002cd8:	bf00      	nop
 8002cda:	3738      	adds	r7, #56	; 0x38
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020800 	.word	0x40020800
 8002ce8:	40020000 	.word	0x40020000
 8002cec:	40020c00 	.word	0x40020c00
 8002cf0:	40021800 	.word	0x40021800
 8002cf4:	10110000 	.word	0x10110000
 8002cf8:	40020400 	.word	0x40020400

08002cfc <bitReverseArray>:
  Performs the reverse bit operation for the FFT on the array passed in with @param samples
  Modified the passed in array
  @param numSamples = number of samples
*/
void bitReverseArray(COMPLEX* samples, int numSamples)
{
 8002cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	466b      	mov	r3, sp
 8002d08:	461e      	mov	r6, r3
  COMPLEX temp[numSamples];
 8002d0a:	6838      	ldr	r0, [r7, #0]
 8002d0c:	1e43      	subs	r3, r0, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	4603      	mov	r3, r0
 8002d12:	4619      	mov	r1, r3
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	f04f 0400 	mov.w	r4, #0
 8002d20:	01d4      	lsls	r4, r2, #7
 8002d22:	ea44 6451 	orr.w	r4, r4, r1, lsr #25
 8002d26:	01cb      	lsls	r3, r1, #7
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	f04f 0400 	mov.w	r4, #0
 8002d38:	01d4      	lsls	r4, r2, #7
 8002d3a:	ea44 6451 	orr.w	r4, r4, r1, lsr #25
 8002d3e:	01cb      	lsls	r3, r1, #7
 8002d40:	4603      	mov	r3, r0
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	3307      	adds	r3, #7
 8002d46:	3307      	adds	r3, #7
 8002d48:	08db      	lsrs	r3, r3, #3
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	ebad 0d03 	sub.w	sp, sp, r3
 8002d50:	466b      	mov	r3, sp
 8002d52:	3307      	adds	r3, #7
 8002d54:	08db      	lsrs	r3, r3, #3
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	60bb      	str	r3, [r7, #8]

  // Reverse each index
  for(int index = 0; index < numSamples; index++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	e016      	b.n	8002d8e <bitReverseArray+0x92>
  {
    temp[index] = samples[reverseBit(index,numSamples)];
 8002d60:	6839      	ldr	r1, [r7, #0]
 8002d62:	6938      	ldr	r0, [r7, #16]
 8002d64:	f000 fa64 	bl	8003230 <reverseBit>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4413      	add	r3, r2
 8002d70:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002d74:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8002d78:	68bd      	ldr	r5, [r7, #8]
 8002d7a:	6938      	ldr	r0, [r7, #16]
 8002d7c:	0100      	lsls	r0, r0, #4
 8002d7e:	4428      	add	r0, r5
 8002d80:	e9c0 1200 	strd	r1, r2, [r0]
 8002d84:	e9c0 3402 	strd	r3, r4, [r0, #8]
  for(int index = 0; index < numSamples; index++)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	dbe4      	blt.n	8002d60 <bitReverseArray+0x64>
  }

  //assign changes
  for(int index = 0; index < numSamples; index++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e012      	b.n	8002dc2 <bitReverseArray+0xc6>
  {
    samples[index] = temp[index];
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	18d0      	adds	r0, r2, r3
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	4413      	add	r3, r2
 8002dac:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002db0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8002db4:	e9c0 1200 	strd	r1, r2, [r0]
 8002db8:	e9c0 3402 	strd	r3, r4, [r0, #8]
  for(int index = 0; index < numSamples; index++)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	dbe8      	blt.n	8002d9c <bitReverseArray+0xa0>
 8002dca:	46b5      	mov	sp, r6
  }
}
 8002dcc:	bf00      	nop
 8002dce:	371c      	adds	r7, #28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dd4:	0000      	movs	r0, r0
	...

08002dd8 <getNumBits>:

/*
  return number of bits needed to represent @param temp
*/
int getNumBits(int temp)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
    return (int)ceil(log2(temp));
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7fd fb57 	bl	8000494 <__aeabi_i2d>
 8002de6:	4603      	mov	r3, r0
 8002de8:	460c      	mov	r4, r1
 8002dea:	ec44 3b10 	vmov	d0, r3, r4
 8002dee:	f008 f991 	bl	800b114 <log>
 8002df2:	ec51 0b10 	vmov	r0, r1, d0
 8002df6:	a30e      	add	r3, pc, #56	; (adr r3, 8002e30 <getNumBits+0x58>)
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	f7fd fcde 	bl	80007bc <__aeabi_ddiv>
 8002e00:	4603      	mov	r3, r0
 8002e02:	460c      	mov	r4, r1
 8002e04:	ec44 3b17 	vmov	d7, r3, r4
 8002e08:	eeb0 0a47 	vmov.f32	s0, s14
 8002e0c:	eef0 0a67 	vmov.f32	s1, s15
 8002e10:	f007 ff26 	bl	800ac60 <ceil>
 8002e14:	ec54 3b10 	vmov	r3, r4, d0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	f7fd fe54 	bl	8000ac8 <__aeabi_d2iz>
 8002e20:	4603      	mov	r3, r0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd90      	pop	{r4, r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	f3af 8000 	nop.w
 8002e30:	fefa39ef 	.word	0xfefa39ef
 8002e34:	3fe62e42 	.word	0x3fe62e42

08002e38 <FFT>:
  Iterative better than recursive (CALL STACK)
  Returns in dB

*/
double* FFT(COMPLEX* samples, int numSamples)
{
 8002e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e3c:	b09d      	sub	sp, #116	; 0x74
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
  // Bit reversal
  bitReverseArray(samples, numSamples);
 8002e44:	6839      	ldr	r1, [r7, #0]
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ff58 	bl	8002cfc <bitReverseArray>
  int halfSamples = numSamples/2;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	0fda      	lsrs	r2, r3, #31
 8002e50:	4413      	add	r3, r2
 8002e52:	105b      	asrs	r3, r3, #1
 8002e54:	66fb      	str	r3, [r7, #108]	; 0x6c

  // Calculate the twiddle factor array
  COMPLEX *twiddleFactor;
  twiddleFactor = (COMPLEX *) malloc(numSamples / 2 * sizeof(COMPLEX));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	0fda      	lsrs	r2, r3, #31
 8002e5a:	4413      	add	r3, r2
 8002e5c:	105b      	asrs	r3, r3, #1
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	4618      	mov	r0, r3
 8002e62:	f007 fbb3 	bl	800a5cc <malloc>
 8002e66:	4603      	mov	r3, r0
 8002e68:	657b      	str	r3, [r7, #84]	; 0x54

  //Assign standard twiddle values
  twiddleFactor[1] = ccos(-2 * M_PI / numSamples) + csin(-2 * M_PI / numSamples )*I;
 8002e6a:	6838      	ldr	r0, [r7, #0]
 8002e6c:	f7fd fb12 	bl	8000494 <__aeabi_i2d>
 8002e70:	4603      	mov	r3, r0
 8002e72:	460c      	mov	r4, r1
 8002e74:	461a      	mov	r2, r3
 8002e76:	4623      	mov	r3, r4
 8002e78:	a1d2      	add	r1, pc, #840	; (adr r1, 80031c4 <FFT+0x38c>)
 8002e7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e7e:	f7fd fc9d 	bl	80007bc <__aeabi_ddiv>
 8002e82:	4603      	mov	r3, r0
 8002e84:	460c      	mov	r4, r1
 8002e86:	4619      	mov	r1, r3
 8002e88:	4622      	mov	r2, r4
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	f04f 0400 	mov.w	r4, #0
 8002e92:	ec42 1b16 	vmov	d6, r1, r2
 8002e96:	ec44 3b17 	vmov	d7, r3, r4
 8002e9a:	eeb0 0a46 	vmov.f32	s0, s12
 8002e9e:	eef0 0a66 	vmov.f32	s1, s13
 8002ea2:	eeb0 1a47 	vmov.f32	s2, s14
 8002ea6:	eef0 1a67 	vmov.f32	s3, s15
 8002eaa:	f007 fd0e 	bl	800a8ca <ccos>
 8002eae:	eeb0 6a40 	vmov.f32	s12, s0
 8002eb2:	eef0 6a60 	vmov.f32	s13, s1
 8002eb6:	eeb0 7a41 	vmov.f32	s14, s2
 8002eba:	eef0 7a61 	vmov.f32	s15, s3
 8002ebe:	ec56 5b16 	vmov	r5, r6, d6
 8002ec2:	ec59 8b17 	vmov	r8, r9, d7
 8002ec6:	6838      	ldr	r0, [r7, #0]
 8002ec8:	f7fd fae4 	bl	8000494 <__aeabi_i2d>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	460c      	mov	r4, r1
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4623      	mov	r3, r4
 8002ed4:	a1bb      	add	r1, pc, #748	; (adr r1, 80031c4 <FFT+0x38c>)
 8002ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002eda:	f7fd fc6f 	bl	80007bc <__aeabi_ddiv>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	460c      	mov	r4, r1
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4622      	mov	r2, r4
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	f04f 0400 	mov.w	r4, #0
 8002eee:	ec42 1b16 	vmov	d6, r1, r2
 8002ef2:	ec44 3b17 	vmov	d7, r3, r4
 8002ef6:	eeb0 0a46 	vmov.f32	s0, s12
 8002efa:	eef0 0a66 	vmov.f32	s1, s13
 8002efe:	eeb0 1a47 	vmov.f32	s2, s14
 8002f02:	eef0 1a67 	vmov.f32	s3, s15
 8002f06:	f007 fe5c 	bl	800abc2 <csin>
 8002f0a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f0e:	eef0 7a60 	vmov.f32	s15, s1
 8002f12:	eeb0 6a41 	vmov.f32	s12, s2
 8002f16:	eef0 6a61 	vmov.f32	s13, s3
 8002f1a:	ed9f 3ba5 	vldr	d3, [pc, #660]	; 80031b0 <FFT+0x378>
 8002f1e:	ed9f 2ba6 	vldr	d2, [pc, #664]	; 80031b8 <FFT+0x380>
 8002f22:	eeb0 1a46 	vmov.f32	s2, s12
 8002f26:	eef0 1a66 	vmov.f32	s3, s13
 8002f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f2e:	eef0 0a67 	vmov.f32	s1, s15
 8002f32:	f7fd fe79 	bl	8000c28 <__muldc3>
 8002f36:	eeb0 6a40 	vmov.f32	s12, s0
 8002f3a:	eef0 6a60 	vmov.f32	s13, s1
 8002f3e:	eeb0 7a41 	vmov.f32	s14, s2
 8002f42:	eef0 7a61 	vmov.f32	s15, s3
 8002f46:	ec52 1b16 	vmov	r1, r2, d6
 8002f4a:	ec5b ab17 	vmov	sl, fp, d7
 8002f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f50:	f103 0410 	add.w	r4, r3, #16
 8002f54:	4613      	mov	r3, r2
 8002f56:	460a      	mov	r2, r1
 8002f58:	4628      	mov	r0, r5
 8002f5a:	4631      	mov	r1, r6
 8002f5c:	f7fd f94e 	bl	80001fc <__adddf3>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4615      	mov	r5, r2
 8002f66:	461e      	mov	r6, r3
 8002f68:	4652      	mov	r2, sl
 8002f6a:	465b      	mov	r3, fp
 8002f6c:	4640      	mov	r0, r8
 8002f6e:	4649      	mov	r1, r9
 8002f70:	f7fd f944 	bl	80001fc <__adddf3>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	e9c4 5600 	strd	r5, r6, [r4]
 8002f7c:	e9c4 2302 	strd	r2, r3, [r4, #8]
  twiddleFactor[0] = 1;
 8002f80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f82:	498f      	ldr	r1, [pc, #572]	; (80031c0 <FFT+0x388>)
 8002f84:	e9d1 3400 	ldrd	r3, r4, [r1]
 8002f88:	e9c2 3400 	strd	r3, r4, [r2]
 8002f8c:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 8002f90:	e9c2 3402 	strd	r3, r4, [r2, #8]

  // Calculate the other twiddle factors
  for(int temp = 2; temp <halfSamples; temp++)
 8002f94:	2302      	movs	r3, #2
 8002f96:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f98:	e045      	b.n	8003026 <FFT+0x1ee>
    twiddleFactor[temp] = cpow(twiddleFactor[1], temp);
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f9c:	3310      	adds	r3, #16
 8002f9e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002fa2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8002fa6:	4688      	mov	r8, r1
 8002fa8:	4691      	mov	r9, r2
 8002faa:	461d      	mov	r5, r3
 8002fac:	4626      	mov	r6, r4
 8002fae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002fb0:	f7fd fa70 	bl	8000494 <__aeabi_i2d>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	460c      	mov	r4, r1
 8002fb8:	469a      	mov	sl, r3
 8002fba:	46a3      	mov	fp, r4
 8002fbc:	f04f 0000 	mov.w	r0, #0
 8002fc0:	f04f 0100 	mov.w	r1, #0
 8002fc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fca:	18d4      	adds	r4, r2, r3
 8002fcc:	ec4b ab14 	vmov	d4, sl, fp
 8002fd0:	ec41 0b15 	vmov	d5, r0, r1
 8002fd4:	ec49 8b16 	vmov	d6, r8, r9
 8002fd8:	ec46 5b17 	vmov	d7, r5, r6
 8002fdc:	eeb0 2a44 	vmov.f32	s4, s8
 8002fe0:	eef0 2a64 	vmov.f32	s5, s9
 8002fe4:	eeb0 3a45 	vmov.f32	s6, s10
 8002fe8:	eef0 3a65 	vmov.f32	s7, s11
 8002fec:	eeb0 0a46 	vmov.f32	s0, s12
 8002ff0:	eef0 0a66 	vmov.f32	s1, s13
 8002ff4:	eeb0 1a47 	vmov.f32	s2, s14
 8002ff8:	eef0 1a67 	vmov.f32	s3, s15
 8002ffc:	f007 fd0c 	bl	800aa18 <cpow>
 8003000:	eeb0 6a40 	vmov.f32	s12, s0
 8003004:	eef0 6a60 	vmov.f32	s13, s1
 8003008:	eeb0 7a41 	vmov.f32	s14, s2
 800300c:	eef0 7a61 	vmov.f32	s15, s3
 8003010:	ec51 0b16 	vmov	r0, r1, d6
 8003014:	ec53 2b17 	vmov	r2, r3, d7
 8003018:	e9c4 0100 	strd	r0, r1, [r4]
 800301c:	e9c4 2302 	strd	r2, r3, [r4, #8]
  for(int temp = 2; temp <halfSamples; temp++)
 8003020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003022:	3301      	adds	r3, #1
 8003024:	66bb      	str	r3, [r7, #104]	; 0x68
 8003026:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302a:	429a      	cmp	r2, r3
 800302c:	dbb5      	blt.n	8002f9a <FFT+0x162>

  int sampleCounter = 1;
 800302e:	2301      	movs	r3, #1
 8003030:	667b      	str	r3, [r7, #100]	; 0x64
  //Begin algorithm
  for(int iter = 0; iter < getNumBits(numSamples); iter++)
 8003032:	2300      	movs	r3, #0
 8003034:	663b      	str	r3, [r7, #96]	; 0x60
 8003036:	e0a3      	b.n	8003180 <FFT+0x348>
  {
    // Over all samples
    for(int count = 0; count < numSamples; count++)
 8003038:	2300      	movs	r3, #0
 800303a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800303c:	e090      	b.n	8003160 <FFT+0x328>
    {
      //if there is no logical AND  (Periodicity)
      if( (count & sampleCounter) == 0)
 800303e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	f040 8088 	bne.w	800315a <FFT+0x322>
      {
        // add to array and multiply twiddle factor, then store using periodicity
        COMPLEX even = samples[count];
 800304a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	441a      	add	r2, r3
 8003052:	e9d2 3400 	ldrd	r3, r4, [r2]
 8003056:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800305a:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 800305e:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8003062:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003066:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800306a:	e9c7 1210 	strd	r1, r2, [r7, #64]	; 0x40
 800306e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        int twiddleIndex = (count * halfSamples) % (sampleCounter * halfSamples);
 8003072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003074:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800307c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800307e:	fb01 f202 	mul.w	r2, r1, r2
 8003082:	fb93 f1f2 	sdiv	r1, r3, r2
 8003086:	fb02 f201 	mul.w	r2, r2, r1
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	63fb      	str	r3, [r7, #60]	; 0x3c
        COMPLEX odd = samples[count+ sampleCounter] * twiddleFactor[twiddleIndex];
 800308e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003092:	4413      	add	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	ed93 7b00 	vldr	d7, [r3]
 800309e:	ed93 6b02 	vldr	d6, [r3, #8]
 80030a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030a8:	4413      	add	r3, r2
 80030aa:	ed93 5b00 	vldr	d5, [r3]
 80030ae:	ed93 4b02 	vldr	d4, [r3, #8]
 80030b2:	eeb0 3a44 	vmov.f32	s6, s8
 80030b6:	eef0 3a64 	vmov.f32	s7, s9
 80030ba:	eeb0 2a45 	vmov.f32	s4, s10
 80030be:	eef0 2a65 	vmov.f32	s5, s11
 80030c2:	eeb0 1a46 	vmov.f32	s2, s12
 80030c6:	eef0 1a66 	vmov.f32	s3, s13
 80030ca:	eeb0 0a47 	vmov.f32	s0, s14
 80030ce:	eef0 0a67 	vmov.f32	s1, s15
 80030d2:	f7fd fda9 	bl	8000c28 <__muldc3>
 80030d6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80030da:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 80030de:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80030e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80030e6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80030ea:	e9c7 3402 	strd	r3, r4, [r7, #8]
        //use property of periodicity to add 2 elements
        samples[count + sampleCounter] = even - odd;
 80030ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030f2:	4413      	add	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	18d4      	adds	r4, r2, r3
 80030fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003102:	f7fd f879 	bl	80001f8 <__aeabi_dsub>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4615      	mov	r5, r2
 800310c:	461e      	mov	r6, r3
 800310e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003112:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003116:	f7fd f86f 	bl	80001f8 <__aeabi_dsub>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	e9c4 5600 	strd	r5, r6, [r4]
 8003122:	e9c4 2302 	strd	r2, r3, [r4, #8]
        samples[count] = even + odd ;
 8003126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	18d4      	adds	r4, r2, r3
 800312e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003132:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003136:	f7fd f861 	bl	80001fc <__adddf3>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4615      	mov	r5, r2
 8003140:	461e      	mov	r6, r3
 8003142:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003146:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800314a:	f7fd f857 	bl	80001fc <__adddf3>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	e9c4 5600 	strd	r5, r6, [r4]
 8003156:	e9c4 2302 	strd	r2, r3, [r4, #8]
    for(int count = 0; count < numSamples; count++)
 800315a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800315c:	3301      	adds	r3, #1
 800315e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003160:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	f6ff af6a 	blt.w	800303e <FFT+0x206>
      }
    }
    //FFT decompose half number of points after each iteration
    sampleCounter = sampleCounter * 2;
 800316a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	667b      	str	r3, [r7, #100]	; 0x64
    halfSamples = halfSamples / 2;
 8003170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003172:	0fda      	lsrs	r2, r3, #31
 8003174:	4413      	add	r3, r2
 8003176:	105b      	asrs	r3, r3, #1
 8003178:	66fb      	str	r3, [r7, #108]	; 0x6c
  for(int iter = 0; iter < getNumBits(numSamples); iter++)
 800317a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800317c:	3301      	adds	r3, #1
 800317e:	663b      	str	r3, [r7, #96]	; 0x60
 8003180:	6838      	ldr	r0, [r7, #0]
 8003182:	f7ff fe29 	bl	8002dd8 <getNumBits>
 8003186:	4602      	mov	r2, r0
 8003188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800318a:	4293      	cmp	r3, r2
 800318c:	f6ff af54 	blt.w	8003038 <FFT+0x200>
  }
  // free memory allocated
  free(twiddleFactor);
 8003190:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003192:	f007 fa23 	bl	800a5dc <free>
  double * returnSamples = malloc(numSamples * sizeof(double));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4618      	mov	r0, r3
 800319c:	f007 fa16 	bl	800a5cc <malloc>
 80031a0:	4603      	mov	r3, r0
 80031a2:	653b      	str	r3, [r7, #80]	; 0x50
  for(int x = 0; x < numSamples; x++ )
 80031a4:	2300      	movs	r3, #0
 80031a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80031a8:	e037      	b.n	800321a <FFT+0x3e2>
 80031aa:	bf00      	nop
 80031ac:	f3af 8000 	nop.w
 80031b0:	00000000 	.word	0x00000000
 80031b4:	3ff00000 	.word	0x3ff00000
	...
 80031c0:	0800e828 	.word	0x0800e828
 80031c4:	54442d18 	.word	0x54442d18
 80031c8:	c01921fb 	.word	0xc01921fb
  {
    returnSamples[x] = (cabs(samples[x]));
 80031cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4413      	add	r3, r2
 80031d4:	e9d3 1200 	ldrd	r1, r2, [r3]
 80031d8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80031dc:	460d      	mov	r5, r1
 80031de:	4616      	mov	r6, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	4621      	mov	r1, r4
 80031e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80031ea:	18d4      	adds	r4, r2, r3
 80031ec:	ec46 5b16 	vmov	d6, r5, r6
 80031f0:	ec41 0b17 	vmov	d7, r0, r1
 80031f4:	eeb0 0a46 	vmov.f32	s0, s12
 80031f8:	eef0 0a66 	vmov.f32	s1, s13
 80031fc:	eeb0 1a47 	vmov.f32	s2, s14
 8003200:	eef0 1a67 	vmov.f32	s3, s15
 8003204:	f007 fb38 	bl	800a878 <cabs>
 8003208:	eeb0 7a40 	vmov.f32	s14, s0
 800320c:	eef0 7a60 	vmov.f32	s15, s1
 8003210:	ed84 7b00 	vstr	d7, [r4]
  for(int x = 0; x < numSamples; x++ )
 8003214:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003216:	3301      	adds	r3, #1
 8003218:	65bb      	str	r3, [r7, #88]	; 0x58
 800321a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	dbd4      	blt.n	80031cc <FFT+0x394>
  }
  return returnSamples;
 8003222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8003224:	4618      	mov	r0, r3
 8003226:	3774      	adds	r7, #116	; 0x74
 8003228:	46bd      	mov	sp, r7
 800322a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800322e:	bf00      	nop

08003230 <reverseBit>:
    eg: in = 100, out = 001
    @param numSamples is the number of samples used for FFT
    @param toRev is the index to reverse
*/
int reverseBit(int toRev, int numSamples)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]

  int reversedIndex = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
  int count = 1;
 800323e:	2301      	movs	r3, #1
 8003240:	60bb      	str	r3, [r7, #8]

  //from 1 to the number of bits used to represent
  for(; count <= getNumBits(numSamples); count++)
 8003242:	e017      	b.n	8003274 <reverseBit+0x44>
  {
    //bitwise AND the current index with single bitshift left
    if(toRev & ( 1 << (getNumBits(numSamples) - count) ) )
 8003244:	6838      	ldr	r0, [r7, #0]
 8003246:	f7ff fdc7 	bl	8002dd8 <getNumBits>
 800324a:	4602      	mov	r2, r0
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	fa42 f303 	asr.w	r3, r2, r3
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <reverseBit+0x3e>
    {
      reversedIndex =  (reversedIndex | (1 << (count - 1) )) ;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	3b01      	subs	r3, #1
 8003262:	2201      	movs	r2, #1
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
  for(; count <= getNumBits(numSamples); count++)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3301      	adds	r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	6838      	ldr	r0, [r7, #0]
 8003276:	f7ff fdaf 	bl	8002dd8 <getNumBits>
 800327a:	4602      	mov	r2, r0
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4293      	cmp	r3, r2
 8003280:	dde0      	ble.n	8003244 <reverseBit+0x14>
    }
  }
  return reversedIndex;
 8003282:	68fb      	ldr	r3, [r7, #12]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <max>:

double max(double temp1,double temp2) //max between two values
{
 800328c:	b590      	push	{r4, r7, lr}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	ed87 0b02 	vstr	d0, [r7, #8]
 8003296:	ed87 1b00 	vstr	d1, [r7]
  if(temp1 > temp2)
 800329a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800329e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032a2:	f7fd fbf1 	bl	8000a88 <__aeabi_dcmpgt>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <max+0x26>
  {
    return temp1;
 80032ac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80032b0:	e001      	b.n	80032b6 <max+0x2a>
  }
  return temp2;
 80032b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80032b6:	ec44 3b17 	vmov	d7, r3, r4
}
 80032ba:	eeb0 0a47 	vmov.f32	s0, s14
 80032be:	eef0 0a67 	vmov.f32	s1, s15
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd90      	pop	{r4, r7, pc}

080032c8 <findMax>:
double findMax(double* tempArr, int numSamples) // max in an array
{
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  double maxFound = tempArr[0];
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032d8:	e9c7 3404 	strd	r3, r4, [r7, #16]

  for(int x = 1; x < numSamples; x++)
 80032dc:	2301      	movs	r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e012      	b.n	8003308 <findMax+0x40>
  {
    maxFound = max(maxFound,tempArr[x]);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	ed93 7b00 	vldr	d7, [r3]
 80032ee:	eeb0 1a47 	vmov.f32	s2, s14
 80032f2:	eef0 1a67 	vmov.f32	s3, s15
 80032f6:	ed97 0b04 	vldr	d0, [r7, #16]
 80032fa:	f7ff ffc7 	bl	800328c <max>
 80032fe:	ed87 0b04 	vstr	d0, [r7, #16]
  for(int x = 1; x < numSamples; x++)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3301      	adds	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	dbe8      	blt.n	80032e2 <findMax+0x1a>
  }

  return maxFound;
 8003310:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003314:	ec44 3b17 	vmov	d7, r3, r4
}
 8003318:	eeb0 0a47 	vmov.f32	s0, s14
 800331c:	eef0 0a67 	vmov.f32	s1, s15
 8003320:	371c      	adds	r7, #28
 8003322:	46bd      	mov	sp, r7
 8003324:	bd90      	pop	{r4, r7, pc}

08003326 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003326:	b480      	push	{r7}
 8003328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800332a:	bf00      	nop
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <HAL_MspInit+0x4c>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	4a0f      	ldr	r2, [pc, #60]	; (8003380 <HAL_MspInit+0x4c>)
 8003344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003348:	6453      	str	r3, [r2, #68]	; 0x44
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <HAL_MspInit+0x4c>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	603b      	str	r3, [r7, #0]
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_MspInit+0x4c>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a08      	ldr	r2, [pc, #32]	; (8003380 <HAL_MspInit+0x4c>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_MspInit+0x4c>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40023800 	.word	0x40023800

08003384 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	; 0x28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338c:	f107 0314 	add.w	r3, r7, #20
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a17      	ldr	r2, [pc, #92]	; (8003400 <HAL_ADC_MspInit+0x7c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d127      	bne.n	80033f6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	4b16      	ldr	r3, [pc, #88]	; (8003404 <HAL_ADC_MspInit+0x80>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	4a15      	ldr	r2, [pc, #84]	; (8003404 <HAL_ADC_MspInit+0x80>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b4:	6453      	str	r3, [r2, #68]	; 0x44
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <HAL_ADC_MspInit+0x80>)
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <HAL_ADC_MspInit+0x80>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	4a0e      	ldr	r2, [pc, #56]	; (8003404 <HAL_ADC_MspInit+0x80>)
 80033cc:	f043 0304 	orr.w	r3, r3, #4
 80033d0:	6313      	str	r3, [r2, #48]	; 0x30
 80033d2:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <HAL_ADC_MspInit+0x80>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033de:	2308      	movs	r3, #8
 80033e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033e2:	2303      	movs	r3, #3
 80033e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ea:	f107 0314 	add.w	r3, r7, #20
 80033ee:	4619      	mov	r1, r3
 80033f0:	4805      	ldr	r0, [pc, #20]	; (8003408 <HAL_ADC_MspInit+0x84>)
 80033f2:	f003 fbc7 	bl	8006b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80033f6:	bf00      	nop
 80033f8:	3728      	adds	r7, #40	; 0x28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40012000 	.word	0x40012000
 8003404:	40023800 	.word	0x40023800
 8003408:	40020800 	.word	0x40020800

0800340c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	; 0x28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2f      	ldr	r2, [pc, #188]	; (80034e8 <HAL_DAC_MspInit+0xdc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d158      	bne.n	80034e0 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	4b2e      	ldr	r3, [pc, #184]	; (80034ec <HAL_DAC_MspInit+0xe0>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	4a2d      	ldr	r2, [pc, #180]	; (80034ec <HAL_DAC_MspInit+0xe0>)
 8003438:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800343c:	6413      	str	r3, [r2, #64]	; 0x40
 800343e:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <HAL_DAC_MspInit+0xe0>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4b27      	ldr	r3, [pc, #156]	; (80034ec <HAL_DAC_MspInit+0xe0>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	4a26      	ldr	r2, [pc, #152]	; (80034ec <HAL_DAC_MspInit+0xe0>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6313      	str	r3, [r2, #48]	; 0x30
 800345a:	4b24      	ldr	r3, [pc, #144]	; (80034ec <HAL_DAC_MspInit+0xe0>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003466:	2320      	movs	r3, #32
 8003468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800346a:	2303      	movs	r3, #3
 800346c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003472:	f107 0314 	add.w	r3, r7, #20
 8003476:	4619      	mov	r1, r3
 8003478:	481d      	ldr	r0, [pc, #116]	; (80034f0 <HAL_DAC_MspInit+0xe4>)
 800347a:	f003 fb83 	bl	8006b84 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 800347e:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <HAL_DAC_MspInit+0xe8>)
 8003480:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <HAL_DAC_MspInit+0xec>)
 8003482:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_DAC_MspInit+0xe8>)
 8003486:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800348a:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800348c:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_DAC_MspInit+0xe8>)
 800348e:	2240      	movs	r2, #64	; 0x40
 8003490:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003492:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <HAL_DAC_MspInit+0xe8>)
 8003494:	2200      	movs	r2, #0
 8003496:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8003498:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <HAL_DAC_MspInit+0xe8>)
 800349a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800349e:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034a0:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <HAL_DAC_MspInit+0xe8>)
 80034a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034a6:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034a8:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_DAC_MspInit+0xe8>)
 80034aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034ae:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80034b0:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <HAL_DAC_MspInit+0xe8>)
 80034b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034b6:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80034b8:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_DAC_MspInit+0xe8>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HAL_DAC_MspInit+0xe8>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80034c4:	480b      	ldr	r0, [pc, #44]	; (80034f4 <HAL_DAC_MspInit+0xe8>)
 80034c6:	f002 fd05 	bl	8005ed4 <HAL_DMA_Init>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80034d0:	f7ff ff29 	bl	8003326 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a07      	ldr	r2, [pc, #28]	; (80034f4 <HAL_DAC_MspInit+0xe8>)
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	4a06      	ldr	r2, [pc, #24]	; (80034f4 <HAL_DAC_MspInit+0xe8>)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80034e0:	bf00      	nop
 80034e2:	3728      	adds	r7, #40	; 0x28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40007400 	.word	0x40007400
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40020000 	.word	0x40020000
 80034f4:	20000b1c 	.word	0x20000b1c
 80034f8:	400260a0 	.word	0x400260a0

080034fc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a0b      	ldr	r2, [pc, #44]	; (8003538 <HAL_DMA2D_MspInit+0x3c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10d      	bne.n	800352a <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_DMA2D_MspInit+0x40>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <HAL_DMA2D_MspInit+0x40>)
 8003518:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <HAL_DMA2D_MspInit+0x40>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	4002b000 	.word	0x4002b000
 800353c:	40023800 	.word	0x40023800

08003540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a29      	ldr	r2, [pc, #164]	; (8003604 <HAL_I2C_MspInit+0xc4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d14b      	bne.n	80035fa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	4b28      	ldr	r3, [pc, #160]	; (8003608 <HAL_I2C_MspInit+0xc8>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a27      	ldr	r2, [pc, #156]	; (8003608 <HAL_I2C_MspInit+0xc8>)
 800356c:	f043 0304 	orr.w	r3, r3, #4
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b25      	ldr	r3, [pc, #148]	; (8003608 <HAL_I2C_MspInit+0xc8>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	4b21      	ldr	r3, [pc, #132]	; (8003608 <HAL_I2C_MspInit+0xc8>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	4a20      	ldr	r2, [pc, #128]	; (8003608 <HAL_I2C_MspInit+0xc8>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6313      	str	r3, [r2, #48]	; 0x30
 800358e:	4b1e      	ldr	r3, [pc, #120]	; (8003608 <HAL_I2C_MspInit+0xc8>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800359a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800359e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035a0:	2312      	movs	r3, #18
 80035a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035a4:	2301      	movs	r3, #1
 80035a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a8:	2303      	movs	r3, #3
 80035aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80035ac:	2304      	movs	r3, #4
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	4619      	mov	r1, r3
 80035b6:	4815      	ldr	r0, [pc, #84]	; (800360c <HAL_I2C_MspInit+0xcc>)
 80035b8:	f003 fae4 	bl	8006b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035c2:	2312      	movs	r3, #18
 80035c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035c6:	2301      	movs	r3, #1
 80035c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ca:	2303      	movs	r3, #3
 80035cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80035ce:	2304      	movs	r3, #4
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d2:	f107 0314 	add.w	r3, r7, #20
 80035d6:	4619      	mov	r1, r3
 80035d8:	480d      	ldr	r0, [pc, #52]	; (8003610 <HAL_I2C_MspInit+0xd0>)
 80035da:	f003 fad3 	bl	8006b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_I2C_MspInit+0xc8>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	4a08      	ldr	r2, [pc, #32]	; (8003608 <HAL_I2C_MspInit+0xc8>)
 80035e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035ec:	6413      	str	r3, [r2, #64]	; 0x40
 80035ee:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_I2C_MspInit+0xc8>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80035fa:	bf00      	nop
 80035fc:	3728      	adds	r7, #40	; 0x28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40005c00 	.word	0x40005c00
 8003608:	40023800 	.word	0x40023800
 800360c:	40020800 	.word	0x40020800
 8003610:	40020000 	.word	0x40020000

08003614 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08e      	sub	sp, #56	; 0x38
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a77      	ldr	r2, [pc, #476]	; (8003810 <HAL_LTDC_MspInit+0x1fc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	f040 80e8 	bne.w	8003808 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003638:	2300      	movs	r3, #0
 800363a:	623b      	str	r3, [r7, #32]
 800363c:	4b75      	ldr	r3, [pc, #468]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 800363e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003640:	4a74      	ldr	r2, [pc, #464]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 8003642:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003646:	6453      	str	r3, [r2, #68]	; 0x44
 8003648:	4b72      	ldr	r3, [pc, #456]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 800364a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003650:	623b      	str	r3, [r7, #32]
 8003652:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	4b6e      	ldr	r3, [pc, #440]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	4a6d      	ldr	r2, [pc, #436]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 800365e:	f043 0320 	orr.w	r3, r3, #32
 8003662:	6313      	str	r3, [r2, #48]	; 0x30
 8003664:	4b6b      	ldr	r3, [pc, #428]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003670:	2300      	movs	r3, #0
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	4b67      	ldr	r3, [pc, #412]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	4a66      	ldr	r2, [pc, #408]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6313      	str	r3, [r2, #48]	; 0x30
 8003680:	4b64      	ldr	r3, [pc, #400]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	4b60      	ldr	r3, [pc, #384]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	4a5f      	ldr	r2, [pc, #380]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 8003696:	f043 0302 	orr.w	r3, r3, #2
 800369a:	6313      	str	r3, [r2, #48]	; 0x30
 800369c:	4b5d      	ldr	r3, [pc, #372]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80036a8:	2300      	movs	r3, #0
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	4b59      	ldr	r3, [pc, #356]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	4a58      	ldr	r2, [pc, #352]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 80036b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b6:	6313      	str	r3, [r2, #48]	; 0x30
 80036b8:	4b56      	ldr	r3, [pc, #344]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	4b52      	ldr	r3, [pc, #328]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	4a51      	ldr	r2, [pc, #324]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 80036ce:	f043 0304 	orr.w	r3, r3, #4
 80036d2:	6313      	str	r3, [r2, #48]	; 0x30
 80036d4:	4b4f      	ldr	r3, [pc, #316]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036e0:	2300      	movs	r3, #0
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	4b4b      	ldr	r3, [pc, #300]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	4a4a      	ldr	r2, [pc, #296]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 80036ea:	f043 0308 	orr.w	r3, r3, #8
 80036ee:	6313      	str	r3, [r2, #48]	; 0x30
 80036f0:	4b48      	ldr	r3, [pc, #288]	; (8003814 <HAL_LTDC_MspInit+0x200>)
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003702:	2302      	movs	r3, #2
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003706:	2300      	movs	r3, #0
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370a:	2300      	movs	r3, #0
 800370c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800370e:	230e      	movs	r3, #14
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003716:	4619      	mov	r1, r3
 8003718:	483f      	ldr	r0, [pc, #252]	; (8003818 <HAL_LTDC_MspInit+0x204>)
 800371a:	f003 fa33 	bl	8006b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 800371e:	f641 0358 	movw	r3, #6232	; 0x1858
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003724:	2302      	movs	r3, #2
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372c:	2300      	movs	r3, #0
 800372e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003730:	230e      	movs	r3, #14
 8003732:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003738:	4619      	mov	r1, r3
 800373a:	4838      	ldr	r0, [pc, #224]	; (800381c <HAL_LTDC_MspInit+0x208>)
 800373c:	f003 fa22 	bl	8006b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003740:	2303      	movs	r3, #3
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374c:	2300      	movs	r3, #0
 800374e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003750:	2309      	movs	r3, #9
 8003752:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003758:	4619      	mov	r1, r3
 800375a:	4831      	ldr	r0, [pc, #196]	; (8003820 <HAL_LTDC_MspInit+0x20c>)
 800375c:	f003 fa12 	bl	8006b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8003760:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003766:	2302      	movs	r3, #2
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376e:	2300      	movs	r3, #0
 8003770:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003772:	230e      	movs	r3, #14
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800377a:	4619      	mov	r1, r3
 800377c:	4828      	ldr	r0, [pc, #160]	; (8003820 <HAL_LTDC_MspInit+0x20c>)
 800377e:	f003 fa01 	bl	8006b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8003782:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003788:	2302      	movs	r3, #2
 800378a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003790:	2300      	movs	r3, #0
 8003792:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003794:	230e      	movs	r3, #14
 8003796:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800379c:	4619      	mov	r1, r3
 800379e:	4821      	ldr	r0, [pc, #132]	; (8003824 <HAL_LTDC_MspInit+0x210>)
 80037a0:	f003 f9f0 	bl	8006b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80037a4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037aa:	2302      	movs	r3, #2
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b2:	2300      	movs	r3, #0
 80037b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037b6:	230e      	movs	r3, #14
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037be:	4619      	mov	r1, r3
 80037c0:	4819      	ldr	r0, [pc, #100]	; (8003828 <HAL_LTDC_MspInit+0x214>)
 80037c2:	f003 f9df 	bl	8006b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80037c6:	2348      	movs	r3, #72	; 0x48
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ca:	2302      	movs	r3, #2
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d2:	2300      	movs	r3, #0
 80037d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037d6:	230e      	movs	r3, #14
 80037d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037de:	4619      	mov	r1, r3
 80037e0:	4812      	ldr	r0, [pc, #72]	; (800382c <HAL_LTDC_MspInit+0x218>)
 80037e2:	f003 f9cf 	bl	8006b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80037e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ec:	2302      	movs	r3, #2
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f4:	2300      	movs	r3, #0
 80037f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80037f8:	2309      	movs	r3, #9
 80037fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003800:	4619      	mov	r1, r3
 8003802:	4808      	ldr	r0, [pc, #32]	; (8003824 <HAL_LTDC_MspInit+0x210>)
 8003804:	f003 f9be 	bl	8006b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003808:	bf00      	nop
 800380a:	3738      	adds	r7, #56	; 0x38
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40016800 	.word	0x40016800
 8003814:	40023800 	.word	0x40023800
 8003818:	40021400 	.word	0x40021400
 800381c:	40020000 	.word	0x40020000
 8003820:	40020400 	.word	0x40020400
 8003824:	40021800 	.word	0x40021800
 8003828:	40020800 	.word	0x40020800
 800382c:	40020c00 	.word	0x40020c00

08003830 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	; 0x28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003838:	f107 0314 	add.w	r3, r7, #20
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	60da      	str	r2, [r3, #12]
 8003846:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a19      	ldr	r2, [pc, #100]	; (80038b4 <HAL_SPI_MspInit+0x84>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d12c      	bne.n	80038ac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <HAL_SPI_MspInit+0x88>)
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <HAL_SPI_MspInit+0x88>)
 800385c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003860:	6453      	str	r3, [r2, #68]	; 0x44
 8003862:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <HAL_SPI_MspInit+0x88>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_SPI_MspInit+0x88>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	4a10      	ldr	r2, [pc, #64]	; (80038b8 <HAL_SPI_MspInit+0x88>)
 8003878:	f043 0320 	orr.w	r3, r3, #32
 800387c:	6313      	str	r3, [r2, #48]	; 0x30
 800387e:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <HAL_SPI_MspInit+0x88>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800388a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800388e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003890:	2302      	movs	r3, #2
 8003892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003894:	2300      	movs	r3, #0
 8003896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003898:	2303      	movs	r3, #3
 800389a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800389c:	2305      	movs	r3, #5
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038a0:	f107 0314 	add.w	r3, r7, #20
 80038a4:	4619      	mov	r1, r3
 80038a6:	4805      	ldr	r0, [pc, #20]	; (80038bc <HAL_SPI_MspInit+0x8c>)
 80038a8:	f003 f96c 	bl	8006b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80038ac:	bf00      	nop
 80038ae:	3728      	adds	r7, #40	; 0x28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40015000 	.word	0x40015000
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40021400 	.word	0x40021400

080038c0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a08      	ldr	r2, [pc, #32]	; (80038f0 <HAL_SPI_MspDeInit+0x30>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d10a      	bne.n	80038e8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80038d2:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <HAL_SPI_MspDeInit+0x34>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	4a07      	ldr	r2, [pc, #28]	; (80038f4 <HAL_SPI_MspDeInit+0x34>)
 80038d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80038dc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80038de:	f44f 7160 	mov.w	r1, #896	; 0x380
 80038e2:	4805      	ldr	r0, [pc, #20]	; (80038f8 <HAL_SPI_MspDeInit+0x38>)
 80038e4:	f003 faf8 	bl	8006ed8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40015000 	.word	0x40015000
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40021400 	.word	0x40021400

080038fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390c:	d115      	bne.n	800393a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_TIM_Base_MspInit+0x48>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	4a0b      	ldr	r2, [pc, #44]	; (8003944 <HAL_TIM_Base_MspInit+0x48>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	6413      	str	r3, [r2, #64]	; 0x40
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_TIM_Base_MspInit+0x48>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800392a:	2200      	movs	r2, #0
 800392c:	2100      	movs	r1, #0
 800392e:	201c      	movs	r0, #28
 8003930:	f002 f8d3 	bl	8005ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003934:	201c      	movs	r0, #28
 8003936:	f002 f8ec 	bl	8005b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800

08003948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a28      	ldr	r2, [pc, #160]	; (8003a08 <HAL_UART_MspInit+0xc0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d14a      	bne.n	8003a00 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	4b27      	ldr	r3, [pc, #156]	; (8003a0c <HAL_UART_MspInit+0xc4>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	4a26      	ldr	r2, [pc, #152]	; (8003a0c <HAL_UART_MspInit+0xc4>)
 8003974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003978:	6413      	str	r3, [r2, #64]	; 0x40
 800397a:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <HAL_UART_MspInit+0xc4>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <HAL_UART_MspInit+0xc4>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <HAL_UART_MspInit+0xc4>)
 8003990:	f043 0304 	orr.w	r3, r3, #4
 8003994:	6313      	str	r3, [r2, #48]	; 0x30
 8003996:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <HAL_UART_MspInit+0xc4>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_UART_MspInit+0xc4>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <HAL_UART_MspInit+0xc4>)
 80039ac:	f043 0308 	orr.w	r3, r3, #8
 80039b0:	6313      	str	r3, [r2, #48]	; 0x30
 80039b2:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <HAL_UART_MspInit+0xc4>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80039be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c4:	2302      	movs	r3, #2
 80039c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039c8:	2301      	movs	r3, #1
 80039ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039cc:	2303      	movs	r3, #3
 80039ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80039d0:	2308      	movs	r3, #8
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039d4:	f107 0314 	add.w	r3, r7, #20
 80039d8:	4619      	mov	r1, r3
 80039da:	480d      	ldr	r0, [pc, #52]	; (8003a10 <HAL_UART_MspInit+0xc8>)
 80039dc:	f003 f8d2 	bl	8006b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039e0:	2304      	movs	r3, #4
 80039e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e4:	2302      	movs	r3, #2
 80039e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039e8:	2301      	movs	r3, #1
 80039ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ec:	2303      	movs	r3, #3
 80039ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80039f0:	2308      	movs	r3, #8
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	4619      	mov	r1, r3
 80039fa:	4806      	ldr	r0, [pc, #24]	; (8003a14 <HAL_UART_MspInit+0xcc>)
 80039fc:	f003 f8c2 	bl	8006b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8003a00:	bf00      	nop
 8003a02:	3728      	adds	r7, #40	; 0x28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40005000 	.word	0x40005000
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40020800 	.word	0x40020800
 8003a14:	40020c00 	.word	0x40020c00

08003a18 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003a2c:	4b3b      	ldr	r3, [pc, #236]	; (8003b1c <HAL_FMC_MspInit+0x104>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d16f      	bne.n	8003b14 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8003a34:	4b39      	ldr	r3, [pc, #228]	; (8003b1c <HAL_FMC_MspInit+0x104>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	603b      	str	r3, [r7, #0]
 8003a3e:	4b38      	ldr	r3, [pc, #224]	; (8003b20 <HAL_FMC_MspInit+0x108>)
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	4a37      	ldr	r2, [pc, #220]	; (8003b20 <HAL_FMC_MspInit+0x108>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6393      	str	r3, [r2, #56]	; 0x38
 8003a4a:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <HAL_FMC_MspInit+0x108>)
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003a56:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003a5a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a64:	2303      	movs	r3, #3
 8003a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a68:	230c      	movs	r3, #12
 8003a6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a6c:	1d3b      	adds	r3, r7, #4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	482c      	ldr	r0, [pc, #176]	; (8003b24 <HAL_FMC_MspInit+0x10c>)
 8003a72:	f003 f887 	bl	8006b84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a76:	2301      	movs	r3, #1
 8003a78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a86:	230c      	movs	r3, #12
 8003a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4826      	ldr	r0, [pc, #152]	; (8003b28 <HAL_FMC_MspInit+0x110>)
 8003a90:	f003 f878 	bl	8006b84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8003a94:	f248 1333 	movw	r3, #33075	; 0x8133
 8003a98:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003aa6:	230c      	movs	r3, #12
 8003aa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	4619      	mov	r1, r3
 8003aae:	481f      	ldr	r0, [pc, #124]	; (8003b2c <HAL_FMC_MspInit+0x114>)
 8003ab0:	f003 f868 	bl	8006b84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8003ab4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003ab8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aba:	2302      	movs	r3, #2
 8003abc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003aca:	1d3b      	adds	r3, r7, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4818      	ldr	r0, [pc, #96]	; (8003b30 <HAL_FMC_MspInit+0x118>)
 8003ad0:	f003 f858 	bl	8006b84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8003ad4:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003ad8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ada:	2302      	movs	r3, #2
 8003adc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aea:	1d3b      	adds	r3, r7, #4
 8003aec:	4619      	mov	r1, r3
 8003aee:	4811      	ldr	r0, [pc, #68]	; (8003b34 <HAL_FMC_MspInit+0x11c>)
 8003af0:	f003 f848 	bl	8006b84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003af4:	2360      	movs	r3, #96	; 0x60
 8003af6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af8:	2302      	movs	r3, #2
 8003afa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b00:	2303      	movs	r3, #3
 8003b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b04:	230c      	movs	r3, #12
 8003b06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b08:	1d3b      	adds	r3, r7, #4
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	480a      	ldr	r0, [pc, #40]	; (8003b38 <HAL_FMC_MspInit+0x120>)
 8003b0e:	f003 f839 	bl	8006b84 <HAL_GPIO_Init>
 8003b12:	e000      	b.n	8003b16 <HAL_FMC_MspInit+0xfe>
    return;
 8003b14:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	200000f4 	.word	0x200000f4
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40021400 	.word	0x40021400
 8003b28:	40020800 	.word	0x40020800
 8003b2c:	40021800 	.word	0x40021800
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40020c00 	.word	0x40020c00
 8003b38:	40020400 	.word	0x40020400

08003b3c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003b44:	f7ff ff68 	bl	8003a18 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b62:	e7fe      	b.n	8003b62 <HardFault_Handler+0x4>

08003b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b68:	e7fe      	b.n	8003b68 <MemManage_Handler+0x4>

08003b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b6e:	e7fe      	b.n	8003b6e <BusFault_Handler+0x4>

08003b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b74:	e7fe      	b.n	8003b74 <UsageFault_Handler+0x4>

08003b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b76:	b480      	push	{r7}
 8003b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b88:	bf00      	nop
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b92:	b480      	push	{r7}
 8003b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ba4:	f001 fc0a 	bl	80053bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ba8:	bf00      	nop
 8003baa:	bd80      	pop	{r7, pc}

08003bac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
//	pbhandler();
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	f003 fab5 	bl	8007120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8003bc0:	4802      	ldr	r0, [pc, #8]	; (8003bcc <DMA1_Stream6_IRQHandler+0x10>)
 8003bc2:	f002 faeb 	bl	800619c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000b1c 	.word	0x20000b1c

08003bd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bd4:	4802      	ldr	r0, [pc, #8]	; (8003be0 <TIM2_IRQHandler+0x10>)
 8003bd6:	f005 fc08 	bl	80093ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000adc 	.word	0x20000adc

08003be4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003bec:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <_sbrk+0x50>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <_sbrk+0x16>
		heap_end = &end;
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <_sbrk+0x50>)
 8003bf6:	4a10      	ldr	r2, [pc, #64]	; (8003c38 <_sbrk+0x54>)
 8003bf8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003bfa:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <_sbrk+0x50>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <_sbrk+0x50>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4413      	add	r3, r2
 8003c08:	466a      	mov	r2, sp
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d907      	bls.n	8003c1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003c0e:	f006 fcb3 	bl	800a578 <__errno>
 8003c12:	4602      	mov	r2, r0
 8003c14:	230c      	movs	r3, #12
 8003c16:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003c18:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1c:	e006      	b.n	8003c2c <_sbrk+0x48>
	}

	heap_end += incr;
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <_sbrk+0x50>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4413      	add	r3, r2
 8003c26:	4a03      	ldr	r2, [pc, #12]	; (8003c34 <_sbrk+0x50>)
 8003c28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	200000f8 	.word	0x200000f8
 8003c38:	20001668 	.word	0x20001668

08003c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <SystemInit+0x28>)
 8003c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c46:	4a07      	ldr	r2, [pc, #28]	; (8003c64 <SystemInit+0x28>)
 8003c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <SystemInit+0x28>)
 8003c52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c56:	609a      	str	r2, [r3, #8]
#endif
}
 8003c58:	bf00      	nop
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ca0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c6e:	e003      	b.n	8003c78 <LoopCopyDataInit>

08003c70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c76:	3104      	adds	r1, #4

08003c78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c78:	480b      	ldr	r0, [pc, #44]	; (8003ca8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c80:	d3f6      	bcc.n	8003c70 <CopyDataInit>
  ldr  r2, =_sbss
 8003c82:	4a0b      	ldr	r2, [pc, #44]	; (8003cb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c84:	e002      	b.n	8003c8c <LoopFillZerobss>

08003c86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c88:	f842 3b04 	str.w	r3, [r2], #4

08003c8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c8c:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c90:	d3f9      	bcc.n	8003c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c92:	f7ff ffd3 	bl	8003c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c96:	f006 fc75 	bl	800a584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c9a:	f7fd ffbf 	bl	8001c1c <main>
  bx  lr    
 8003c9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003ca0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003ca4:	08011058 	.word	0x08011058
  ldr  r0, =_sdata
 8003ca8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003cac:	200000d0 	.word	0x200000d0
  ldr  r2, =_sbss
 8003cb0:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 8003cb4:	20001664 	.word	0x20001664

08003cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cb8:	e7fe      	b.n	8003cb8 <ADC_IRQHandler>

08003cba <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003cbe:	f000 fa5d 	bl	800417c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8003cc2:	20ca      	movs	r0, #202	; 0xca
 8003cc4:	f000 f95d 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8003cc8:	20c3      	movs	r0, #195	; 0xc3
 8003cca:	f000 f967 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8003cce:	2008      	movs	r0, #8
 8003cd0:	f000 f964 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8003cd4:	2050      	movs	r0, #80	; 0x50
 8003cd6:	f000 f961 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8003cda:	20cf      	movs	r0, #207	; 0xcf
 8003cdc:	f000 f951 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f000 f95b 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8003ce6:	20c1      	movs	r0, #193	; 0xc1
 8003ce8:	f000 f958 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8003cec:	2030      	movs	r0, #48	; 0x30
 8003cee:	f000 f955 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8003cf2:	20ed      	movs	r0, #237	; 0xed
 8003cf4:	f000 f945 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8003cf8:	2064      	movs	r0, #100	; 0x64
 8003cfa:	f000 f94f 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8003cfe:	2003      	movs	r0, #3
 8003d00:	f000 f94c 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8003d04:	2012      	movs	r0, #18
 8003d06:	f000 f949 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8003d0a:	2081      	movs	r0, #129	; 0x81
 8003d0c:	f000 f946 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8003d10:	20e8      	movs	r0, #232	; 0xe8
 8003d12:	f000 f936 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8003d16:	2085      	movs	r0, #133	; 0x85
 8003d18:	f000 f940 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f000 f93d 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003d22:	2078      	movs	r0, #120	; 0x78
 8003d24:	f000 f93a 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8003d28:	20cb      	movs	r0, #203	; 0xcb
 8003d2a:	f000 f92a 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8003d2e:	2039      	movs	r0, #57	; 0x39
 8003d30:	f000 f934 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8003d34:	202c      	movs	r0, #44	; 0x2c
 8003d36:	f000 f931 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	f000 f92e 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8003d40:	2034      	movs	r0, #52	; 0x34
 8003d42:	f000 f92b 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8003d46:	2002      	movs	r0, #2
 8003d48:	f000 f928 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8003d4c:	20f7      	movs	r0, #247	; 0xf7
 8003d4e:	f000 f918 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8003d52:	2020      	movs	r0, #32
 8003d54:	f000 f922 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8003d58:	20ea      	movs	r0, #234	; 0xea
 8003d5a:	f000 f912 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f000 f91c 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003d64:	2000      	movs	r0, #0
 8003d66:	f000 f919 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8003d6a:	20b1      	movs	r0, #177	; 0xb1
 8003d6c:	f000 f909 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003d70:	2000      	movs	r0, #0
 8003d72:	f000 f913 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003d76:	201b      	movs	r0, #27
 8003d78:	f000 f910 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003d7c:	20b6      	movs	r0, #182	; 0xb6
 8003d7e:	f000 f900 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8003d82:	200a      	movs	r0, #10
 8003d84:	f000 f90a 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8003d88:	20a2      	movs	r0, #162	; 0xa2
 8003d8a:	f000 f907 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8003d8e:	20c0      	movs	r0, #192	; 0xc0
 8003d90:	f000 f8f7 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003d94:	2010      	movs	r0, #16
 8003d96:	f000 f901 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8003d9a:	20c1      	movs	r0, #193	; 0xc1
 8003d9c:	f000 f8f1 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003da0:	2010      	movs	r0, #16
 8003da2:	f000 f8fb 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8003da6:	20c5      	movs	r0, #197	; 0xc5
 8003da8:	f000 f8eb 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8003dac:	2045      	movs	r0, #69	; 0x45
 8003dae:	f000 f8f5 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8003db2:	2015      	movs	r0, #21
 8003db4:	f000 f8f2 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8003db8:	20c7      	movs	r0, #199	; 0xc7
 8003dba:	f000 f8e2 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8003dbe:	2090      	movs	r0, #144	; 0x90
 8003dc0:	f000 f8ec 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8003dc4:	2036      	movs	r0, #54	; 0x36
 8003dc6:	f000 f8dc 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8003dca:	20c8      	movs	r0, #200	; 0xc8
 8003dcc:	f000 f8e6 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8003dd0:	20f2      	movs	r0, #242	; 0xf2
 8003dd2:	f000 f8d6 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	f000 f8e0 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8003ddc:	20b0      	movs	r0, #176	; 0xb0
 8003dde:	f000 f8d0 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8003de2:	20c2      	movs	r0, #194	; 0xc2
 8003de4:	f000 f8da 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003de8:	20b6      	movs	r0, #182	; 0xb6
 8003dea:	f000 f8ca 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8003dee:	200a      	movs	r0, #10
 8003df0:	f000 f8d4 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8003df4:	20a7      	movs	r0, #167	; 0xa7
 8003df6:	f000 f8d1 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8003dfa:	2027      	movs	r0, #39	; 0x27
 8003dfc:	f000 f8ce 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003e00:	2004      	movs	r0, #4
 8003e02:	f000 f8cb 	bl	8003f9c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8003e06:	202a      	movs	r0, #42	; 0x2a
 8003e08:	f000 f8bb 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f000 f8c5 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003e12:	2000      	movs	r0, #0
 8003e14:	f000 f8c2 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f000 f8bf 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8003e1e:	20ef      	movs	r0, #239	; 0xef
 8003e20:	f000 f8bc 	bl	8003f9c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8003e24:	202b      	movs	r0, #43	; 0x2b
 8003e26:	f000 f8ac 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	f000 f8b6 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003e30:	2000      	movs	r0, #0
 8003e32:	f000 f8b3 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8003e36:	2001      	movs	r0, #1
 8003e38:	f000 f8b0 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8003e3c:	203f      	movs	r0, #63	; 0x3f
 8003e3e:	f000 f8ad 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8003e42:	20f6      	movs	r0, #246	; 0xf6
 8003e44:	f000 f89d 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003e48:	2001      	movs	r0, #1
 8003e4a:	f000 f8a7 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f000 f8a4 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8003e54:	2006      	movs	r0, #6
 8003e56:	f000 f8a1 	bl	8003f9c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8003e5a:	202c      	movs	r0, #44	; 0x2c
 8003e5c:	f000 f891 	bl	8003f82 <ili9341_WriteReg>
  LCD_Delay(200);
 8003e60:	20c8      	movs	r0, #200	; 0xc8
 8003e62:	f000 fa79 	bl	8004358 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8003e66:	2026      	movs	r0, #38	; 0x26
 8003e68:	f000 f88b 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f000 f895 	bl	8003f9c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8003e72:	20e0      	movs	r0, #224	; 0xe0
 8003e74:	f000 f885 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8003e78:	200f      	movs	r0, #15
 8003e7a:	f000 f88f 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8003e7e:	2029      	movs	r0, #41	; 0x29
 8003e80:	f000 f88c 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8003e84:	2024      	movs	r0, #36	; 0x24
 8003e86:	f000 f889 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003e8a:	200c      	movs	r0, #12
 8003e8c:	f000 f886 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8003e90:	200e      	movs	r0, #14
 8003e92:	f000 f883 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003e96:	2009      	movs	r0, #9
 8003e98:	f000 f880 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8003e9c:	204e      	movs	r0, #78	; 0x4e
 8003e9e:	f000 f87d 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003ea2:	2078      	movs	r0, #120	; 0x78
 8003ea4:	f000 f87a 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8003ea8:	203c      	movs	r0, #60	; 0x3c
 8003eaa:	f000 f877 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003eae:	2009      	movs	r0, #9
 8003eb0:	f000 f874 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8003eb4:	2013      	movs	r0, #19
 8003eb6:	f000 f871 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003eba:	2005      	movs	r0, #5
 8003ebc:	f000 f86e 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8003ec0:	2017      	movs	r0, #23
 8003ec2:	f000 f86b 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003ec6:	2011      	movs	r0, #17
 8003ec8:	f000 f868 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003ecc:	2000      	movs	r0, #0
 8003ece:	f000 f865 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8003ed2:	20e1      	movs	r0, #225	; 0xe1
 8003ed4:	f000 f855 	bl	8003f82 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003ed8:	2000      	movs	r0, #0
 8003eda:	f000 f85f 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8003ede:	2016      	movs	r0, #22
 8003ee0:	f000 f85c 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003ee4:	201b      	movs	r0, #27
 8003ee6:	f000 f859 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003eea:	2004      	movs	r0, #4
 8003eec:	f000 f856 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003ef0:	2011      	movs	r0, #17
 8003ef2:	f000 f853 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8003ef6:	2007      	movs	r0, #7
 8003ef8:	f000 f850 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8003efc:	2031      	movs	r0, #49	; 0x31
 8003efe:	f000 f84d 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8003f02:	2033      	movs	r0, #51	; 0x33
 8003f04:	f000 f84a 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8003f08:	2042      	movs	r0, #66	; 0x42
 8003f0a:	f000 f847 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003f0e:	2005      	movs	r0, #5
 8003f10:	f000 f844 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003f14:	200c      	movs	r0, #12
 8003f16:	f000 f841 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8003f1a:	200a      	movs	r0, #10
 8003f1c:	f000 f83e 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8003f20:	2028      	movs	r0, #40	; 0x28
 8003f22:	f000 f83b 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8003f26:	202f      	movs	r0, #47	; 0x2f
 8003f28:	f000 f838 	bl	8003f9c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8003f2c:	200f      	movs	r0, #15
 8003f2e:	f000 f835 	bl	8003f9c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8003f32:	2011      	movs	r0, #17
 8003f34:	f000 f825 	bl	8003f82 <ili9341_WriteReg>
  LCD_Delay(200);
 8003f38:	20c8      	movs	r0, #200	; 0xc8
 8003f3a:	f000 fa0d 	bl	8004358 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8003f3e:	2029      	movs	r0, #41	; 0x29
 8003f40:	f000 f81f 	bl	8003f82 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8003f44:	202c      	movs	r0, #44	; 0x2c
 8003f46:	f000 f81c 	bl	8003f82 <ili9341_WriteReg>
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8003f52:	f000 f913 	bl	800417c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8003f56:	2103      	movs	r1, #3
 8003f58:	20d3      	movs	r0, #211	; 0xd3
 8003f5a:	f000 f82c 	bl	8003fb6 <ili9341_ReadData>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	b29b      	uxth	r3, r3
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8003f6a:	2029      	movs	r0, #41	; 0x29
 8003f6c:	f000 f809 	bl	8003f82 <ili9341_WriteReg>
}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8003f78:	2028      	movs	r0, #40	; 0x28
 8003f7a:	f000 f802 	bl	8003f82 <ili9341_WriteReg>
}
 8003f7e:	bf00      	nop
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	4603      	mov	r3, r0
 8003f8a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 f98e 	bl	80042b0 <LCD_IO_WriteReg>
}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 f95f 	bl	800426c <LCD_IO_WriteData>
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	460a      	mov	r2, r1
 8003fc0:	80fb      	strh	r3, [r7, #6]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8003fc6:	797a      	ldrb	r2, [r7, #5]
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	4611      	mov	r1, r2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f991 	bl	80042f4 <LCD_IO_ReadData>
 8003fd2:	4603      	mov	r3, r0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8003fe0:	23f0      	movs	r3, #240	; 0xf0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8003ff0:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8004004:	4819      	ldr	r0, [pc, #100]	; (800406c <SPIx_Init+0x6c>)
 8004006:	f005 f881 	bl	800910c <HAL_SPI_GetState>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d12b      	bne.n	8004068 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8004010:	4b16      	ldr	r3, [pc, #88]	; (800406c <SPIx_Init+0x6c>)
 8004012:	4a17      	ldr	r2, [pc, #92]	; (8004070 <SPIx_Init+0x70>)
 8004014:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004016:	4b15      	ldr	r3, [pc, #84]	; (800406c <SPIx_Init+0x6c>)
 8004018:	2218      	movs	r2, #24
 800401a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800401c:	4b13      	ldr	r3, [pc, #76]	; (800406c <SPIx_Init+0x6c>)
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8004022:	4b12      	ldr	r3, [pc, #72]	; (800406c <SPIx_Init+0x6c>)
 8004024:	2200      	movs	r2, #0
 8004026:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8004028:	4b10      	ldr	r3, [pc, #64]	; (800406c <SPIx_Init+0x6c>)
 800402a:	2200      	movs	r2, #0
 800402c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <SPIx_Init+0x6c>)
 8004030:	2200      	movs	r2, #0
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8004034:	4b0d      	ldr	r3, [pc, #52]	; (800406c <SPIx_Init+0x6c>)
 8004036:	2207      	movs	r2, #7
 8004038:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800403a:	4b0c      	ldr	r3, [pc, #48]	; (800406c <SPIx_Init+0x6c>)
 800403c:	2200      	movs	r2, #0
 800403e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8004040:	4b0a      	ldr	r3, [pc, #40]	; (800406c <SPIx_Init+0x6c>)
 8004042:	2200      	movs	r2, #0
 8004044:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8004046:	4b09      	ldr	r3, [pc, #36]	; (800406c <SPIx_Init+0x6c>)
 8004048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800404c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800404e:	4b07      	ldr	r3, [pc, #28]	; (800406c <SPIx_Init+0x6c>)
 8004050:	2200      	movs	r2, #0
 8004052:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <SPIx_Init+0x6c>)
 8004056:	f44f 7282 	mov.w	r2, #260	; 0x104
 800405a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800405c:	4803      	ldr	r0, [pc, #12]	; (800406c <SPIx_Init+0x6c>)
 800405e:	f000 f853 	bl	8004108 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8004062:	4802      	ldr	r0, [pc, #8]	; (800406c <SPIx_Init+0x6c>)
 8004064:	f004 fbe7 	bl	8008836 <HAL_SPI_Init>
  } 
}
 8004068:	bf00      	nop
 800406a:	bd80      	pop	{r7, pc}
 800406c:	200000fc 	.word	0x200000fc
 8004070:	40015000 	.word	0x40015000

08004074 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	b29a      	uxth	r2, r3
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <SPIx_Read+0x38>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f107 0108 	add.w	r1, r7, #8
 800408e:	4808      	ldr	r0, [pc, #32]	; (80040b0 <SPIx_Read+0x3c>)
 8004090:	f004 fd91 	bl	8008bb6 <HAL_SPI_Receive>
 8004094:	4603      	mov	r3, r0
 8004096:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800409e:	f000 f827 	bl	80040f0 <SPIx_Error>
  }
  
  return readvalue;
 80040a2:	68bb      	ldr	r3, [r7, #8]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000040 	.word	0x20000040
 80040b0:	200000fc 	.word	0x200000fc

080040b4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80040c2:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <SPIx_Write+0x34>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	1db9      	adds	r1, r7, #6
 80040c8:	2201      	movs	r2, #1
 80040ca:	4808      	ldr	r0, [pc, #32]	; (80040ec <SPIx_Write+0x38>)
 80040cc:	f004 fc3f 	bl	800894e <HAL_SPI_Transmit>
 80040d0:	4603      	mov	r3, r0
 80040d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80040da:	f000 f809 	bl	80040f0 <SPIx_Error>
  }
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000040 	.word	0x20000040
 80040ec:	200000fc 	.word	0x200000fc

080040f0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80040f4:	4803      	ldr	r0, [pc, #12]	; (8004104 <SPIx_Error+0x14>)
 80040f6:	f004 fc02 	bl	80088fe <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80040fa:	f7ff ff81 	bl	8004000 <SPIx_Init>
}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	200000fc 	.word	0x200000fc

08004108 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08a      	sub	sp, #40	; 0x28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	4b17      	ldr	r3, [pc, #92]	; (8004174 <SPIx_MspInit+0x6c>)
 8004116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004118:	4a16      	ldr	r2, [pc, #88]	; (8004174 <SPIx_MspInit+0x6c>)
 800411a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800411e:	6453      	str	r3, [r2, #68]	; 0x44
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <SPIx_MspInit+0x6c>)
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	4b10      	ldr	r3, [pc, #64]	; (8004174 <SPIx_MspInit+0x6c>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	4a0f      	ldr	r2, [pc, #60]	; (8004174 <SPIx_MspInit+0x6c>)
 8004136:	f043 0320 	orr.w	r3, r3, #32
 800413a:	6313      	str	r3, [r2, #48]	; 0x30
 800413c:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <SPIx_MspInit+0x6c>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8004148:	f44f 7360 	mov.w	r3, #896	; 0x380
 800414c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800414e:	2302      	movs	r3, #2
 8004150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8004152:	2302      	movs	r3, #2
 8004154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8004156:	2301      	movs	r3, #1
 8004158:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800415a:	2305      	movs	r3, #5
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800415e:	f107 0314 	add.w	r3, r7, #20
 8004162:	4619      	mov	r1, r3
 8004164:	4804      	ldr	r0, [pc, #16]	; (8004178 <SPIx_MspInit+0x70>)
 8004166:	f002 fd0d 	bl	8006b84 <HAL_GPIO_Init>
}
 800416a:	bf00      	nop
 800416c:	3728      	adds	r7, #40	; 0x28
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800
 8004178:	40021400 	.word	0x40021400

0800417c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8004182:	4b36      	ldr	r3, [pc, #216]	; (800425c <LCD_IO_Init+0xe0>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d164      	bne.n	8004254 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800418a:	4b34      	ldr	r3, [pc, #208]	; (800425c <LCD_IO_Init+0xe0>)
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8004190:	2300      	movs	r3, #0
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	4b32      	ldr	r3, [pc, #200]	; (8004260 <LCD_IO_Init+0xe4>)
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	4a31      	ldr	r2, [pc, #196]	; (8004260 <LCD_IO_Init+0xe4>)
 800419a:	f043 0308 	orr.w	r3, r3, #8
 800419e:	6313      	str	r3, [r2, #48]	; 0x30
 80041a0:	4b2f      	ldr	r3, [pc, #188]	; (8004260 <LCD_IO_Init+0xe4>)
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80041ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80041b2:	2301      	movs	r3, #1
 80041b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80041ba:	2302      	movs	r3, #2
 80041bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80041be:	f107 030c 	add.w	r3, r7, #12
 80041c2:	4619      	mov	r1, r3
 80041c4:	4827      	ldr	r0, [pc, #156]	; (8004264 <LCD_IO_Init+0xe8>)
 80041c6:	f002 fcdd 	bl	8006b84 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	607b      	str	r3, [r7, #4]
 80041ce:	4b24      	ldr	r3, [pc, #144]	; (8004260 <LCD_IO_Init+0xe4>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	4a23      	ldr	r2, [pc, #140]	; (8004260 <LCD_IO_Init+0xe4>)
 80041d4:	f043 0308 	orr.w	r3, r3, #8
 80041d8:	6313      	str	r3, [r2, #48]	; 0x30
 80041da:	4b21      	ldr	r3, [pc, #132]	; (8004260 <LCD_IO_Init+0xe4>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	607b      	str	r3, [r7, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80041e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80041ec:	2301      	movs	r3, #1
 80041ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80041f4:	2302      	movs	r3, #2
 80041f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80041f8:	f107 030c 	add.w	r3, r7, #12
 80041fc:	4619      	mov	r1, r3
 80041fe:	4819      	ldr	r0, [pc, #100]	; (8004264 <LCD_IO_Init+0xe8>)
 8004200:	f002 fcc0 	bl	8006b84 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8004204:	2300      	movs	r3, #0
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	4b15      	ldr	r3, [pc, #84]	; (8004260 <LCD_IO_Init+0xe4>)
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	4a14      	ldr	r2, [pc, #80]	; (8004260 <LCD_IO_Init+0xe4>)
 800420e:	f043 0304 	orr.w	r3, r3, #4
 8004212:	6313      	str	r3, [r2, #48]	; 0x30
 8004214:	4b12      	ldr	r3, [pc, #72]	; (8004260 <LCD_IO_Init+0xe4>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8004220:	2304      	movs	r3, #4
 8004222:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004224:	2301      	movs	r3, #1
 8004226:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800422c:	2302      	movs	r3, #2
 800422e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8004230:	f107 030c 	add.w	r3, r7, #12
 8004234:	4619      	mov	r1, r3
 8004236:	480c      	ldr	r0, [pc, #48]	; (8004268 <LCD_IO_Init+0xec>)
 8004238:	f002 fca4 	bl	8006b84 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800423c:	2200      	movs	r2, #0
 800423e:	2104      	movs	r1, #4
 8004240:	4809      	ldr	r0, [pc, #36]	; (8004268 <LCD_IO_Init+0xec>)
 8004242:	f002 ff53 	bl	80070ec <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8004246:	2201      	movs	r2, #1
 8004248:	2104      	movs	r1, #4
 800424a:	4807      	ldr	r0, [pc, #28]	; (8004268 <LCD_IO_Init+0xec>)
 800424c:	f002 ff4e 	bl	80070ec <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8004250:	f7ff fed6 	bl	8004000 <SPIx_Init>
  }
}
 8004254:	bf00      	nop
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000154 	.word	0x20000154
 8004260:	40023800 	.word	0x40023800
 8004264:	40020c00 	.word	0x40020c00
 8004268:	40020800 	.word	0x40020800

0800426c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8004276:	2201      	movs	r2, #1
 8004278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800427c:	480a      	ldr	r0, [pc, #40]	; (80042a8 <LCD_IO_WriteData+0x3c>)
 800427e:	f002 ff35 	bl	80070ec <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8004282:	2200      	movs	r2, #0
 8004284:	2104      	movs	r1, #4
 8004286:	4809      	ldr	r0, [pc, #36]	; (80042ac <LCD_IO_WriteData+0x40>)
 8004288:	f002 ff30 	bl	80070ec <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff ff10 	bl	80040b4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004294:	2201      	movs	r2, #1
 8004296:	2104      	movs	r1, #4
 8004298:	4804      	ldr	r0, [pc, #16]	; (80042ac <LCD_IO_WriteData+0x40>)
 800429a:	f002 ff27 	bl	80070ec <HAL_GPIO_WritePin>
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40020c00 	.word	0x40020c00
 80042ac:	40020800 	.word	0x40020800

080042b0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80042ba:	2200      	movs	r2, #0
 80042bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042c0:	480a      	ldr	r0, [pc, #40]	; (80042ec <LCD_IO_WriteReg+0x3c>)
 80042c2:	f002 ff13 	bl	80070ec <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80042c6:	2200      	movs	r2, #0
 80042c8:	2104      	movs	r1, #4
 80042ca:	4809      	ldr	r0, [pc, #36]	; (80042f0 <LCD_IO_WriteReg+0x40>)
 80042cc:	f002 ff0e 	bl	80070ec <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff feed 	bl	80040b4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80042da:	2201      	movs	r2, #1
 80042dc:	2104      	movs	r1, #4
 80042de:	4804      	ldr	r0, [pc, #16]	; (80042f0 <LCD_IO_WriteReg+0x40>)
 80042e0:	f002 ff04 	bl	80070ec <HAL_GPIO_WritePin>
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40020c00 	.word	0x40020c00
 80042f0:	40020800 	.word	0x40020800

080042f4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	460a      	mov	r2, r1
 80042fe:	80fb      	strh	r3, [r7, #6]
 8004300:	4613      	mov	r3, r2
 8004302:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8004308:	2200      	movs	r2, #0
 800430a:	2104      	movs	r1, #4
 800430c:	4810      	ldr	r0, [pc, #64]	; (8004350 <LCD_IO_ReadData+0x5c>)
 800430e:	f002 feed 	bl	80070ec <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8004312:	2200      	movs	r2, #0
 8004314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004318:	480e      	ldr	r0, [pc, #56]	; (8004354 <LCD_IO_ReadData+0x60>)
 800431a:	f002 fee7 	bl	80070ec <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fec7 	bl	80040b4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8004326:	797b      	ldrb	r3, [r7, #5]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fea3 	bl	8004074 <SPIx_Read>
 800432e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8004330:	2201      	movs	r2, #1
 8004332:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004336:	4807      	ldr	r0, [pc, #28]	; (8004354 <LCD_IO_ReadData+0x60>)
 8004338:	f002 fed8 	bl	80070ec <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800433c:	2201      	movs	r2, #1
 800433e:	2104      	movs	r1, #4
 8004340:	4803      	ldr	r0, [pc, #12]	; (8004350 <LCD_IO_ReadData+0x5c>)
 8004342:	f002 fed3 	bl	80070ec <HAL_GPIO_WritePin>
  
  return readvalue;
 8004346:	68fb      	ldr	r3, [r7, #12]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40020800 	.word	0x40020800
 8004354:	40020c00 	.word	0x40020c00

08004358 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f001 f84b 	bl	80053fc <HAL_Delay>
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8004374:	4b2d      	ldr	r3, [pc, #180]	; (800442c <BSP_LCD_Init+0xbc>)
 8004376:	4a2e      	ldr	r2, [pc, #184]	; (8004430 <BSP_LCD_Init+0xc0>)
 8004378:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800437a:	4b2c      	ldr	r3, [pc, #176]	; (800442c <BSP_LCD_Init+0xbc>)
 800437c:	2209      	movs	r2, #9
 800437e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8004380:	4b2a      	ldr	r3, [pc, #168]	; (800442c <BSP_LCD_Init+0xbc>)
 8004382:	2201      	movs	r2, #1
 8004384:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8004386:	4b29      	ldr	r3, [pc, #164]	; (800442c <BSP_LCD_Init+0xbc>)
 8004388:	221d      	movs	r2, #29
 800438a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800438c:	4b27      	ldr	r3, [pc, #156]	; (800442c <BSP_LCD_Init+0xbc>)
 800438e:	2203      	movs	r2, #3
 8004390:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8004392:	4b26      	ldr	r3, [pc, #152]	; (800442c <BSP_LCD_Init+0xbc>)
 8004394:	f240 120d 	movw	r2, #269	; 0x10d
 8004398:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800439a:	4b24      	ldr	r3, [pc, #144]	; (800442c <BSP_LCD_Init+0xbc>)
 800439c:	f240 1243 	movw	r2, #323	; 0x143
 80043a0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80043a2:	4b22      	ldr	r3, [pc, #136]	; (800442c <BSP_LCD_Init+0xbc>)
 80043a4:	f240 1217 	movw	r2, #279	; 0x117
 80043a8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80043aa:	4b20      	ldr	r3, [pc, #128]	; (800442c <BSP_LCD_Init+0xbc>)
 80043ac:	f240 1247 	movw	r2, #327	; 0x147
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80043b2:	4b1e      	ldr	r3, [pc, #120]	; (800442c <BSP_LCD_Init+0xbc>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80043ba:	4b1c      	ldr	r3, [pc, #112]	; (800442c <BSP_LCD_Init+0xbc>)
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80043c2:	4b1a      	ldr	r3, [pc, #104]	; (800442c <BSP_LCD_Init+0xbc>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80043ca:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <BSP_LCD_Init+0xc4>)
 80043cc:	2208      	movs	r2, #8
 80043ce:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80043d0:	4b18      	ldr	r3, [pc, #96]	; (8004434 <BSP_LCD_Init+0xc4>)
 80043d2:	22c0      	movs	r2, #192	; 0xc0
 80043d4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80043d6:	4b17      	ldr	r3, [pc, #92]	; (8004434 <BSP_LCD_Init+0xc4>)
 80043d8:	2204      	movs	r2, #4
 80043da:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80043dc:	4b15      	ldr	r3, [pc, #84]	; (8004434 <BSP_LCD_Init+0xc4>)
 80043de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80043e4:	4813      	ldr	r0, [pc, #76]	; (8004434 <BSP_LCD_Init+0xc4>)
 80043e6:	f003 ffe9 	bl	80083bc <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80043ea:	4b10      	ldr	r3, [pc, #64]	; (800442c <BSP_LCD_Init+0xbc>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80043f0:	4b0e      	ldr	r3, [pc, #56]	; (800442c <BSP_LCD_Init+0xbc>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80043f6:	4b0d      	ldr	r3, [pc, #52]	; (800442c <BSP_LCD_Init+0xbc>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80043fc:	4b0b      	ldr	r3, [pc, #44]	; (800442c <BSP_LCD_Init+0xbc>)
 80043fe:	2200      	movs	r2, #0
 8004400:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8004402:	f000 fbd1 	bl	8004ba8 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8004406:	4809      	ldr	r0, [pc, #36]	; (800442c <BSP_LCD_Init+0xbc>)
 8004408:	f003 f856 	bl	80074b8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <BSP_LCD_Init+0xc8>)
 800440e:	4a0b      	ldr	r2, [pc, #44]	; (800443c <BSP_LCD_Init+0xcc>)
 8004410:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8004412:	4b09      	ldr	r3, [pc, #36]	; (8004438 <BSP_LCD_Init+0xc8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800441a:	f000 fdb3 	bl	8004f84 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800441e:	4808      	ldr	r0, [pc, #32]	; (8004440 <BSP_LCD_Init+0xd0>)
 8004420:	f000 f8ce 	bl	80045c0 <BSP_LCD_SetFont>

  return LCD_OK;
 8004424:	2300      	movs	r3, #0
}  
 8004426:	4618      	mov	r0, r3
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	200015b0 	.word	0x200015b0
 8004430:	40016800 	.word	0x40016800
 8004434:	20000198 	.word	0x20000198
 8004438:	20001658 	.word	0x20001658
 800443c:	20000008 	.word	0x20000008
 8004440:	20000044 	.word	0x20000044

08004444 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <BSP_LCD_GetXSize+0x14>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	4798      	blx	r3
 8004450:	4603      	mov	r3, r0
}
 8004452:	4618      	mov	r0, r3
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20001658 	.word	0x20001658

0800445c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8004460:	4b03      	ldr	r3, [pc, #12]	; (8004470 <BSP_LCD_GetYSize+0x14>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	4798      	blx	r3
 8004468:	4603      	mov	r3, r0
}
 800446a:	4618      	mov	r0, r3
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	20001658 	.word	0x20001658

08004474 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004474:	b580      	push	{r7, lr}
 8004476:	b090      	sub	sp, #64	; 0x40
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	6039      	str	r1, [r7, #0]
 800447e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8004484:	f7ff ffde 	bl	8004444 <BSP_LCD_GetXSize>
 8004488:	4603      	mov	r3, r0
 800448a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004490:	f7ff ffe4 	bl	800445c <BSP_LCD_GetYSize>
 8004494:	4603      	mov	r3, r0
 8004496:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004498:	2300      	movs	r3, #0
 800449a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80044a0:	23ff      	movs	r3, #255	; 0xff
 80044a2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80044ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80044c0:	2307      	movs	r3, #7
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80044c4:	f7ff ffbe 	bl	8004444 <BSP_LCD_GetXSize>
 80044c8:	4603      	mov	r3, r0
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80044cc:	f7ff ffc6 	bl	800445c <BSP_LCD_GetYSize>
 80044d0:	4603      	mov	r3, r0
 80044d2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80044d4:	88fa      	ldrh	r2, [r7, #6]
 80044d6:	f107 030c 	add.w	r3, r7, #12
 80044da:	4619      	mov	r1, r3
 80044dc:	4814      	ldr	r0, [pc, #80]	; (8004530 <BSP_LCD_LayerDefaultInit+0xbc>)
 80044de:	f003 f8bb 	bl	8007658 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80044e2:	88fa      	ldrh	r2, [r7, #6]
 80044e4:	4913      	ldr	r1, [pc, #76]	; (8004534 <BSP_LCD_LayerDefaultInit+0xc0>)
 80044e6:	4613      	mov	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	3304      	adds	r3, #4
 80044f2:	f04f 32ff 	mov.w	r2, #4294967295
 80044f6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80044f8:	88fa      	ldrh	r2, [r7, #6]
 80044fa:	490e      	ldr	r1, [pc, #56]	; (8004534 <BSP_LCD_LayerDefaultInit+0xc0>)
 80044fc:	4613      	mov	r3, r2
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	3308      	adds	r3, #8
 8004508:	4a0b      	ldr	r2, [pc, #44]	; (8004538 <BSP_LCD_LayerDefaultInit+0xc4>)
 800450a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800450c:	88fa      	ldrh	r2, [r7, #6]
 800450e:	4909      	ldr	r1, [pc, #36]	; (8004534 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004510:	4613      	mov	r3, r2
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800451e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8004520:	4803      	ldr	r0, [pc, #12]	; (8004530 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004522:	f003 f8d7 	bl	80076d4 <HAL_LTDC_EnableDither>
}
 8004526:	bf00      	nop
 8004528:	3740      	adds	r7, #64	; 0x40
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	200015b0 	.word	0x200015b0
 8004534:	200001cc 	.word	0x200001cc
 8004538:	20000044 	.word	0x20000044

0800453c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004544:	4a04      	ldr	r2, [pc, #16]	; (8004558 <BSP_LCD_SelectLayer+0x1c>)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6013      	str	r3, [r2, #0]
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	200001c8 	.word	0x200001c8

0800455c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004564:	4b07      	ldr	r3, [pc, #28]	; (8004584 <BSP_LCD_SetTextColor+0x28>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4907      	ldr	r1, [pc, #28]	; (8004588 <BSP_LCD_SetTextColor+0x2c>)
 800456a:	4613      	mov	r3, r2
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	601a      	str	r2, [r3, #0]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	200001c8 	.word	0x200001c8
 8004588:	200001cc 	.word	0x200001cc

0800458c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004594:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <BSP_LCD_SetBackColor+0x2c>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	4908      	ldr	r1, [pc, #32]	; (80045bc <BSP_LCD_SetBackColor+0x30>)
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	3304      	adds	r3, #4
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	601a      	str	r2, [r3, #0]
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	200001c8 	.word	0x200001c8
 80045bc:	200001cc 	.word	0x200001cc

080045c0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80045c8:	4b08      	ldr	r3, [pc, #32]	; (80045ec <BSP_LCD_SetFont+0x2c>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4908      	ldr	r1, [pc, #32]	; (80045f0 <BSP_LCD_SetFont+0x30>)
 80045ce:	4613      	mov	r3, r2
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	3308      	adds	r3, #8
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	601a      	str	r2, [r3, #0]
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	200001c8 	.word	0x200001c8
 80045f0:	200001cc 	.word	0x200001cc

080045f4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80045f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80045fc:	4b0f      	ldr	r3, [pc, #60]	; (800463c <BSP_LCD_Clear+0x48>)
 80045fe:	681c      	ldr	r4, [r3, #0]
 8004600:	4b0e      	ldr	r3, [pc, #56]	; (800463c <BSP_LCD_Clear+0x48>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a0e      	ldr	r2, [pc, #56]	; (8004640 <BSP_LCD_Clear+0x4c>)
 8004606:	2134      	movs	r1, #52	; 0x34
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	4413      	add	r3, r2
 800460e:	335c      	adds	r3, #92	; 0x5c
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	461d      	mov	r5, r3
 8004614:	f7ff ff16 	bl	8004444 <BSP_LCD_GetXSize>
 8004618:	4606      	mov	r6, r0
 800461a:	f7ff ff1f 	bl	800445c <BSP_LCD_GetYSize>
 800461e:	4602      	mov	r2, r0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	9301      	str	r3, [sp, #4]
 8004624:	2300      	movs	r3, #0
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	4613      	mov	r3, r2
 800462a:	4632      	mov	r2, r6
 800462c:	4629      	mov	r1, r5
 800462e:	4620      	mov	r0, r4
 8004630:	f000 fc70 	bl	8004f14 <FillBuffer>
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800463c:	200001c8 	.word	0x200001c8
 8004640:	200015b0 	.word	0x200015b0

08004644 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004644:	b590      	push	{r4, r7, lr}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	80fb      	strh	r3, [r7, #6]
 800464e:	460b      	mov	r3, r1
 8004650:	80bb      	strh	r3, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004656:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <BSP_LCD_DisplayChar+0x80>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	491b      	ldr	r1, [pc, #108]	; (80046c8 <BSP_LCD_DisplayChar+0x84>)
 800465c:	4613      	mov	r3, r2
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	3308      	adds	r3, #8
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6819      	ldr	r1, [r3, #0]
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004672:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <BSP_LCD_DisplayChar+0x80>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4c14      	ldr	r4, [pc, #80]	; (80046c8 <BSP_LCD_DisplayChar+0x84>)
 8004678:	4613      	mov	r3, r2
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4423      	add	r3, r4
 8004682:	3308      	adds	r3, #8
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004688:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800468c:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <BSP_LCD_DisplayChar+0x80>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4c0d      	ldr	r4, [pc, #52]	; (80046c8 <BSP_LCD_DisplayChar+0x84>)
 8004692:	4613      	mov	r3, r2
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4423      	add	r3, r4
 800469c:	3308      	adds	r3, #8
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	889b      	ldrh	r3, [r3, #4]
 80046a2:	3307      	adds	r3, #7
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	da00      	bge.n	80046aa <BSP_LCD_DisplayChar+0x66>
 80046a8:	3307      	adds	r3, #7
 80046aa:	10db      	asrs	r3, r3, #3
 80046ac:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80046b0:	18ca      	adds	r2, r1, r3
 80046b2:	88b9      	ldrh	r1, [r7, #4]
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fb72 	bl	8004da0 <DrawChar>
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd90      	pop	{r4, r7, pc}
 80046c4:	200001c8 	.word	0x200001c8
 80046c8:	200001cc 	.word	0x200001cc

080046cc <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80046cc:	b5b0      	push	{r4, r5, r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60ba      	str	r2, [r7, #8]
 80046d4:	461a      	mov	r2, r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	81fb      	strh	r3, [r7, #14]
 80046da:	460b      	mov	r3, r1
 80046dc:	81bb      	strh	r3, [r7, #12]
 80046de:	4613      	mov	r3, r2
 80046e0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80046e2:	2301      	movs	r3, #1
 80046e4:	83fb      	strh	r3, [r7, #30]
 80046e6:	2300      	movs	r3, #0
 80046e8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	2300      	movs	r3, #0
 80046f0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80046f6:	e002      	b.n	80046fe <BSP_LCD_DisplayStringAt+0x32>
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	3301      	adds	r3, #1
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	617a      	str	r2, [r7, #20]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f6      	bne.n	80046f8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800470a:	f7ff fe9b 	bl	8004444 <BSP_LCD_GetXSize>
 800470e:	4b4a      	ldr	r3, [pc, #296]	; (8004838 <BSP_LCD_DisplayStringAt+0x16c>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	494a      	ldr	r1, [pc, #296]	; (800483c <BSP_LCD_DisplayStringAt+0x170>)
 8004714:	4613      	mov	r3, r2
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	3308      	adds	r3, #8
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	889b      	ldrh	r3, [r3, #4]
 8004724:	fbb0 f3f3 	udiv	r3, r0, r3
 8004728:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	2b02      	cmp	r3, #2
 800472e:	d01c      	beq.n	800476a <BSP_LCD_DisplayStringAt+0x9e>
 8004730:	2b03      	cmp	r3, #3
 8004732:	d017      	beq.n	8004764 <BSP_LCD_DisplayStringAt+0x98>
 8004734:	2b01      	cmp	r3, #1
 8004736:	d12e      	bne.n	8004796 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	1ad1      	subs	r1, r2, r3
 800473e:	4b3e      	ldr	r3, [pc, #248]	; (8004838 <BSP_LCD_DisplayStringAt+0x16c>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	483e      	ldr	r0, [pc, #248]	; (800483c <BSP_LCD_DisplayStringAt+0x170>)
 8004744:	4613      	mov	r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4403      	add	r3, r0
 800474e:	3308      	adds	r3, #8
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	889b      	ldrh	r3, [r3, #4]
 8004754:	fb03 f301 	mul.w	r3, r3, r1
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	89fb      	ldrh	r3, [r7, #14]
 800475e:	4413      	add	r3, r2
 8004760:	83fb      	strh	r3, [r7, #30]
      break;
 8004762:	e01b      	b.n	800479c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8004764:	89fb      	ldrh	r3, [r7, #14]
 8004766:	83fb      	strh	r3, [r7, #30]
      break;
 8004768:	e018      	b.n	800479c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	b299      	uxth	r1, r3
 8004772:	4b31      	ldr	r3, [pc, #196]	; (8004838 <BSP_LCD_DisplayStringAt+0x16c>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4831      	ldr	r0, [pc, #196]	; (800483c <BSP_LCD_DisplayStringAt+0x170>)
 8004778:	4613      	mov	r3, r2
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4403      	add	r3, r0
 8004782:	3308      	adds	r3, #8
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	889b      	ldrh	r3, [r3, #4]
 8004788:	fb11 f303 	smulbb	r3, r1, r3
 800478c:	b29a      	uxth	r2, r3
 800478e:	89fb      	ldrh	r3, [r7, #14]
 8004790:	4413      	add	r3, r2
 8004792:	83fb      	strh	r3, [r7, #30]
      break;
 8004794:	e002      	b.n	800479c <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8004796:	89fb      	ldrh	r3, [r7, #14]
 8004798:	83fb      	strh	r3, [r7, #30]
      break;
 800479a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800479c:	e01a      	b.n	80047d4 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	781a      	ldrb	r2, [r3, #0]
 80047a2:	89b9      	ldrh	r1, [r7, #12]
 80047a4:	8bfb      	ldrh	r3, [r7, #30]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff ff4c 	bl	8004644 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80047ac:	4b22      	ldr	r3, [pc, #136]	; (8004838 <BSP_LCD_DisplayStringAt+0x16c>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	4922      	ldr	r1, [pc, #136]	; (800483c <BSP_LCD_DisplayStringAt+0x170>)
 80047b2:	4613      	mov	r3, r2
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	3308      	adds	r3, #8
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	889a      	ldrh	r2, [r3, #4]
 80047c2:	8bfb      	ldrh	r3, [r7, #30]
 80047c4:	4413      	add	r3, r2
 80047c6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	3301      	adds	r3, #1
 80047cc:	60bb      	str	r3, [r7, #8]
    i++;
 80047ce:	8bbb      	ldrh	r3, [r7, #28]
 80047d0:	3301      	adds	r3, #1
 80047d2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2dc      	uxtb	r4, r3
 80047e2:	f7ff fe2f 	bl	8004444 <BSP_LCD_GetXSize>
 80047e6:	4605      	mov	r5, r0
 80047e8:	8bb9      	ldrh	r1, [r7, #28]
 80047ea:	4b13      	ldr	r3, [pc, #76]	; (8004838 <BSP_LCD_DisplayStringAt+0x16c>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4813      	ldr	r0, [pc, #76]	; (800483c <BSP_LCD_DisplayStringAt+0x170>)
 80047f0:	4613      	mov	r3, r2
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	4413      	add	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4403      	add	r3, r0
 80047fa:	3308      	adds	r3, #8
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	889b      	ldrh	r3, [r3, #4]
 8004800:	fb03 f301 	mul.w	r3, r3, r1
 8004804:	1aeb      	subs	r3, r5, r3
 8004806:	b299      	uxth	r1, r3
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <BSP_LCD_DisplayStringAt+0x16c>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	480b      	ldr	r0, [pc, #44]	; (800483c <BSP_LCD_DisplayStringAt+0x170>)
 800480e:	4613      	mov	r3, r2
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4403      	add	r3, r0
 8004818:	3308      	adds	r3, #8
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	889b      	ldrh	r3, [r3, #4]
 800481e:	4299      	cmp	r1, r3
 8004820:	bf2c      	ite	cs
 8004822:	2301      	movcs	r3, #1
 8004824:	2300      	movcc	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	4023      	ands	r3, r4
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1b6      	bne.n	800479e <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 8004830:	bf00      	nop
 8004832:	3720      	adds	r7, #32
 8004834:	46bd      	mov	sp, r7
 8004836:	bdb0      	pop	{r4, r5, r7, pc}
 8004838:	200001c8 	.word	0x200001c8
 800483c:	200001cc 	.word	0x200001cc

08004840 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004840:	b5b0      	push	{r4, r5, r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af02      	add	r7, sp, #8
 8004846:	4603      	mov	r3, r0
 8004848:	80fb      	strh	r3, [r7, #6]
 800484a:	460b      	mov	r3, r1
 800484c:	80bb      	strh	r3, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004856:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <BSP_LCD_DrawHLine+0x70>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a16      	ldr	r2, [pc, #88]	; (80048b4 <BSP_LCD_DrawHLine+0x74>)
 800485c:	2134      	movs	r1, #52	; 0x34
 800485e:	fb01 f303 	mul.w	r3, r1, r3
 8004862:	4413      	add	r3, r2
 8004864:	335c      	adds	r3, #92	; 0x5c
 8004866:	681c      	ldr	r4, [r3, #0]
 8004868:	f7ff fdec 	bl	8004444 <BSP_LCD_GetXSize>
 800486c:	4602      	mov	r2, r0
 800486e:	88bb      	ldrh	r3, [r7, #4]
 8004870:	fb03 f202 	mul.w	r2, r3, r2
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4423      	add	r3, r4
 800487c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800487e:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <BSP_LCD_DrawHLine+0x70>)
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	68fc      	ldr	r4, [r7, #12]
 8004884:	887d      	ldrh	r5, [r7, #2]
 8004886:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <BSP_LCD_DrawHLine+0x70>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	490b      	ldr	r1, [pc, #44]	; (80048b8 <BSP_LCD_DrawHLine+0x78>)
 800488c:	4613      	mov	r3, r2
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	2300      	movs	r3, #0
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	2301      	movs	r3, #1
 80048a0:	462a      	mov	r2, r5
 80048a2:	4621      	mov	r1, r4
 80048a4:	f000 fb36 	bl	8004f14 <FillBuffer>
}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bdb0      	pop	{r4, r5, r7, pc}
 80048b0:	200001c8 	.word	0x200001c8
 80048b4:	200015b0 	.word	0x200015b0
 80048b8:	200001cc 	.word	0x200001cc

080048bc <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80048bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048be:	b087      	sub	sp, #28
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	4603      	mov	r3, r0
 80048c4:	80fb      	strh	r3, [r7, #6]
 80048c6:	460b      	mov	r3, r1
 80048c8:	80bb      	strh	r3, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80048d2:	4b18      	ldr	r3, [pc, #96]	; (8004934 <BSP_LCD_DrawVLine+0x78>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a18      	ldr	r2, [pc, #96]	; (8004938 <BSP_LCD_DrawVLine+0x7c>)
 80048d8:	2134      	movs	r1, #52	; 0x34
 80048da:	fb01 f303 	mul.w	r3, r1, r3
 80048de:	4413      	add	r3, r2
 80048e0:	335c      	adds	r3, #92	; 0x5c
 80048e2:	681c      	ldr	r4, [r3, #0]
 80048e4:	f7ff fdae 	bl	8004444 <BSP_LCD_GetXSize>
 80048e8:	4602      	mov	r2, r0
 80048ea:	88bb      	ldrh	r3, [r7, #4]
 80048ec:	fb03 f202 	mul.w	r2, r3, r2
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4423      	add	r3, r4
 80048f8:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80048fa:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <BSP_LCD_DrawVLine+0x78>)
 80048fc:	681c      	ldr	r4, [r3, #0]
 80048fe:	68fd      	ldr	r5, [r7, #12]
 8004900:	887e      	ldrh	r6, [r7, #2]
 8004902:	f7ff fd9f 	bl	8004444 <BSP_LCD_GetXSize>
 8004906:	4603      	mov	r3, r0
 8004908:	1e59      	subs	r1, r3, #1
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <BSP_LCD_DrawVLine+0x78>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	480b      	ldr	r0, [pc, #44]	; (800493c <BSP_LCD_DrawVLine+0x80>)
 8004910:	4613      	mov	r3, r2
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4403      	add	r3, r0
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	9100      	str	r1, [sp, #0]
 8004920:	4633      	mov	r3, r6
 8004922:	2201      	movs	r2, #1
 8004924:	4629      	mov	r1, r5
 8004926:	4620      	mov	r0, r4
 8004928:	f000 faf4 	bl	8004f14 <FillBuffer>
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004934:	200001c8 	.word	0x200001c8
 8004938:	200015b0 	.word	0x200015b0
 800493c:	200001cc 	.word	0x200001cc

08004940 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8004940:	b590      	push	{r4, r7, lr}
 8004942:	b08b      	sub	sp, #44	; 0x2c
 8004944:	af00      	add	r7, sp, #0
 8004946:	4604      	mov	r4, r0
 8004948:	4608      	mov	r0, r1
 800494a:	4611      	mov	r1, r2
 800494c:	461a      	mov	r2, r3
 800494e:	4623      	mov	r3, r4
 8004950:	80fb      	strh	r3, [r7, #6]
 8004952:	4603      	mov	r3, r0
 8004954:	80bb      	strh	r3, [r7, #4]
 8004956:	460b      	mov	r3, r1
 8004958:	807b      	strh	r3, [r7, #2]
 800495a:	4613      	mov	r3, r2
 800495c:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 800495e:	2300      	movs	r3, #0
 8004960:	823b      	strh	r3, [r7, #16]
 8004962:	2300      	movs	r3, #0
 8004964:	81fb      	strh	r3, [r7, #14]
 8004966:	2300      	movs	r3, #0
 8004968:	84fb      	strh	r3, [r7, #38]	; 0x26
 800496a:	2300      	movs	r3, #0
 800496c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800496e:	2300      	movs	r3, #0
 8004970:	847b      	strh	r3, [r7, #34]	; 0x22
 8004972:	2300      	movs	r3, #0
 8004974:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8004976:	2300      	movs	r3, #0
 8004978:	83fb      	strh	r3, [r7, #30]
 800497a:	2300      	movs	r3, #0
 800497c:	83bb      	strh	r3, [r7, #28]
 800497e:	2300      	movs	r3, #0
 8004980:	837b      	strh	r3, [r7, #26]
 8004982:	2300      	movs	r3, #0
 8004984:	833b      	strh	r3, [r7, #24]
 8004986:	2300      	movs	r3, #0
 8004988:	82fb      	strh	r3, [r7, #22]
 800498a:	2300      	movs	r3, #0
 800498c:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 800498e:	2300      	movs	r3, #0
 8004990:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8004992:	887a      	ldrh	r2, [r7, #2]
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	bfb8      	it	lt
 800499c:	425b      	neglt	r3, r3
 800499e:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80049a0:	883a      	ldrh	r2, [r7, #0]
 80049a2:	88bb      	ldrh	r3, [r7, #4]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	bfb8      	it	lt
 80049aa:	425b      	neglt	r3, r3
 80049ac:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 80049ae:	88fb      	ldrh	r3, [r7, #6]
 80049b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 80049b2:	88bb      	ldrh	r3, [r7, #4]
 80049b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	88fb      	ldrh	r3, [r7, #6]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d304      	bcc.n	80049c8 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80049be:	2301      	movs	r3, #1
 80049c0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80049c2:	2301      	movs	r3, #1
 80049c4:	843b      	strh	r3, [r7, #32]
 80049c6:	e005      	b.n	80049d4 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80049c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049cc:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80049ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049d2:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 80049d4:	883a      	ldrh	r2, [r7, #0]
 80049d6:	88bb      	ldrh	r3, [r7, #4]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d304      	bcc.n	80049e6 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80049dc:	2301      	movs	r3, #1
 80049de:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80049e0:	2301      	movs	r3, #1
 80049e2:	83bb      	strh	r3, [r7, #28]
 80049e4:	e005      	b.n	80049f2 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80049e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049ea:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80049ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049f0:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80049f2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80049f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	db10      	blt.n	8004a20 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80049fe:	2300      	movs	r3, #0
 8004a00:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8004a02:	2300      	movs	r3, #0
 8004a04:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8004a06:	8a3b      	ldrh	r3, [r7, #16]
 8004a08:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8004a0a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a0e:	0fda      	lsrs	r2, r3, #31
 8004a10:	4413      	add	r3, r2
 8004a12:	105b      	asrs	r3, r3, #1
 8004a14:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8004a16:	89fb      	ldrh	r3, [r7, #14]
 8004a18:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8004a1a:	8a3b      	ldrh	r3, [r7, #16]
 8004a1c:	82bb      	strh	r3, [r7, #20]
 8004a1e:	e00f      	b.n	8004a40 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8004a20:	2300      	movs	r3, #0
 8004a22:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8004a24:	2300      	movs	r3, #0
 8004a26:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8004a28:	89fb      	ldrh	r3, [r7, #14]
 8004a2a:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8004a2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a30:	0fda      	lsrs	r2, r3, #31
 8004a32:	4413      	add	r3, r2
 8004a34:	105b      	asrs	r3, r3, #1
 8004a36:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8004a38:	8a3b      	ldrh	r3, [r7, #16]
 8004a3a:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8004a3c:	89fb      	ldrh	r3, [r7, #14]
 8004a3e:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8004a40:	2300      	movs	r3, #0
 8004a42:	827b      	strh	r3, [r7, #18]
 8004a44:	e038      	b.n	8004ab8 <BSP_LCD_DrawLine+0x178>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8004a46:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004a48:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8004a4a:	4b20      	ldr	r3, [pc, #128]	; (8004acc <BSP_LCD_DrawLine+0x18c>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4920      	ldr	r1, [pc, #128]	; (8004ad0 <BSP_LCD_DrawLine+0x190>)
 8004a50:	4613      	mov	r3, r2
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4621      	mov	r1, r4
 8004a60:	f000 f978 	bl	8004d54 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8004a64:	8b3a      	ldrh	r2, [r7, #24]
 8004a66:	8afb      	ldrh	r3, [r7, #22]
 8004a68:	4413      	add	r3, r2
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8004a6e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004a72:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	db0e      	blt.n	8004a98 <BSP_LCD_DrawLine+0x158>
    {
      num -= den;                             /* Calculate the new numerator value */
 8004a7a:	8b3a      	ldrh	r2, [r7, #24]
 8004a7c:	8b7b      	ldrh	r3, [r7, #26]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8004a84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004a86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a88:	4413      	add	r3, r2
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8004a8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a90:	8bfb      	ldrh	r3, [r7, #30]
 8004a92:	4413      	add	r3, r2
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8004a98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004a9a:	8c3b      	ldrh	r3, [r7, #32]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8004aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004aa4:	8bbb      	ldrh	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8004aac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	827b      	strh	r3, [r7, #18]
 8004ab8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004abc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	ddc0      	ble.n	8004a46 <BSP_LCD_DrawLine+0x106>
  }
}
 8004ac4:	bf00      	nop
 8004ac6:	372c      	adds	r7, #44	; 0x2c
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd90      	pop	{r4, r7, pc}
 8004acc:	200001c8 	.word	0x200001c8
 8004ad0:	200001cc 	.word	0x200001cc

08004ad4 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad8:	b086      	sub	sp, #24
 8004ada:	af02      	add	r7, sp, #8
 8004adc:	4604      	mov	r4, r0
 8004ade:	4608      	mov	r0, r1
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	4623      	mov	r3, r4
 8004ae6:	80fb      	strh	r3, [r7, #6]
 8004ae8:	4603      	mov	r3, r0
 8004aea:	80bb      	strh	r3, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	807b      	strh	r3, [r7, #2]
 8004af0:	4613      	mov	r3, r2
 8004af2:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004af8:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <BSP_LCD_FillRect+0xa8>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	4920      	ldr	r1, [pc, #128]	; (8004b80 <BSP_LCD_FillRect+0xac>)
 8004afe:	4613      	mov	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff fd26 	bl	800455c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004b10:	4b1a      	ldr	r3, [pc, #104]	; (8004b7c <BSP_LCD_FillRect+0xa8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1b      	ldr	r2, [pc, #108]	; (8004b84 <BSP_LCD_FillRect+0xb0>)
 8004b16:	2134      	movs	r1, #52	; 0x34
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	335c      	adds	r3, #92	; 0x5c
 8004b20:	681c      	ldr	r4, [r3, #0]
 8004b22:	f7ff fc8f 	bl	8004444 <BSP_LCD_GetXSize>
 8004b26:	4602      	mov	r2, r0
 8004b28:	88bb      	ldrh	r3, [r7, #4]
 8004b2a:	fb03 f202 	mul.w	r2, r3, r2
 8004b2e:	88fb      	ldrh	r3, [r7, #6]
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4423      	add	r3, r4
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004b38:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <BSP_LCD_FillRect+0xa8>)
 8004b3a:	681c      	ldr	r4, [r3, #0]
 8004b3c:	68fd      	ldr	r5, [r7, #12]
 8004b3e:	887e      	ldrh	r6, [r7, #2]
 8004b40:	f8b7 8000 	ldrh.w	r8, [r7]
 8004b44:	f7ff fc7e 	bl	8004444 <BSP_LCD_GetXSize>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	887b      	ldrh	r3, [r7, #2]
 8004b4c:	1ad1      	subs	r1, r2, r3
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <BSP_LCD_FillRect+0xa8>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	480b      	ldr	r0, [pc, #44]	; (8004b80 <BSP_LCD_FillRect+0xac>)
 8004b54:	4613      	mov	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4403      	add	r3, r0
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	9100      	str	r1, [sp, #0]
 8004b64:	4643      	mov	r3, r8
 8004b66:	4632      	mov	r2, r6
 8004b68:	4629      	mov	r1, r5
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f000 f9d2 	bl	8004f14 <FillBuffer>
}
 8004b70:	bf00      	nop
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b7a:	bf00      	nop
 8004b7c:	200001c8 	.word	0x200001c8
 8004b80:	200001cc 	.word	0x200001cc
 8004b84:	200015b0 	.word	0x200015b0

08004b88 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8004b8c:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <BSP_LCD_DisplayOn+0x1c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8004b96:	4b03      	ldr	r3, [pc, #12]	; (8004ba4 <BSP_LCD_DisplayOn+0x1c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	4798      	blx	r3
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20001658 	.word	0x20001658

08004ba8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08e      	sub	sp, #56	; 0x38
 8004bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004bae:	2300      	movs	r3, #0
 8004bb0:	623b      	str	r3, [r7, #32]
 8004bb2:	4b61      	ldr	r3, [pc, #388]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	4a60      	ldr	r2, [pc, #384]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004bb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bbe:	4b5e      	ldr	r3, [pc, #376]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bc6:	623b      	str	r3, [r7, #32]
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	4b5a      	ldr	r3, [pc, #360]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	4a59      	ldr	r2, [pc, #356]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004bd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bda:	4b57      	ldr	r3, [pc, #348]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004be2:	61fb      	str	r3, [r7, #28]
 8004be4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	4b53      	ldr	r3, [pc, #332]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4a52      	ldr	r2, [pc, #328]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf6:	4b50      	ldr	r3, [pc, #320]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	61bb      	str	r3, [r7, #24]
 8004c00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	4b4c      	ldr	r3, [pc, #304]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	4a4b      	ldr	r2, [pc, #300]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004c0c:	f043 0302 	orr.w	r3, r3, #2
 8004c10:	6313      	str	r3, [r2, #48]	; 0x30
 8004c12:	4b49      	ldr	r3, [pc, #292]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c1e:	2300      	movs	r3, #0
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	4b45      	ldr	r3, [pc, #276]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	4a44      	ldr	r2, [pc, #272]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004c28:	f043 0304 	orr.w	r3, r3, #4
 8004c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c2e:	4b42      	ldr	r3, [pc, #264]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	4b3e      	ldr	r3, [pc, #248]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	4a3d      	ldr	r2, [pc, #244]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004c44:	f043 0308 	orr.w	r3, r3, #8
 8004c48:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4a:	4b3b      	ldr	r3, [pc, #236]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c56:	2300      	movs	r3, #0
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	4b37      	ldr	r3, [pc, #220]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	4a36      	ldr	r2, [pc, #216]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004c60:	f043 0320 	orr.w	r3, r3, #32
 8004c64:	6313      	str	r3, [r2, #48]	; 0x30
 8004c66:	4b34      	ldr	r3, [pc, #208]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c72:	2300      	movs	r3, #0
 8004c74:	607b      	str	r3, [r7, #4]
 8004c76:	4b30      	ldr	r3, [pc, #192]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	4a2f      	ldr	r2, [pc, #188]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c80:	6313      	str	r3, [r2, #48]	; 0x30
 8004c82:	4b2d      	ldr	r3, [pc, #180]	; (8004d38 <BSP_LCD_MspInit+0x190>)
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8a:	607b      	str	r3, [r7, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8004c8e:	f641 0358 	movw	r3, #6232	; 0x1858
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004c94:	2302      	movs	r3, #2
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8004ca0:	230e      	movs	r3, #14
 8004ca2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4824      	ldr	r0, [pc, #144]	; (8004d3c <BSP_LCD_MspInit+0x194>)
 8004cac:	f001 ff6a 	bl	8006b84 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8004cb0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4820      	ldr	r0, [pc, #128]	; (8004d40 <BSP_LCD_MspInit+0x198>)
 8004cbe:	f001 ff61 	bl	8006b84 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8004cc2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ccc:	4619      	mov	r1, r3
 8004cce:	481d      	ldr	r0, [pc, #116]	; (8004d44 <BSP_LCD_MspInit+0x19c>)
 8004cd0:	f001 ff58 	bl	8006b84 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004cd4:	2348      	movs	r3, #72	; 0x48
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cdc:	4619      	mov	r1, r3
 8004cde:	481a      	ldr	r0, [pc, #104]	; (8004d48 <BSP_LCD_MspInit+0x1a0>)
 8004ce0:	f001 ff50 	bl	8006b84 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8004cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4816      	ldr	r0, [pc, #88]	; (8004d4c <BSP_LCD_MspInit+0x1a4>)
 8004cf2:	f001 ff47 	bl	8006b84 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8004cf6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d00:	4619      	mov	r1, r3
 8004d02:	4813      	ldr	r0, [pc, #76]	; (8004d50 <BSP_LCD_MspInit+0x1a8>)
 8004d04:	f001 ff3e 	bl	8006b84 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8004d0c:	2309      	movs	r3, #9
 8004d0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d14:	4619      	mov	r1, r3
 8004d16:	480a      	ldr	r0, [pc, #40]	; (8004d40 <BSP_LCD_MspInit+0x198>)
 8004d18:	f001 ff34 	bl	8006b84 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004d1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d26:	4619      	mov	r1, r3
 8004d28:	4809      	ldr	r0, [pc, #36]	; (8004d50 <BSP_LCD_MspInit+0x1a8>)
 8004d2a:	f001 ff2b 	bl	8006b84 <HAL_GPIO_Init>
}
 8004d2e:	bf00      	nop
 8004d30:	3738      	adds	r7, #56	; 0x38
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	40020000 	.word	0x40020000
 8004d40:	40020400 	.word	0x40020400
 8004d44:	40020800 	.word	0x40020800
 8004d48:	40020c00 	.word	0x40020c00
 8004d4c:	40021400 	.word	0x40021400
 8004d50:	40021800 	.word	0x40021800

08004d54 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004d54:	b5b0      	push	{r4, r5, r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	603a      	str	r2, [r7, #0]
 8004d5e:	80fb      	strh	r3, [r7, #6]
 8004d60:	460b      	mov	r3, r1
 8004d62:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004d64:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <BSP_LCD_DrawPixel+0x44>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a0c      	ldr	r2, [pc, #48]	; (8004d9c <BSP_LCD_DrawPixel+0x48>)
 8004d6a:	2134      	movs	r1, #52	; 0x34
 8004d6c:	fb01 f303 	mul.w	r3, r1, r3
 8004d70:	4413      	add	r3, r2
 8004d72:	335c      	adds	r3, #92	; 0x5c
 8004d74:	681c      	ldr	r4, [r3, #0]
 8004d76:	88bd      	ldrh	r5, [r7, #4]
 8004d78:	f7ff fb64 	bl	8004444 <BSP_LCD_GetXSize>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	fb03 f205 	mul.w	r2, r3, r5
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4423      	add	r3, r4
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	6013      	str	r3, [r2, #0]
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bdb0      	pop	{r4, r5, r7, pc}
 8004d98:	200001c8 	.word	0x200001c8
 8004d9c:	200015b0 	.word	0x200015b0

08004da0 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	603a      	str	r2, [r7, #0]
 8004daa:	80fb      	strh	r3, [r7, #6]
 8004dac:	460b      	mov	r3, r1
 8004dae:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	2300      	movs	r3, #0
 8004db6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004dbc:	4b53      	ldr	r3, [pc, #332]	; (8004f0c <DrawChar+0x16c>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4953      	ldr	r1, [pc, #332]	; (8004f10 <DrawChar+0x170>)
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	440b      	add	r3, r1
 8004dcc:	3308      	adds	r3, #8
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	88db      	ldrh	r3, [r3, #6]
 8004dd2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004dd4:	4b4d      	ldr	r3, [pc, #308]	; (8004f0c <DrawChar+0x16c>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	494d      	ldr	r1, [pc, #308]	; (8004f10 <DrawChar+0x170>)
 8004dda:	4613      	mov	r3, r2
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	4413      	add	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	440b      	add	r3, r1
 8004de4:	3308      	adds	r3, #8
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	889b      	ldrh	r3, [r3, #4]
 8004dea:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8004dec:	8a3b      	ldrh	r3, [r7, #16]
 8004dee:	3307      	adds	r3, #7
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	da00      	bge.n	8004df6 <DrawChar+0x56>
 8004df4:	3307      	adds	r3, #7
 8004df6:	10db      	asrs	r3, r3, #3
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	8a3b      	ldrh	r3, [r7, #16]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8004e06:	2300      	movs	r3, #0
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	e076      	b.n	8004efa <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004e0c:	8a3b      	ldrh	r3, [r7, #16]
 8004e0e:	3307      	adds	r3, #7
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	da00      	bge.n	8004e16 <DrawChar+0x76>
 8004e14:	3307      	adds	r3, #7
 8004e16:	10db      	asrs	r3, r3, #3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	fb03 f302 	mul.w	r3, r3, r2
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	4413      	add	r3, r2
 8004e24:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8004e26:	8a3b      	ldrh	r3, [r7, #16]
 8004e28:	3307      	adds	r3, #7
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	da00      	bge.n	8004e30 <DrawChar+0x90>
 8004e2e:	3307      	adds	r3, #7
 8004e30:	10db      	asrs	r3, r3, #3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d002      	beq.n	8004e3c <DrawChar+0x9c>
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d004      	beq.n	8004e44 <DrawChar+0xa4>
 8004e3a:	e00c      	b.n	8004e56 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	617b      	str	r3, [r7, #20]
      break;
 8004e42:	e016      	b.n	8004e72 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	3201      	adds	r2, #1
 8004e4e:	7812      	ldrb	r2, [r2, #0]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
      break;
 8004e54:	e00d      	b.n	8004e72 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	041a      	lsls	r2, r3, #16
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	021b      	lsls	r3, r3, #8
 8004e64:	4313      	orrs	r3, r2
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	3202      	adds	r2, #2
 8004e6a:	7812      	ldrb	r2, [r2, #0]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
      break;
 8004e70:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004e72:	2300      	movs	r3, #0
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	e036      	b.n	8004ee6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004e78:	8a3a      	ldrh	r2, [r7, #16]
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	1ad2      	subs	r2, r2, r3
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	4413      	add	r3, r2
 8004e82:	3b01      	subs	r3, #1
 8004e84:	2201      	movs	r2, #1
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d012      	beq.n	8004eba <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	b298      	uxth	r0, r3
 8004e9e:	4b1b      	ldr	r3, [pc, #108]	; (8004f0c <DrawChar+0x16c>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	491b      	ldr	r1, [pc, #108]	; (8004f10 <DrawChar+0x170>)
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	88bb      	ldrh	r3, [r7, #4]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	f7ff ff4e 	bl	8004d54 <BSP_LCD_DrawPixel>
 8004eb8:	e012      	b.n	8004ee0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	b298      	uxth	r0, r3
 8004ec4:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <DrawChar+0x16c>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4911      	ldr	r1, [pc, #68]	; (8004f10 <DrawChar+0x170>)
 8004eca:	4613      	mov	r3, r2
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	88bb      	ldrh	r3, [r7, #4]
 8004eda:	4619      	mov	r1, r3
 8004edc:	f7ff ff3a 	bl	8004d54 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	8a3b      	ldrh	r3, [r7, #16]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d3c4      	bcc.n	8004e78 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8004eee:	88bb      	ldrh	r3, [r7, #4]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	8a7b      	ldrh	r3, [r7, #18]
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d384      	bcc.n	8004e0c <DrawChar+0x6c>
  }
}
 8004f02:	bf00      	nop
 8004f04:	3720      	adds	r7, #32
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	200001c8 	.word	0x200001c8
 8004f10:	200001cc 	.word	0x200001cc

08004f14 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004f22:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <FillBuffer+0x68>)
 8004f24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004f28:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004f2a:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <FillBuffer+0x68>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004f30:	4a12      	ldr	r2, [pc, #72]	; (8004f7c <FillBuffer+0x68>)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8004f36:	4b11      	ldr	r3, [pc, #68]	; (8004f7c <FillBuffer+0x68>)
 8004f38:	4a11      	ldr	r2, [pc, #68]	; (8004f80 <FillBuffer+0x6c>)
 8004f3a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004f3c:	480f      	ldr	r0, [pc, #60]	; (8004f7c <FillBuffer+0x68>)
 8004f3e:	f001 fb95 	bl	800666c <HAL_DMA2D_Init>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d115      	bne.n	8004f74 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004f48:	68f9      	ldr	r1, [r7, #12]
 8004f4a:	480c      	ldr	r0, [pc, #48]	; (8004f7c <FillBuffer+0x68>)
 8004f4c:	f001 fcec 	bl	8006928 <HAL_DMA2D_ConfigLayer>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10e      	bne.n	8004f74 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69f9      	ldr	r1, [r7, #28]
 8004f60:	4806      	ldr	r0, [pc, #24]	; (8004f7c <FillBuffer+0x68>)
 8004f62:	f001 fbcc 	bl	80066fe <HAL_DMA2D_Start>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004f6c:	210a      	movs	r1, #10
 8004f6e:	4803      	ldr	r0, [pc, #12]	; (8004f7c <FillBuffer+0x68>)
 8004f70:	f001 fbf0 	bl	8006754 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004f74:	bf00      	nop
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000158 	.word	0x20000158
 8004f80:	4002b000 	.word	0x4002b000

08004f84 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004f88:	4b29      	ldr	r3, [pc, #164]	; (8005030 <BSP_SDRAM_Init+0xac>)
 8004f8a:	4a2a      	ldr	r2, [pc, #168]	; (8005034 <BSP_SDRAM_Init+0xb0>)
 8004f8c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004f8e:	4b2a      	ldr	r3, [pc, #168]	; (8005038 <BSP_SDRAM_Init+0xb4>)
 8004f90:	2202      	movs	r2, #2
 8004f92:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004f94:	4b28      	ldr	r3, [pc, #160]	; (8005038 <BSP_SDRAM_Init+0xb4>)
 8004f96:	2207      	movs	r2, #7
 8004f98:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004f9a:	4b27      	ldr	r3, [pc, #156]	; (8005038 <BSP_SDRAM_Init+0xb4>)
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004fa0:	4b25      	ldr	r3, [pc, #148]	; (8005038 <BSP_SDRAM_Init+0xb4>)
 8004fa2:	2207      	movs	r2, #7
 8004fa4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004fa6:	4b24      	ldr	r3, [pc, #144]	; (8005038 <BSP_SDRAM_Init+0xb4>)
 8004fa8:	2202      	movs	r2, #2
 8004faa:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004fac:	4b22      	ldr	r3, [pc, #136]	; (8005038 <BSP_SDRAM_Init+0xb4>)
 8004fae:	2202      	movs	r2, #2
 8004fb0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004fb2:	4b21      	ldr	r3, [pc, #132]	; (8005038 <BSP_SDRAM_Init+0xb4>)
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <BSP_SDRAM_Init+0xac>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004fbe:	4b1c      	ldr	r3, [pc, #112]	; (8005030 <BSP_SDRAM_Init+0xac>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <BSP_SDRAM_Init+0xac>)
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004fca:	4b19      	ldr	r3, [pc, #100]	; (8005030 <BSP_SDRAM_Init+0xac>)
 8004fcc:	2210      	movs	r2, #16
 8004fce:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004fd0:	4b17      	ldr	r3, [pc, #92]	; (8005030 <BSP_SDRAM_Init+0xac>)
 8004fd2:	2240      	movs	r2, #64	; 0x40
 8004fd4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004fd6:	4b16      	ldr	r3, [pc, #88]	; (8005030 <BSP_SDRAM_Init+0xac>)
 8004fd8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004fdc:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004fde:	4b14      	ldr	r3, [pc, #80]	; (8005030 <BSP_SDRAM_Init+0xac>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004fe4:	4b12      	ldr	r3, [pc, #72]	; (8005030 <BSP_SDRAM_Init+0xac>)
 8004fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fea:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004fec:	4b10      	ldr	r3, [pc, #64]	; (8005030 <BSP_SDRAM_Init+0xac>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8004ff2:	4b0f      	ldr	r3, [pc, #60]	; (8005030 <BSP_SDRAM_Init+0xac>)
 8004ff4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ff8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	480c      	ldr	r0, [pc, #48]	; (8005030 <BSP_SDRAM_Init+0xac>)
 8004ffe:	f000 f87f 	bl	8005100 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8005002:	490d      	ldr	r1, [pc, #52]	; (8005038 <BSP_SDRAM_Init+0xb4>)
 8005004:	480a      	ldr	r0, [pc, #40]	; (8005030 <BSP_SDRAM_Init+0xac>)
 8005006:	f003 fb97 	bl	8008738 <HAL_SDRAM_Init>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8005010:	4b0a      	ldr	r3, [pc, #40]	; (800503c <BSP_SDRAM_Init+0xb8>)
 8005012:	2201      	movs	r2, #1
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	e002      	b.n	800501e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005018:	4b08      	ldr	r3, [pc, #32]	; (800503c <BSP_SDRAM_Init+0xb8>)
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800501e:	f240 506a 	movw	r0, #1386	; 0x56a
 8005022:	f000 f80d 	bl	8005040 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8005026:	4b05      	ldr	r3, [pc, #20]	; (800503c <BSP_SDRAM_Init+0xb8>)
 8005028:	781b      	ldrb	r3, [r3, #0]
}
 800502a:	4618      	mov	r0, r3
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	200001e4 	.word	0x200001e4
 8005034:	a0000140 	.word	0xa0000140
 8005038:	20000218 	.word	0x20000218
 800503c:	2000005c 	.word	0x2000005c

08005040 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800504c:	4b2a      	ldr	r3, [pc, #168]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800504e:	2201      	movs	r2, #1
 8005050:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8005052:	4b29      	ldr	r3, [pc, #164]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005054:	2208      	movs	r2, #8
 8005056:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8005058:	4b27      	ldr	r3, [pc, #156]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800505a:	2201      	movs	r2, #1
 800505c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800505e:	4b26      	ldr	r3, [pc, #152]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005060:	2200      	movs	r2, #0
 8005062:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8005064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005068:	4923      	ldr	r1, [pc, #140]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800506a:	4824      	ldr	r0, [pc, #144]	; (80050fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800506c:	f003 fb98 	bl	80087a0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005070:	2001      	movs	r0, #1
 8005072:	f000 f9c3 	bl	80053fc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8005076:	4b20      	ldr	r3, [pc, #128]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005078:	2202      	movs	r2, #2
 800507a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800507c:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800507e:	2208      	movs	r2, #8
 8005080:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8005082:	4b1d      	ldr	r3, [pc, #116]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005084:	2201      	movs	r2, #1
 8005086:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8005088:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800508a:	2200      	movs	r2, #0
 800508c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800508e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005092:	4919      	ldr	r1, [pc, #100]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005094:	4819      	ldr	r0, [pc, #100]	; (80050fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005096:	f003 fb83 	bl	80087a0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800509a:	4b17      	ldr	r3, [pc, #92]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800509c:	2203      	movs	r2, #3
 800509e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80050a0:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050a2:	2208      	movs	r2, #8
 80050a4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80050a6:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050a8:	2204      	movs	r2, #4
 80050aa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80050ac:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80050b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050b6:	4910      	ldr	r1, [pc, #64]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050b8:	4810      	ldr	r0, [pc, #64]	; (80050fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80050ba:	f003 fb71 	bl	80087a0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80050be:	f44f 730c 	mov.w	r3, #560	; 0x230
 80050c2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80050c4:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050c6:	2204      	movs	r2, #4
 80050c8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80050ca:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050cc:	2208      	movs	r2, #8
 80050ce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80050d0:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4a07      	ldr	r2, [pc, #28]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050da:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80050dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050e0:	4905      	ldr	r1, [pc, #20]	; (80050f8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050e2:	4806      	ldr	r0, [pc, #24]	; (80050fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80050e4:	f003 fb5c 	bl	80087a0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	4804      	ldr	r0, [pc, #16]	; (80050fc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80050ec:	f003 fb83 	bl	80087f6 <HAL_SDRAM_ProgramRefreshRate>
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	20000234 	.word	0x20000234
 80050fc:	200001e4 	.word	0x200001e4

08005100 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b090      	sub	sp, #64	; 0x40
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 80ec 	beq.w	80052ea <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	62bb      	str	r3, [r7, #40]	; 0x28
 8005116:	4b77      	ldr	r3, [pc, #476]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	4a76      	ldr	r2, [pc, #472]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	6393      	str	r3, [r2, #56]	; 0x38
 8005122:	4b74      	ldr	r3, [pc, #464]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	62bb      	str	r3, [r7, #40]	; 0x28
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800512e:	2300      	movs	r3, #0
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
 8005132:	4b70      	ldr	r3, [pc, #448]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	4a6f      	ldr	r2, [pc, #444]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005138:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800513c:	6313      	str	r3, [r2, #48]	; 0x30
 800513e:	4b6d      	ldr	r3, [pc, #436]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800514a:	2300      	movs	r3, #0
 800514c:	623b      	str	r3, [r7, #32]
 800514e:	4b69      	ldr	r3, [pc, #420]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	4a68      	ldr	r2, [pc, #416]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005154:	f043 0302 	orr.w	r3, r3, #2
 8005158:	6313      	str	r3, [r2, #48]	; 0x30
 800515a:	4b66      	ldr	r3, [pc, #408]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	623b      	str	r3, [r7, #32]
 8005164:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	4b62      	ldr	r3, [pc, #392]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	4a61      	ldr	r2, [pc, #388]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005170:	f043 0304 	orr.w	r3, r3, #4
 8005174:	6313      	str	r3, [r2, #48]	; 0x30
 8005176:	4b5f      	ldr	r3, [pc, #380]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	61fb      	str	r3, [r7, #28]
 8005180:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005182:	2300      	movs	r3, #0
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	4b5b      	ldr	r3, [pc, #364]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	4a5a      	ldr	r2, [pc, #360]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 800518c:	f043 0308 	orr.w	r3, r3, #8
 8005190:	6313      	str	r3, [r2, #48]	; 0x30
 8005192:	4b58      	ldr	r3, [pc, #352]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	4b54      	ldr	r3, [pc, #336]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	4a53      	ldr	r2, [pc, #332]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 80051a8:	f043 0310 	orr.w	r3, r3, #16
 80051ac:	6313      	str	r3, [r2, #48]	; 0x30
 80051ae:	4b51      	ldr	r3, [pc, #324]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	f003 0310 	and.w	r3, r3, #16
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	4b4d      	ldr	r3, [pc, #308]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	4a4c      	ldr	r2, [pc, #304]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 80051c4:	f043 0320 	orr.w	r3, r3, #32
 80051c8:	6313      	str	r3, [r2, #48]	; 0x30
 80051ca:	4b4a      	ldr	r3, [pc, #296]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	4b46      	ldr	r3, [pc, #280]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 80051dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051de:	4a45      	ldr	r2, [pc, #276]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 80051e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e4:	6313      	str	r3, [r2, #48]	; 0x30
 80051e6:	4b43      	ldr	r3, [pc, #268]	; (80052f4 <BSP_SDRAM_MspInit+0x1f4>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80051f2:	2302      	movs	r3, #2
 80051f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80051f6:	2302      	movs	r3, #2
 80051f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80051fe:	230c      	movs	r3, #12
 8005200:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8005202:	2360      	movs	r3, #96	; 0x60
 8005204:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8005206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800520a:	4619      	mov	r1, r3
 800520c:	483a      	ldr	r0, [pc, #232]	; (80052f8 <BSP_SDRAM_MspInit+0x1f8>)
 800520e:	f001 fcb9 	bl	8006b84 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8005212:	2301      	movs	r3, #1
 8005214:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8005216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800521a:	4619      	mov	r1, r3
 800521c:	4837      	ldr	r0, [pc, #220]	; (80052fc <BSP_SDRAM_MspInit+0x1fc>)
 800521e:	f001 fcb1 	bl	8006b84 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8005222:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005226:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8005228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800522c:	4619      	mov	r1, r3
 800522e:	4834      	ldr	r0, [pc, #208]	; (8005300 <BSP_SDRAM_MspInit+0x200>)
 8005230:	f001 fca8 	bl	8006b84 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8005234:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800523a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800523e:	4619      	mov	r1, r3
 8005240:	4830      	ldr	r0, [pc, #192]	; (8005304 <BSP_SDRAM_MspInit+0x204>)
 8005242:	f001 fc9f 	bl	8006b84 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8005246:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800524a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800524c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005250:	4619      	mov	r1, r3
 8005252:	482d      	ldr	r0, [pc, #180]	; (8005308 <BSP_SDRAM_MspInit+0x208>)
 8005254:	f001 fc96 	bl	8006b84 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8005258:	f248 1333 	movw	r3, #33075	; 0x8133
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800525e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005262:	4619      	mov	r1, r3
 8005264:	4829      	ldr	r0, [pc, #164]	; (800530c <BSP_SDRAM_MspInit+0x20c>)
 8005266:	f001 fc8d 	bl	8006b84 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800526a:	4b29      	ldr	r3, [pc, #164]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 800526c:	2200      	movs	r2, #0
 800526e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005270:	4b27      	ldr	r3, [pc, #156]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 8005272:	2280      	movs	r2, #128	; 0x80
 8005274:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005276:	4b26      	ldr	r3, [pc, #152]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 8005278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800527c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800527e:	4b24      	ldr	r3, [pc, #144]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 8005280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005284:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005286:	4b22      	ldr	r3, [pc, #136]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 8005288:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800528c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800528e:	4b20      	ldr	r3, [pc, #128]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 8005290:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005294:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8005296:	4b1e      	ldr	r3, [pc, #120]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 8005298:	2200      	movs	r2, #0
 800529a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800529c:	4b1c      	ldr	r3, [pc, #112]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 800529e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052a2:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80052a4:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80052aa:	4b19      	ldr	r3, [pc, #100]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 80052ac:	2203      	movs	r2, #3
 80052ae:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80052b0:	4b17      	ldr	r3, [pc, #92]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80052b6:	4b16      	ldr	r3, [pc, #88]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80052bc:	4b14      	ldr	r3, [pc, #80]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 80052be:	4a15      	ldr	r2, [pc, #84]	; (8005314 <BSP_SDRAM_MspInit+0x214>)
 80052c0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a12      	ldr	r2, [pc, #72]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
 80052c8:	4a11      	ldr	r2, [pc, #68]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80052ce:	4810      	ldr	r0, [pc, #64]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 80052d0:	f000 feae 	bl	8006030 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80052d4:	480e      	ldr	r0, [pc, #56]	; (8005310 <BSP_SDRAM_MspInit+0x210>)
 80052d6:	f000 fdfd 	bl	8005ed4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80052da:	2200      	movs	r2, #0
 80052dc:	210f      	movs	r1, #15
 80052de:	2038      	movs	r0, #56	; 0x38
 80052e0:	f000 fbfb 	bl	8005ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80052e4:	2038      	movs	r0, #56	; 0x38
 80052e6:	f000 fc14 	bl	8005b12 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80052ea:	bf00      	nop
 80052ec:	3740      	adds	r7, #64	; 0x40
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40023800 	.word	0x40023800
 80052f8:	40020400 	.word	0x40020400
 80052fc:	40020800 	.word	0x40020800
 8005300:	40020c00 	.word	0x40020c00
 8005304:	40021000 	.word	0x40021000
 8005308:	40021400 	.word	0x40021400
 800530c:	40021800 	.word	0x40021800
 8005310:	20000244 	.word	0x20000244
 8005314:	40026410 	.word	0x40026410

08005318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800531c:	4b0e      	ldr	r3, [pc, #56]	; (8005358 <HAL_Init+0x40>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a0d      	ldr	r2, [pc, #52]	; (8005358 <HAL_Init+0x40>)
 8005322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005326:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <HAL_Init+0x40>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a0a      	ldr	r2, [pc, #40]	; (8005358 <HAL_Init+0x40>)
 800532e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005332:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005334:	4b08      	ldr	r3, [pc, #32]	; (8005358 <HAL_Init+0x40>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a07      	ldr	r2, [pc, #28]	; (8005358 <HAL_Init+0x40>)
 800533a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800533e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005340:	2003      	movs	r0, #3
 8005342:	f000 fbbf 	bl	8005ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005346:	2000      	movs	r0, #0
 8005348:	f000 f808 	bl	800535c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800534c:	f7fd fff2 	bl	8003334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	40023c00 	.word	0x40023c00

0800535c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005364:	4b12      	ldr	r3, [pc, #72]	; (80053b0 <HAL_InitTick+0x54>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <HAL_InitTick+0x58>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	4619      	mov	r1, r3
 800536e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005372:	fbb3 f3f1 	udiv	r3, r3, r1
 8005376:	fbb2 f3f3 	udiv	r3, r2, r3
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fbd7 	bl	8005b2e <HAL_SYSTICK_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e00e      	b.n	80053a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b0f      	cmp	r3, #15
 800538e:	d80a      	bhi.n	80053a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005390:	2200      	movs	r2, #0
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	f04f 30ff 	mov.w	r0, #4294967295
 8005398:	f000 fb9f 	bl	8005ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800539c:	4a06      	ldr	r2, [pc, #24]	; (80053b8 <HAL_InitTick+0x5c>)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e000      	b.n	80053a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20000004 	.word	0x20000004
 80053b4:	20000064 	.word	0x20000064
 80053b8:	20000060 	.word	0x20000060

080053bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053c0:	4b06      	ldr	r3, [pc, #24]	; (80053dc <HAL_IncTick+0x20>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	461a      	mov	r2, r3
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_IncTick+0x24>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4413      	add	r3, r2
 80053cc:	4a04      	ldr	r2, [pc, #16]	; (80053e0 <HAL_IncTick+0x24>)
 80053ce:	6013      	str	r3, [r2, #0]
}
 80053d0:	bf00      	nop
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	20000064 	.word	0x20000064
 80053e0:	2000165c 	.word	0x2000165c

080053e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  return uwTick;
 80053e8:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <HAL_GetTick+0x14>)
 80053ea:	681b      	ldr	r3, [r3, #0]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	2000165c 	.word	0x2000165c

080053fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005404:	f7ff ffee 	bl	80053e4 <HAL_GetTick>
 8005408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d005      	beq.n	8005422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005416:	4b09      	ldr	r3, [pc, #36]	; (800543c <HAL_Delay+0x40>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005422:	bf00      	nop
 8005424:	f7ff ffde 	bl	80053e4 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	429a      	cmp	r2, r3
 8005432:	d8f7      	bhi.n	8005424 <HAL_Delay+0x28>
  {
  }
}
 8005434:	bf00      	nop
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	20000064 	.word	0x20000064

08005440 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e033      	b.n	80054be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d109      	bne.n	8005472 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fd ff90 	bl	8003384 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	f003 0310 	and.w	r3, r3, #16
 800547a:	2b00      	cmp	r3, #0
 800547c:	d118      	bne.n	80054b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005486:	f023 0302 	bic.w	r3, r3, #2
 800548a:	f043 0202 	orr.w	r2, r3, #2
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f94a 	bl	800572c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	f023 0303 	bic.w	r3, r3, #3
 80054a6:	f043 0201 	orr.w	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	641a      	str	r2, [r3, #64]	; 0x40
 80054ae:	e001      	b.n	80054b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_ADC_ConfigChannel+0x1c>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e113      	b.n	800570c <HAL_ADC_ConfigChannel+0x244>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b09      	cmp	r3, #9
 80054f2:	d925      	bls.n	8005540 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68d9      	ldr	r1, [r3, #12]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	4613      	mov	r3, r2
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	4413      	add	r3, r2
 8005508:	3b1e      	subs	r3, #30
 800550a:	2207      	movs	r2, #7
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	43da      	mvns	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	400a      	ands	r2, r1
 8005518:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68d9      	ldr	r1, [r3, #12]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	4618      	mov	r0, r3
 800552c:	4603      	mov	r3, r0
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	4403      	add	r3, r0
 8005532:	3b1e      	subs	r3, #30
 8005534:	409a      	lsls	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	60da      	str	r2, [r3, #12]
 800553e:	e022      	b.n	8005586 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6919      	ldr	r1, [r3, #16]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	4613      	mov	r3, r2
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	4413      	add	r3, r2
 8005554:	2207      	movs	r2, #7
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	43da      	mvns	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	400a      	ands	r2, r1
 8005562:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6919      	ldr	r1, [r3, #16]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	b29b      	uxth	r3, r3
 8005574:	4618      	mov	r0, r3
 8005576:	4603      	mov	r3, r0
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	4403      	add	r3, r0
 800557c:	409a      	lsls	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b06      	cmp	r3, #6
 800558c:	d824      	bhi.n	80055d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	3b05      	subs	r3, #5
 80055a0:	221f      	movs	r2, #31
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43da      	mvns	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	400a      	ands	r2, r1
 80055ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	4618      	mov	r0, r3
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	3b05      	subs	r3, #5
 80055ca:	fa00 f203 	lsl.w	r2, r0, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	635a      	str	r2, [r3, #52]	; 0x34
 80055d6:	e04c      	b.n	8005672 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b0c      	cmp	r3, #12
 80055de:	d824      	bhi.n	800562a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	4613      	mov	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	3b23      	subs	r3, #35	; 0x23
 80055f2:	221f      	movs	r2, #31
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	43da      	mvns	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	400a      	ands	r2, r1
 8005600:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	4618      	mov	r0, r3
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	3b23      	subs	r3, #35	; 0x23
 800561c:	fa00 f203 	lsl.w	r2, r0, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
 8005628:	e023      	b.n	8005672 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	3b41      	subs	r3, #65	; 0x41
 800563c:	221f      	movs	r2, #31
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43da      	mvns	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	400a      	ands	r2, r1
 800564a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	4618      	mov	r0, r3
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	3b41      	subs	r3, #65	; 0x41
 8005666:	fa00 f203 	lsl.w	r2, r0, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005672:	4b29      	ldr	r3, [pc, #164]	; (8005718 <HAL_ADC_ConfigChannel+0x250>)
 8005674:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a28      	ldr	r2, [pc, #160]	; (800571c <HAL_ADC_ConfigChannel+0x254>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d10f      	bne.n	80056a0 <HAL_ADC_ConfigChannel+0x1d8>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b12      	cmp	r3, #18
 8005686:	d10b      	bne.n	80056a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1d      	ldr	r2, [pc, #116]	; (800571c <HAL_ADC_ConfigChannel+0x254>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d12b      	bne.n	8005702 <HAL_ADC_ConfigChannel+0x23a>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <HAL_ADC_ConfigChannel+0x258>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <HAL_ADC_ConfigChannel+0x1f4>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b11      	cmp	r3, #17
 80056ba:	d122      	bne.n	8005702 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a11      	ldr	r2, [pc, #68]	; (8005720 <HAL_ADC_ConfigChannel+0x258>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d111      	bne.n	8005702 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80056de:	4b11      	ldr	r3, [pc, #68]	; (8005724 <HAL_ADC_ConfigChannel+0x25c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a11      	ldr	r2, [pc, #68]	; (8005728 <HAL_ADC_ConfigChannel+0x260>)
 80056e4:	fba2 2303 	umull	r2, r3, r2, r3
 80056e8:	0c9a      	lsrs	r2, r3, #18
 80056ea:	4613      	mov	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80056f4:	e002      	b.n	80056fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	3b01      	subs	r3, #1
 80056fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f9      	bne.n	80056f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	40012300 	.word	0x40012300
 800571c:	40012000 	.word	0x40012000
 8005720:	10000012 	.word	0x10000012
 8005724:	20000004 	.word	0x20000004
 8005728:	431bde83 	.word	0x431bde83

0800572c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005734:	4b79      	ldr	r3, [pc, #484]	; (800591c <ADC_Init+0x1f0>)
 8005736:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	431a      	orrs	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005760:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6859      	ldr	r1, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	021a      	lsls	r2, r3, #8
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005784:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6859      	ldr	r1, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6899      	ldr	r1, [r3, #8]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	4a58      	ldr	r2, [pc, #352]	; (8005920 <ADC_Init+0x1f4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d022      	beq.n	800580a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689a      	ldr	r2, [r3, #8]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6899      	ldr	r1, [r3, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80057f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6899      	ldr	r1, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	609a      	str	r2, [r3, #8]
 8005808:	e00f      	b.n	800582a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005818:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005828:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0202 	bic.w	r2, r2, #2
 8005838:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6899      	ldr	r1, [r3, #8]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	7e1b      	ldrb	r3, [r3, #24]
 8005844:	005a      	lsls	r2, r3, #1
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01b      	beq.n	8005890 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005866:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005876:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6859      	ldr	r1, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	3b01      	subs	r3, #1
 8005884:	035a      	lsls	r2, r3, #13
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
 800588e:	e007      	b.n	80058a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800589e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80058ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	051a      	lsls	r2, r3, #20
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6899      	ldr	r1, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058e2:	025a      	lsls	r2, r3, #9
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6899      	ldr	r1, [r3, #8]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	029a      	lsls	r2, r3, #10
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	609a      	str	r2, [r3, #8]
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	40012300 	.word	0x40012300
 8005920:	0f000001 	.word	0x0f000001

08005924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005934:	4b0c      	ldr	r3, [pc, #48]	; (8005968 <__NVIC_SetPriorityGrouping+0x44>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005940:	4013      	ands	r3, r2
 8005942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800594c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005956:	4a04      	ldr	r2, [pc, #16]	; (8005968 <__NVIC_SetPriorityGrouping+0x44>)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	60d3      	str	r3, [r2, #12]
}
 800595c:	bf00      	nop
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	e000ed00 	.word	0xe000ed00

0800596c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005970:	4b04      	ldr	r3, [pc, #16]	; (8005984 <__NVIC_GetPriorityGrouping+0x18>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	f003 0307 	and.w	r3, r3, #7
}
 800597a:	4618      	mov	r0, r3
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	e000ed00 	.word	0xe000ed00

08005988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	4603      	mov	r3, r0
 8005990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005996:	2b00      	cmp	r3, #0
 8005998:	db0b      	blt.n	80059b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	f003 021f 	and.w	r2, r3, #31
 80059a0:	4907      	ldr	r1, [pc, #28]	; (80059c0 <__NVIC_EnableIRQ+0x38>)
 80059a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2001      	movs	r0, #1
 80059aa:	fa00 f202 	lsl.w	r2, r0, r2
 80059ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	e000e100 	.word	0xe000e100

080059c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	6039      	str	r1, [r7, #0]
 80059ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	db0a      	blt.n	80059ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	490c      	ldr	r1, [pc, #48]	; (8005a10 <__NVIC_SetPriority+0x4c>)
 80059de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e2:	0112      	lsls	r2, r2, #4
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	440b      	add	r3, r1
 80059e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059ec:	e00a      	b.n	8005a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	4908      	ldr	r1, [pc, #32]	; (8005a14 <__NVIC_SetPriority+0x50>)
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	3b04      	subs	r3, #4
 80059fc:	0112      	lsls	r2, r2, #4
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	440b      	add	r3, r1
 8005a02:	761a      	strb	r2, [r3, #24]
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	e000e100 	.word	0xe000e100
 8005a14:	e000ed00 	.word	0xe000ed00

08005a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b089      	sub	sp, #36	; 0x24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f1c3 0307 	rsb	r3, r3, #7
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	bf28      	it	cs
 8005a36:	2304      	movcs	r3, #4
 8005a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	2b06      	cmp	r3, #6
 8005a40:	d902      	bls.n	8005a48 <NVIC_EncodePriority+0x30>
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	3b03      	subs	r3, #3
 8005a46:	e000      	b.n	8005a4a <NVIC_EncodePriority+0x32>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43da      	mvns	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	401a      	ands	r2, r3
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a60:	f04f 31ff 	mov.w	r1, #4294967295
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6a:	43d9      	mvns	r1, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a70:	4313      	orrs	r3, r2
         );
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3724      	adds	r7, #36	; 0x24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a90:	d301      	bcc.n	8005a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a92:	2301      	movs	r3, #1
 8005a94:	e00f      	b.n	8005ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a96:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <SysTick_Config+0x40>)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a9e:	210f      	movs	r1, #15
 8005aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa4:	f7ff ff8e 	bl	80059c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <SysTick_Config+0x40>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005aae:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <SysTick_Config+0x40>)
 8005ab0:	2207      	movs	r2, #7
 8005ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	e000e010 	.word	0xe000e010

08005ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff ff29 	bl	8005924 <__NVIC_SetPriorityGrouping>
}
 8005ad2:	bf00      	nop
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b086      	sub	sp, #24
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	607a      	str	r2, [r7, #4]
 8005ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005aec:	f7ff ff3e 	bl	800596c <__NVIC_GetPriorityGrouping>
 8005af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	6978      	ldr	r0, [r7, #20]
 8005af8:	f7ff ff8e 	bl	8005a18 <NVIC_EncodePriority>
 8005afc:	4602      	mov	r2, r0
 8005afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b02:	4611      	mov	r1, r2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff ff5d 	bl	80059c4 <__NVIC_SetPriority>
}
 8005b0a:	bf00      	nop
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	4603      	mov	r3, r0
 8005b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff ff31 	bl	8005988 <__NVIC_EnableIRQ>
}
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b082      	sub	sp, #8
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff ffa2 	bl	8005a80 <SysTick_Config>
 8005b3c:	4603      	mov	r3, r0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b082      	sub	sp, #8
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e014      	b.n	8005b82 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	791b      	ldrb	r3, [r3, #4]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d105      	bne.n	8005b6e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7fd fc4f 	bl	800340c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2202      	movs	r2, #2
 8005b72:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	795b      	ldrb	r3, [r3, #5]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <HAL_DAC_Start_DMA+0x1e>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e08e      	b.n	8005cc8 <HAL_DAC_Start_DMA+0x13c>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d12a      	bne.n	8005c12 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	4a43      	ldr	r2, [pc, #268]	; (8005cd0 <HAL_DAC_Start_DMA+0x144>)
 8005bc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	4a42      	ldr	r2, [pc, #264]	; (8005cd4 <HAL_DAC_Start_DMA+0x148>)
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	4a41      	ldr	r2, [pc, #260]	; (8005cd8 <HAL_DAC_Start_DMA+0x14c>)
 8005bd2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005be2:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d009      	beq.n	8005bfe <HAL_DAC_Start_DMA+0x72>
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d00c      	beq.n	8005c08 <HAL_DAC_Start_DMA+0x7c>
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d000      	beq.n	8005bf4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8005bf2:	e039      	b.n	8005c68 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	617b      	str	r3, [r7, #20]
        break;
 8005bfc:	e034      	b.n	8005c68 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	330c      	adds	r3, #12
 8005c04:	617b      	str	r3, [r7, #20]
        break;
 8005c06:	e02f      	b.n	8005c68 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3310      	adds	r3, #16
 8005c0e:	617b      	str	r3, [r7, #20]
        break;
 8005c10:	e02a      	b.n	8005c68 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	4a31      	ldr	r2, [pc, #196]	; (8005cdc <HAL_DAC_Start_DMA+0x150>)
 8005c18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	4a30      	ldr	r2, [pc, #192]	; (8005ce0 <HAL_DAC_Start_DMA+0x154>)
 8005c20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	4a2f      	ldr	r2, [pc, #188]	; (8005ce4 <HAL_DAC_Start_DMA+0x158>)
 8005c28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c38:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d009      	beq.n	8005c54 <HAL_DAC_Start_DMA+0xc8>
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d00c      	beq.n	8005c5e <HAL_DAC_Start_DMA+0xd2>
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d000      	beq.n	8005c4a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8005c48:	e00e      	b.n	8005c68 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3314      	adds	r3, #20
 8005c50:	617b      	str	r3, [r7, #20]
        break;
 8005c52:	e009      	b.n	8005c68 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3318      	adds	r3, #24
 8005c5a:	617b      	str	r3, [r7, #20]
        break;
 8005c5c:	e004      	b.n	8005c68 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	331c      	adds	r3, #28
 8005c64:	617b      	str	r3, [r7, #20]
        break;
 8005c66:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10f      	bne.n	8005c8e <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c7c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6898      	ldr	r0, [r3, #8]
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	f000 fa30 	bl	80060ec <HAL_DMA_Start_IT>
 8005c8c:	e00e      	b.n	8005cac <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005c9c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	68d8      	ldr	r0, [r3, #12]
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	f000 fa20 	bl	80060ec <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6819      	ldr	r1, [r3, #0]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	409a      	lsls	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	08005dbf 	.word	0x08005dbf
 8005cd4:	08005de1 	.word	0x08005de1
 8005cd8:	08005dfd 	.word	0x08005dfd
 8005cdc:	08005e67 	.word	0x08005e67
 8005ce0:	08005e89 	.word	0x08005e89
 8005ce4:	08005ea5 	.word	0x08005ea5

08005ce8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	2300      	movs	r3, #0
 8005d36:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	795b      	ldrb	r3, [r3, #5]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_DAC_ConfigChannel+0x20>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e036      	b.n	8005db2 <HAL_DAC_ConfigChannel+0x8e>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2201      	movs	r2, #1
 8005d48:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005d58:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	43db      	mvns	r3, r3
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4013      	ands	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6819      	ldr	r1, [r3, #0]
 8005d92:	22c0      	movs	r2, #192	; 0xc0
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9a:	43da      	mvns	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	400a      	ands	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7ff ff8b 	bl	8005ce8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	711a      	strb	r2, [r3, #4]
}
 8005dd8:	bf00      	nop
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f7ff ff84 	bl	8005cfc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005df4:	bf00      	nop
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f043 0204 	orr.w	r2, r3, #4
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f7ff ff7a 	bl	8005d10 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	711a      	strb	r2, [r3, #4]
}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7ff ffd8 	bl	8005e2a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	711a      	strb	r2, [r3, #4]
}
 8005e80:	bf00      	nop
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f7ff ffd1 	bl	8005e3e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005e9c:	bf00      	nop
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f043 0204 	orr.w	r2, r3, #4
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7ff ffc7 	bl	8005e52 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	711a      	strb	r2, [r3, #4]
}
 8005eca:	bf00      	nop
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ee0:	f7ff fa80 	bl	80053e4 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e099      	b.n	8006024 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0201 	bic.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f10:	e00f      	b.n	8005f32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f12:	f7ff fa67 	bl	80053e4 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b05      	cmp	r3, #5
 8005f1e:	d908      	bls.n	8005f32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2203      	movs	r2, #3
 8005f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e078      	b.n	8006024 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1e8      	bne.n	8005f12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4b38      	ldr	r3, [pc, #224]	; (800602c <HAL_DMA_Init+0x158>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d107      	bne.n	8005f9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	4313      	orrs	r3, r2
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f023 0307 	bic.w	r3, r3, #7
 8005fb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	d117      	bne.n	8005ff6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00e      	beq.n	8005ff6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 facd 	bl	8006578 <DMA_CheckFifoParam>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d008      	beq.n	8005ff6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2240      	movs	r2, #64	; 0x40
 8005fe8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e016      	b.n	8006024 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa84 	bl	800650c <DMA_CalcBaseAndBitshift>
 8006004:	4603      	mov	r3, r0
 8006006:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600c:	223f      	movs	r2, #63	; 0x3f
 800600e:	409a      	lsls	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	f010803f 	.word	0xf010803f

08006030 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e050      	b.n	80060e4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d101      	bne.n	8006052 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800604e:	2302      	movs	r3, #2
 8006050:	e048      	b.n	80060e4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0201 	bic.w	r2, r2, #1
 8006060:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2200      	movs	r2, #0
 8006070:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2200      	movs	r2, #0
 8006078:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2200      	movs	r2, #0
 8006080:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2200      	movs	r2, #0
 8006088:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2221      	movs	r2, #33	; 0x21
 8006090:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fa3a 	bl	800650c <DMA_CalcBaseAndBitshift>
 8006098:	4603      	mov	r3, r0
 800609a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c4:	223f      	movs	r2, #63	; 0x3f
 80060c6:	409a      	lsls	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006102:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800610a:	2b01      	cmp	r3, #1
 800610c:	d101      	bne.n	8006112 <HAL_DMA_Start_IT+0x26>
 800610e:	2302      	movs	r3, #2
 8006110:	e040      	b.n	8006194 <HAL_DMA_Start_IT+0xa8>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b01      	cmp	r3, #1
 8006124:	d12f      	bne.n	8006186 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2202      	movs	r2, #2
 800612a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 f9b8 	bl	80064b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006144:	223f      	movs	r2, #63	; 0x3f
 8006146:	409a      	lsls	r2, r3
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0216 	orr.w	r2, r2, #22
 800615a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006160:	2b00      	cmp	r3, #0
 8006162:	d007      	beq.n	8006174 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0208 	orr.w	r2, r2, #8
 8006172:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	e005      	b.n	8006192 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800618e:	2302      	movs	r3, #2
 8006190:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006192:	7dfb      	ldrb	r3, [r7, #23]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80061a8:	4b92      	ldr	r3, [pc, #584]	; (80063f4 <HAL_DMA_IRQHandler+0x258>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a92      	ldr	r2, [pc, #584]	; (80063f8 <HAL_DMA_IRQHandler+0x25c>)
 80061ae:	fba2 2303 	umull	r2, r3, r2, r3
 80061b2:	0a9b      	lsrs	r3, r3, #10
 80061b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c6:	2208      	movs	r2, #8
 80061c8:	409a      	lsls	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4013      	ands	r3, r2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d01a      	beq.n	8006208 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d013      	beq.n	8006208 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0204 	bic.w	r2, r2, #4
 80061ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f4:	2208      	movs	r2, #8
 80061f6:	409a      	lsls	r2, r3
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006200:	f043 0201 	orr.w	r2, r3, #1
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800620c:	2201      	movs	r2, #1
 800620e:	409a      	lsls	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4013      	ands	r3, r2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d012      	beq.n	800623e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00b      	beq.n	800623e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622a:	2201      	movs	r2, #1
 800622c:	409a      	lsls	r2, r3
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006236:	f043 0202 	orr.w	r2, r3, #2
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006242:	2204      	movs	r2, #4
 8006244:	409a      	lsls	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4013      	ands	r3, r2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d012      	beq.n	8006274 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006260:	2204      	movs	r2, #4
 8006262:	409a      	lsls	r2, r3
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626c:	f043 0204 	orr.w	r2, r3, #4
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006278:	2210      	movs	r2, #16
 800627a:	409a      	lsls	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4013      	ands	r3, r2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d043      	beq.n	800630c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d03c      	beq.n	800630c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006296:	2210      	movs	r2, #16
 8006298:	409a      	lsls	r2, r3
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d018      	beq.n	80062de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d108      	bne.n	80062cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d024      	beq.n	800630c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	4798      	blx	r3
 80062ca:	e01f      	b.n	800630c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d01b      	beq.n	800630c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	4798      	blx	r3
 80062dc:	e016      	b.n	800630c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d107      	bne.n	80062fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0208 	bic.w	r2, r2, #8
 80062fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006310:	2220      	movs	r2, #32
 8006312:	409a      	lsls	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4013      	ands	r3, r2
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 808e 	beq.w	800643a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 8086 	beq.w	800643a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006332:	2220      	movs	r2, #32
 8006334:	409a      	lsls	r2, r3
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b05      	cmp	r3, #5
 8006344:	d136      	bne.n	80063b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0216 	bic.w	r2, r2, #22
 8006354:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695a      	ldr	r2, [r3, #20]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006364:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <HAL_DMA_IRQHandler+0x1da>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0208 	bic.w	r2, r2, #8
 8006384:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638a:	223f      	movs	r2, #63	; 0x3f
 800638c:	409a      	lsls	r2, r3
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d07d      	beq.n	80064a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
        }
        return;
 80063b2:	e078      	b.n	80064a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d01c      	beq.n	80063fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d108      	bne.n	80063e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d030      	beq.n	800643a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
 80063e0:	e02b      	b.n	800643a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d027      	beq.n	800643a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
 80063f2:	e022      	b.n	800643a <HAL_DMA_IRQHandler+0x29e>
 80063f4:	20000004 	.word	0x20000004
 80063f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10f      	bne.n	800642a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0210 	bic.w	r2, r2, #16
 8006418:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643e:	2b00      	cmp	r3, #0
 8006440:	d032      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d022      	beq.n	8006494 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2205      	movs	r2, #5
 8006452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0201 	bic.w	r2, r2, #1
 8006464:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	3301      	adds	r3, #1
 800646a:	60bb      	str	r3, [r7, #8]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	429a      	cmp	r2, r3
 8006470:	d307      	bcc.n	8006482 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1f2      	bne.n	8006466 <HAL_DMA_IRQHandler+0x2ca>
 8006480:	e000      	b.n	8006484 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006482:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006498:	2b00      	cmp	r3, #0
 800649a:	d005      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	4798      	blx	r3
 80064a4:	e000      	b.n	80064a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80064a6:	bf00      	nop
    }
  }
}
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop

080064b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80064cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b40      	cmp	r3, #64	; 0x40
 80064dc:	d108      	bne.n	80064f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80064ee:	e007      	b.n	8006500 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	60da      	str	r2, [r3, #12]
}
 8006500:	bf00      	nop
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	b2db      	uxtb	r3, r3
 800651a:	3b10      	subs	r3, #16
 800651c:	4a14      	ldr	r2, [pc, #80]	; (8006570 <DMA_CalcBaseAndBitshift+0x64>)
 800651e:	fba2 2303 	umull	r2, r3, r2, r3
 8006522:	091b      	lsrs	r3, r3, #4
 8006524:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006526:	4a13      	ldr	r2, [pc, #76]	; (8006574 <DMA_CalcBaseAndBitshift+0x68>)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4413      	add	r3, r2
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b03      	cmp	r3, #3
 8006538:	d909      	bls.n	800654e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006542:	f023 0303 	bic.w	r3, r3, #3
 8006546:	1d1a      	adds	r2, r3, #4
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	659a      	str	r2, [r3, #88]	; 0x58
 800654c:	e007      	b.n	800655e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006556:	f023 0303 	bic.w	r3, r3, #3
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	aaaaaaab 	.word	0xaaaaaaab
 8006574:	08010d90 	.word	0x08010d90

08006578 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006588:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d11f      	bne.n	80065d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2b03      	cmp	r3, #3
 8006596:	d855      	bhi.n	8006644 <DMA_CheckFifoParam+0xcc>
 8006598:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <DMA_CheckFifoParam+0x28>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065b1 	.word	0x080065b1
 80065a4:	080065c3 	.word	0x080065c3
 80065a8:	080065b1 	.word	0x080065b1
 80065ac:	08006645 	.word	0x08006645
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d045      	beq.n	8006648 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065c0:	e042      	b.n	8006648 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80065ca:	d13f      	bne.n	800664c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065d0:	e03c      	b.n	800664c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065da:	d121      	bne.n	8006620 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d836      	bhi.n	8006650 <DMA_CheckFifoParam+0xd8>
 80065e2:	a201      	add	r2, pc, #4	; (adr r2, 80065e8 <DMA_CheckFifoParam+0x70>)
 80065e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e8:	080065f9 	.word	0x080065f9
 80065ec:	080065ff 	.word	0x080065ff
 80065f0:	080065f9 	.word	0x080065f9
 80065f4:	08006611 	.word	0x08006611
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	73fb      	strb	r3, [r7, #15]
      break;
 80065fc:	e02f      	b.n	800665e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d024      	beq.n	8006654 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800660e:	e021      	b.n	8006654 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006618:	d11e      	bne.n	8006658 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800661e:	e01b      	b.n	8006658 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b02      	cmp	r3, #2
 8006624:	d902      	bls.n	800662c <DMA_CheckFifoParam+0xb4>
 8006626:	2b03      	cmp	r3, #3
 8006628:	d003      	beq.n	8006632 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800662a:	e018      	b.n	800665e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	73fb      	strb	r3, [r7, #15]
      break;
 8006630:	e015      	b.n	800665e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00e      	beq.n	800665c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	73fb      	strb	r3, [r7, #15]
      break;
 8006642:	e00b      	b.n	800665c <DMA_CheckFifoParam+0xe4>
      break;
 8006644:	bf00      	nop
 8006646:	e00a      	b.n	800665e <DMA_CheckFifoParam+0xe6>
      break;
 8006648:	bf00      	nop
 800664a:	e008      	b.n	800665e <DMA_CheckFifoParam+0xe6>
      break;
 800664c:	bf00      	nop
 800664e:	e006      	b.n	800665e <DMA_CheckFifoParam+0xe6>
      break;
 8006650:	bf00      	nop
 8006652:	e004      	b.n	800665e <DMA_CheckFifoParam+0xe6>
      break;
 8006654:	bf00      	nop
 8006656:	e002      	b.n	800665e <DMA_CheckFifoParam+0xe6>
      break;   
 8006658:	bf00      	nop
 800665a:	e000      	b.n	800665e <DMA_CheckFifoParam+0xe6>
      break;
 800665c:	bf00      	nop
    }
  } 
  
  return status; 
 800665e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e03b      	b.n	80066f6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fc ff32 	bl	80034fc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066bc:	f023 0107 	bic.w	r1, r3, #7
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80066d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	68d1      	ldr	r1, [r2, #12]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6812      	ldr	r2, [r2, #0]
 80066e2:	430b      	orrs	r3, r1
 80066e4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b086      	sub	sp, #24
 8006702:	af02      	add	r7, sp, #8
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
 800670a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006712:	2b01      	cmp	r3, #1
 8006714:	d101      	bne.n	800671a <HAL_DMA2D_Start+0x1c>
 8006716:	2302      	movs	r3, #2
 8006718:	e018      	b.n	800674c <HAL_DMA2D_Start+0x4e>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2202      	movs	r2, #2
 8006726:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	68b9      	ldr	r1, [r7, #8]
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f989 	bl	8006a4c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f042 0201 	orr.w	r2, r2, #1
 8006748:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800675e:	2300      	movs	r3, #0
 8006760:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d056      	beq.n	800681e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8006770:	f7fe fe38 	bl	80053e4 <HAL_GetTick>
 8006774:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006776:	e04b      	b.n	8006810 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006786:	2b00      	cmp	r3, #0
 8006788:	d023      	beq.n	80067d2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f003 0320 	and.w	r3, r3, #32
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006798:	f043 0202 	orr.w	r2, r3, #2
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d005      	beq.n	80067b6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ae:	f043 0201 	orr.w	r2, r3, #1
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2221      	movs	r2, #33	; 0x21
 80067bc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2204      	movs	r2, #4
 80067c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e0a5      	b.n	800691e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d01a      	beq.n	8006810 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80067da:	f7fe fe03 	bl	80053e4 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d302      	bcc.n	80067f0 <HAL_DMA2D_PollForTransfer+0x9c>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10f      	bne.n	8006810 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f4:	f043 0220 	orr.w	r2, r3, #32
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2203      	movs	r2, #3
 8006800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e086      	b.n	800691e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0ac      	beq.n	8006778 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	f003 0320 	and.w	r3, r3, #32
 8006828:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	f003 0320 	and.w	r3, r3, #32
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d061      	beq.n	8006904 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006840:	f7fe fdd0 	bl	80053e4 <HAL_GetTick>
 8006844:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006846:	e056      	b.n	80068f6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006856:	2b00      	cmp	r3, #0
 8006858:	d02e      	beq.n	80068b8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f003 0308 	and.w	r3, r3, #8
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006868:	f043 0204 	orr.w	r2, r3, #4
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b00      	cmp	r3, #0
 8006878:	d005      	beq.n	8006886 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687e:	f043 0202 	orr.w	r2, r3, #2
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006894:	f043 0201 	orr.w	r2, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2229      	movs	r2, #41	; 0x29
 80068a2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2204      	movs	r2, #4
 80068a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e032      	b.n	800691e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068be:	d01a      	beq.n	80068f6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80068c0:	f7fe fd90 	bl	80053e4 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d302      	bcc.n	80068d6 <HAL_DMA2D_PollForTransfer+0x182>
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10f      	bne.n	80068f6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068da:	f043 0220 	orr.w	r2, r3, #32
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2203      	movs	r2, #3
 80068e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e013      	b.n	800691e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f003 0310 	and.w	r3, r3, #16
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0a1      	beq.n	8006848 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2212      	movs	r2, #18
 800690a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
	...

08006928 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006940:	2b01      	cmp	r3, #1
 8006942:	d101      	bne.n	8006948 <HAL_DMA2D_ConfigLayer+0x20>
 8006944:	2302      	movs	r3, #2
 8006946:	e079      	b.n	8006a3c <HAL_DMA2D_ConfigLayer+0x114>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	011b      	lsls	r3, r3, #4
 800695c:	3318      	adds	r3, #24
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	4413      	add	r3, r2
 8006962:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	041b      	lsls	r3, r3, #16
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006972:	4b35      	ldr	r3, [pc, #212]	; (8006a48 <HAL_DMA2D_ConfigLayer+0x120>)
 8006974:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b0a      	cmp	r3, #10
 800697c:	d003      	beq.n	8006986 <HAL_DMA2D_ConfigLayer+0x5e>
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2b09      	cmp	r3, #9
 8006984:	d107      	bne.n	8006996 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	e005      	b.n	80069a2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	061b      	lsls	r3, r3, #24
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d120      	bne.n	80069ea <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	43db      	mvns	r3, r3
 80069b2:	ea02 0103 	and.w	r1, r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	430a      	orrs	r2, r1
 80069be:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	6812      	ldr	r2, [r2, #0]
 80069c8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b0a      	cmp	r3, #10
 80069d0:	d003      	beq.n	80069da <HAL_DMA2D_ConfigLayer+0xb2>
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2b09      	cmp	r3, #9
 80069d8:	d127      	bne.n	8006a2a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80069e6:	629a      	str	r2, [r3, #40]	; 0x28
 80069e8:	e01f      	b.n	8006a2a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69da      	ldr	r2, [r3, #28]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	43db      	mvns	r3, r3
 80069f4:	ea02 0103 	and.w	r1, r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	6812      	ldr	r2, [r2, #0]
 8006a0a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b0a      	cmp	r3, #10
 8006a12:	d003      	beq.n	8006a1c <HAL_DMA2D_ConfigLayer+0xf4>
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b09      	cmp	r3, #9
 8006a1a:	d106      	bne.n	8006a2a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006a28:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	371c      	adds	r7, #28
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	ff03000f 	.word	0xff03000f

08006a4c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b08b      	sub	sp, #44	; 0x2c
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a60:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	041a      	lsls	r2, r3, #16
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a84:	d174      	bne.n	8006b70 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006a8c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a94:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a9c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d108      	bne.n	8006abe <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
 8006abc:	e053      	b.n	8006b66 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d106      	bne.n	8006ad4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad2:	e048      	b.n	8006b66 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d111      	bne.n	8006b00 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	0cdb      	lsrs	r3, r3, #19
 8006ae0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	0a9b      	lsrs	r3, r3, #10
 8006ae6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	08db      	lsrs	r3, r3, #3
 8006aec:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	02db      	lsls	r3, r3, #11
 8006af6:	4313      	orrs	r3, r2
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
 8006afe:	e032      	b.n	8006b66 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d117      	bne.n	8006b38 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	0fdb      	lsrs	r3, r3, #31
 8006b0c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	0cdb      	lsrs	r3, r3, #19
 8006b12:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	0adb      	lsrs	r3, r3, #11
 8006b18:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	08db      	lsrs	r3, r3, #3
 8006b1e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	029b      	lsls	r3, r3, #10
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	03db      	lsls	r3, r3, #15
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
 8006b36:	e016      	b.n	8006b66 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	0f1b      	lsrs	r3, r3, #28
 8006b3c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	0d1b      	lsrs	r3, r3, #20
 8006b42:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	0b1b      	lsrs	r3, r3, #12
 8006b48:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	091b      	lsrs	r3, r3, #4
 8006b4e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	011a      	lsls	r2, r3, #4
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	021b      	lsls	r3, r3, #8
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	031b      	lsls	r3, r3, #12
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006b6e:	e003      	b.n	8006b78 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	60da      	str	r2, [r3, #12]
}
 8006b78:	bf00      	nop
 8006b7a:	372c      	adds	r7, #44	; 0x2c
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b089      	sub	sp, #36	; 0x24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61fb      	str	r3, [r7, #28]
 8006b9e:	e177      	b.n	8006e90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	f040 8166 	bne.w	8006e8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d00b      	beq.n	8006bde <HAL_GPIO_Init+0x5a>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d007      	beq.n	8006bde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006bd2:	2b11      	cmp	r3, #17
 8006bd4:	d003      	beq.n	8006bde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2b12      	cmp	r3, #18
 8006bdc:	d130      	bne.n	8006c40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	2203      	movs	r2, #3
 8006bea:	fa02 f303 	lsl.w	r3, r2, r3
 8006bee:	43db      	mvns	r3, r3
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c14:	2201      	movs	r2, #1
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1c:	43db      	mvns	r3, r3
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	4013      	ands	r3, r2
 8006c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	091b      	lsrs	r3, r3, #4
 8006c2a:	f003 0201 	and.w	r2, r3, #1
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	fa02 f303 	lsl.w	r3, r2, r3
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	2203      	movs	r2, #3
 8006c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c50:	43db      	mvns	r3, r3
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	4013      	ands	r3, r2
 8006c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	fa02 f303 	lsl.w	r3, r2, r3
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d003      	beq.n	8006c80 <HAL_GPIO_Init+0xfc>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	2b12      	cmp	r3, #18
 8006c7e:	d123      	bne.n	8006cc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	08da      	lsrs	r2, r3, #3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3208      	adds	r2, #8
 8006c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	f003 0307 	and.w	r3, r3, #7
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	220f      	movs	r2, #15
 8006c98:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9c:	43db      	mvns	r3, r3
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	f003 0307 	and.w	r3, r3, #7
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	08da      	lsrs	r2, r3, #3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	3208      	adds	r2, #8
 8006cc2:	69b9      	ldr	r1, [r7, #24]
 8006cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f003 0203 	and.w	r2, r3, #3
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 80c0 	beq.w	8006e8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	4b65      	ldr	r3, [pc, #404]	; (8006ea4 <HAL_GPIO_Init+0x320>)
 8006d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d12:	4a64      	ldr	r2, [pc, #400]	; (8006ea4 <HAL_GPIO_Init+0x320>)
 8006d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d18:	6453      	str	r3, [r2, #68]	; 0x44
 8006d1a:	4b62      	ldr	r3, [pc, #392]	; (8006ea4 <HAL_GPIO_Init+0x320>)
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d26:	4a60      	ldr	r2, [pc, #384]	; (8006ea8 <HAL_GPIO_Init+0x324>)
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	089b      	lsrs	r3, r3, #2
 8006d2c:	3302      	adds	r3, #2
 8006d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f003 0303 	and.w	r3, r3, #3
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	220f      	movs	r2, #15
 8006d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d42:	43db      	mvns	r3, r3
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	4013      	ands	r3, r2
 8006d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a57      	ldr	r2, [pc, #348]	; (8006eac <HAL_GPIO_Init+0x328>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d037      	beq.n	8006dc2 <HAL_GPIO_Init+0x23e>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a56      	ldr	r2, [pc, #344]	; (8006eb0 <HAL_GPIO_Init+0x32c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d031      	beq.n	8006dbe <HAL_GPIO_Init+0x23a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a55      	ldr	r2, [pc, #340]	; (8006eb4 <HAL_GPIO_Init+0x330>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d02b      	beq.n	8006dba <HAL_GPIO_Init+0x236>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a54      	ldr	r2, [pc, #336]	; (8006eb8 <HAL_GPIO_Init+0x334>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d025      	beq.n	8006db6 <HAL_GPIO_Init+0x232>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a53      	ldr	r2, [pc, #332]	; (8006ebc <HAL_GPIO_Init+0x338>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d01f      	beq.n	8006db2 <HAL_GPIO_Init+0x22e>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a52      	ldr	r2, [pc, #328]	; (8006ec0 <HAL_GPIO_Init+0x33c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d019      	beq.n	8006dae <HAL_GPIO_Init+0x22a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a51      	ldr	r2, [pc, #324]	; (8006ec4 <HAL_GPIO_Init+0x340>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d013      	beq.n	8006daa <HAL_GPIO_Init+0x226>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a50      	ldr	r2, [pc, #320]	; (8006ec8 <HAL_GPIO_Init+0x344>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d00d      	beq.n	8006da6 <HAL_GPIO_Init+0x222>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a4f      	ldr	r2, [pc, #316]	; (8006ecc <HAL_GPIO_Init+0x348>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d007      	beq.n	8006da2 <HAL_GPIO_Init+0x21e>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a4e      	ldr	r2, [pc, #312]	; (8006ed0 <HAL_GPIO_Init+0x34c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d101      	bne.n	8006d9e <HAL_GPIO_Init+0x21a>
 8006d9a:	2309      	movs	r3, #9
 8006d9c:	e012      	b.n	8006dc4 <HAL_GPIO_Init+0x240>
 8006d9e:	230a      	movs	r3, #10
 8006da0:	e010      	b.n	8006dc4 <HAL_GPIO_Init+0x240>
 8006da2:	2308      	movs	r3, #8
 8006da4:	e00e      	b.n	8006dc4 <HAL_GPIO_Init+0x240>
 8006da6:	2307      	movs	r3, #7
 8006da8:	e00c      	b.n	8006dc4 <HAL_GPIO_Init+0x240>
 8006daa:	2306      	movs	r3, #6
 8006dac:	e00a      	b.n	8006dc4 <HAL_GPIO_Init+0x240>
 8006dae:	2305      	movs	r3, #5
 8006db0:	e008      	b.n	8006dc4 <HAL_GPIO_Init+0x240>
 8006db2:	2304      	movs	r3, #4
 8006db4:	e006      	b.n	8006dc4 <HAL_GPIO_Init+0x240>
 8006db6:	2303      	movs	r3, #3
 8006db8:	e004      	b.n	8006dc4 <HAL_GPIO_Init+0x240>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e002      	b.n	8006dc4 <HAL_GPIO_Init+0x240>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <HAL_GPIO_Init+0x240>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	69fa      	ldr	r2, [r7, #28]
 8006dc6:	f002 0203 	and.w	r2, r2, #3
 8006dca:	0092      	lsls	r2, r2, #2
 8006dcc:	4093      	lsls	r3, r2
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006dd4:	4934      	ldr	r1, [pc, #208]	; (8006ea8 <HAL_GPIO_Init+0x324>)
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	089b      	lsrs	r3, r3, #2
 8006dda:	3302      	adds	r3, #2
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006de2:	4b3c      	ldr	r3, [pc, #240]	; (8006ed4 <HAL_GPIO_Init+0x350>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	43db      	mvns	r3, r3
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	4013      	ands	r3, r2
 8006df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e06:	4a33      	ldr	r2, [pc, #204]	; (8006ed4 <HAL_GPIO_Init+0x350>)
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006e0c:	4b31      	ldr	r3, [pc, #196]	; (8006ed4 <HAL_GPIO_Init+0x350>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	43db      	mvns	r3, r3
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	4013      	ands	r3, r2
 8006e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006e30:	4a28      	ldr	r2, [pc, #160]	; (8006ed4 <HAL_GPIO_Init+0x350>)
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e36:	4b27      	ldr	r3, [pc, #156]	; (8006ed4 <HAL_GPIO_Init+0x350>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	43db      	mvns	r3, r3
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	4013      	ands	r3, r2
 8006e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e5a:	4a1e      	ldr	r2, [pc, #120]	; (8006ed4 <HAL_GPIO_Init+0x350>)
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e60:	4b1c      	ldr	r3, [pc, #112]	; (8006ed4 <HAL_GPIO_Init+0x350>)
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	43db      	mvns	r3, r3
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e84:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <HAL_GPIO_Init+0x350>)
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	61fb      	str	r3, [r7, #28]
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	2b0f      	cmp	r3, #15
 8006e94:	f67f ae84 	bls.w	8006ba0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006e98:	bf00      	nop
 8006e9a:	3724      	adds	r7, #36	; 0x24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	40013800 	.word	0x40013800
 8006eac:	40020000 	.word	0x40020000
 8006eb0:	40020400 	.word	0x40020400
 8006eb4:	40020800 	.word	0x40020800
 8006eb8:	40020c00 	.word	0x40020c00
 8006ebc:	40021000 	.word	0x40021000
 8006ec0:	40021400 	.word	0x40021400
 8006ec4:	40021800 	.word	0x40021800
 8006ec8:	40021c00 	.word	0x40021c00
 8006ecc:	40022000 	.word	0x40022000
 8006ed0:	40022400 	.word	0x40022400
 8006ed4:	40013c00 	.word	0x40013c00

08006ed8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006eee:	2300      	movs	r3, #0
 8006ef0:	617b      	str	r3, [r7, #20]
 8006ef2:	e0d9      	b.n	80070a8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8006efc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	4013      	ands	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	f040 80c9 	bne.w	80070a2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006f10:	4a6a      	ldr	r2, [pc, #424]	; (80070bc <HAL_GPIO_DeInit+0x1e4>)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	089b      	lsrs	r3, r3, #2
 8006f16:	3302      	adds	r3, #2
 8006f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f1c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f003 0303 	and.w	r3, r3, #3
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	220f      	movs	r2, #15
 8006f28:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	4013      	ands	r3, r2
 8006f30:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a62      	ldr	r2, [pc, #392]	; (80070c0 <HAL_GPIO_DeInit+0x1e8>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d037      	beq.n	8006faa <HAL_GPIO_DeInit+0xd2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a61      	ldr	r2, [pc, #388]	; (80070c4 <HAL_GPIO_DeInit+0x1ec>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d031      	beq.n	8006fa6 <HAL_GPIO_DeInit+0xce>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a60      	ldr	r2, [pc, #384]	; (80070c8 <HAL_GPIO_DeInit+0x1f0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d02b      	beq.n	8006fa2 <HAL_GPIO_DeInit+0xca>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a5f      	ldr	r2, [pc, #380]	; (80070cc <HAL_GPIO_DeInit+0x1f4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d025      	beq.n	8006f9e <HAL_GPIO_DeInit+0xc6>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a5e      	ldr	r2, [pc, #376]	; (80070d0 <HAL_GPIO_DeInit+0x1f8>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d01f      	beq.n	8006f9a <HAL_GPIO_DeInit+0xc2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a5d      	ldr	r2, [pc, #372]	; (80070d4 <HAL_GPIO_DeInit+0x1fc>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d019      	beq.n	8006f96 <HAL_GPIO_DeInit+0xbe>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a5c      	ldr	r2, [pc, #368]	; (80070d8 <HAL_GPIO_DeInit+0x200>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d013      	beq.n	8006f92 <HAL_GPIO_DeInit+0xba>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a5b      	ldr	r2, [pc, #364]	; (80070dc <HAL_GPIO_DeInit+0x204>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d00d      	beq.n	8006f8e <HAL_GPIO_DeInit+0xb6>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a5a      	ldr	r2, [pc, #360]	; (80070e0 <HAL_GPIO_DeInit+0x208>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d007      	beq.n	8006f8a <HAL_GPIO_DeInit+0xb2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a59      	ldr	r2, [pc, #356]	; (80070e4 <HAL_GPIO_DeInit+0x20c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d101      	bne.n	8006f86 <HAL_GPIO_DeInit+0xae>
 8006f82:	2309      	movs	r3, #9
 8006f84:	e012      	b.n	8006fac <HAL_GPIO_DeInit+0xd4>
 8006f86:	230a      	movs	r3, #10
 8006f88:	e010      	b.n	8006fac <HAL_GPIO_DeInit+0xd4>
 8006f8a:	2308      	movs	r3, #8
 8006f8c:	e00e      	b.n	8006fac <HAL_GPIO_DeInit+0xd4>
 8006f8e:	2307      	movs	r3, #7
 8006f90:	e00c      	b.n	8006fac <HAL_GPIO_DeInit+0xd4>
 8006f92:	2306      	movs	r3, #6
 8006f94:	e00a      	b.n	8006fac <HAL_GPIO_DeInit+0xd4>
 8006f96:	2305      	movs	r3, #5
 8006f98:	e008      	b.n	8006fac <HAL_GPIO_DeInit+0xd4>
 8006f9a:	2304      	movs	r3, #4
 8006f9c:	e006      	b.n	8006fac <HAL_GPIO_DeInit+0xd4>
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e004      	b.n	8006fac <HAL_GPIO_DeInit+0xd4>
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	e002      	b.n	8006fac <HAL_GPIO_DeInit+0xd4>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e000      	b.n	8006fac <HAL_GPIO_DeInit+0xd4>
 8006faa:	2300      	movs	r3, #0
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	f002 0203 	and.w	r2, r2, #3
 8006fb2:	0092      	lsls	r2, r2, #2
 8006fb4:	4093      	lsls	r3, r2
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d132      	bne.n	8007022 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006fbc:	4b4a      	ldr	r3, [pc, #296]	; (80070e8 <HAL_GPIO_DeInit+0x210>)
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	43db      	mvns	r3, r3
 8006fc4:	4948      	ldr	r1, [pc, #288]	; (80070e8 <HAL_GPIO_DeInit+0x210>)
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006fca:	4b47      	ldr	r3, [pc, #284]	; (80070e8 <HAL_GPIO_DeInit+0x210>)
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	43db      	mvns	r3, r3
 8006fd2:	4945      	ldr	r1, [pc, #276]	; (80070e8 <HAL_GPIO_DeInit+0x210>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006fd8:	4b43      	ldr	r3, [pc, #268]	; (80070e8 <HAL_GPIO_DeInit+0x210>)
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	43db      	mvns	r3, r3
 8006fe0:	4941      	ldr	r1, [pc, #260]	; (80070e8 <HAL_GPIO_DeInit+0x210>)
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006fe6:	4b40      	ldr	r3, [pc, #256]	; (80070e8 <HAL_GPIO_DeInit+0x210>)
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	43db      	mvns	r3, r3
 8006fee:	493e      	ldr	r1, [pc, #248]	; (80070e8 <HAL_GPIO_DeInit+0x210>)
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	220f      	movs	r2, #15
 8006ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8007002:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007004:	4a2d      	ldr	r2, [pc, #180]	; (80070bc <HAL_GPIO_DeInit+0x1e4>)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	089b      	lsrs	r3, r3, #2
 800700a:	3302      	adds	r3, #2
 800700c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	43da      	mvns	r2, r3
 8007014:	4829      	ldr	r0, [pc, #164]	; (80070bc <HAL_GPIO_DeInit+0x1e4>)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	089b      	lsrs	r3, r3, #2
 800701a:	400a      	ands	r2, r1
 800701c:	3302      	adds	r3, #2
 800701e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	2103      	movs	r1, #3
 800702c:	fa01 f303 	lsl.w	r3, r1, r3
 8007030:	43db      	mvns	r3, r3
 8007032:	401a      	ands	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	08da      	lsrs	r2, r3, #3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3208      	adds	r2, #8
 8007040:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	220f      	movs	r2, #15
 800704e:	fa02 f303 	lsl.w	r3, r2, r3
 8007052:	43db      	mvns	r3, r3
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	08d2      	lsrs	r2, r2, #3
 8007058:	4019      	ands	r1, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3208      	adds	r2, #8
 800705e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	2103      	movs	r1, #3
 800706c:	fa01 f303 	lsl.w	r3, r1, r3
 8007070:	43db      	mvns	r3, r3
 8007072:	401a      	ands	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	2101      	movs	r1, #1
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	fa01 f303 	lsl.w	r3, r1, r3
 8007084:	43db      	mvns	r3, r3
 8007086:	401a      	ands	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	2103      	movs	r1, #3
 8007096:	fa01 f303 	lsl.w	r3, r1, r3
 800709a:	43db      	mvns	r3, r3
 800709c:	401a      	ands	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	3301      	adds	r3, #1
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2b0f      	cmp	r3, #15
 80070ac:	f67f af22 	bls.w	8006ef4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80070b0:	bf00      	nop
 80070b2:	371c      	adds	r7, #28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	40013800 	.word	0x40013800
 80070c0:	40020000 	.word	0x40020000
 80070c4:	40020400 	.word	0x40020400
 80070c8:	40020800 	.word	0x40020800
 80070cc:	40020c00 	.word	0x40020c00
 80070d0:	40021000 	.word	0x40021000
 80070d4:	40021400 	.word	0x40021400
 80070d8:	40021800 	.word	0x40021800
 80070dc:	40021c00 	.word	0x40021c00
 80070e0:	40022000 	.word	0x40022000
 80070e4:	40022400 	.word	0x40022400
 80070e8:	40013c00 	.word	0x40013c00

080070ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	460b      	mov	r3, r1
 80070f6:	807b      	strh	r3, [r7, #2]
 80070f8:	4613      	mov	r3, r2
 80070fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80070fc:	787b      	ldrb	r3, [r7, #1]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007102:	887a      	ldrh	r2, [r7, #2]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007108:	e003      	b.n	8007112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800710a:	887b      	ldrh	r3, [r7, #2]
 800710c:	041a      	lsls	r2, r3, #16
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	619a      	str	r2, [r3, #24]
}
 8007112:	bf00      	nop
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
	...

08007120 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800712a:	4b08      	ldr	r3, [pc, #32]	; (800714c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800712c:	695a      	ldr	r2, [r3, #20]
 800712e:	88fb      	ldrh	r3, [r7, #6]
 8007130:	4013      	ands	r3, r2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d006      	beq.n	8007144 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007136:	4a05      	ldr	r2, [pc, #20]	; (800714c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007138:	88fb      	ldrh	r3, [r7, #6]
 800713a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	4618      	mov	r0, r3
 8007140:	f7fa f9b0 	bl	80014a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007144:	bf00      	nop
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	40013c00 	.word	0x40013c00

08007150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e11f      	b.n	80073a2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d106      	bne.n	800717c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fc f9e2 	bl	8003540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2224      	movs	r2, #36	; 0x24
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0201 	bic.w	r2, r2, #1
 8007192:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80071b4:	f001 f8da 	bl	800836c <HAL_RCC_GetPCLK1Freq>
 80071b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	4a7b      	ldr	r2, [pc, #492]	; (80073ac <HAL_I2C_Init+0x25c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d807      	bhi.n	80071d4 <HAL_I2C_Init+0x84>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4a7a      	ldr	r2, [pc, #488]	; (80073b0 <HAL_I2C_Init+0x260>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	bf94      	ite	ls
 80071cc:	2301      	movls	r3, #1
 80071ce:	2300      	movhi	r3, #0
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	e006      	b.n	80071e2 <HAL_I2C_Init+0x92>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4a77      	ldr	r2, [pc, #476]	; (80073b4 <HAL_I2C_Init+0x264>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	bf94      	ite	ls
 80071dc:	2301      	movls	r3, #1
 80071de:	2300      	movhi	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e0db      	b.n	80073a2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4a72      	ldr	r2, [pc, #456]	; (80073b8 <HAL_I2C_Init+0x268>)
 80071ee:	fba2 2303 	umull	r2, r3, r2, r3
 80071f2:	0c9b      	lsrs	r3, r3, #18
 80071f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	430a      	orrs	r2, r1
 8007208:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	4a64      	ldr	r2, [pc, #400]	; (80073ac <HAL_I2C_Init+0x25c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d802      	bhi.n	8007224 <HAL_I2C_Init+0xd4>
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	3301      	adds	r3, #1
 8007222:	e009      	b.n	8007238 <HAL_I2C_Init+0xe8>
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800722a:	fb02 f303 	mul.w	r3, r2, r3
 800722e:	4a63      	ldr	r2, [pc, #396]	; (80073bc <HAL_I2C_Init+0x26c>)
 8007230:	fba2 2303 	umull	r2, r3, r2, r3
 8007234:	099b      	lsrs	r3, r3, #6
 8007236:	3301      	adds	r3, #1
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	6812      	ldr	r2, [r2, #0]
 800723c:	430b      	orrs	r3, r1
 800723e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800724a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	4956      	ldr	r1, [pc, #344]	; (80073ac <HAL_I2C_Init+0x25c>)
 8007254:	428b      	cmp	r3, r1
 8007256:	d80d      	bhi.n	8007274 <HAL_I2C_Init+0x124>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	1e59      	subs	r1, r3, #1
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	fbb1 f3f3 	udiv	r3, r1, r3
 8007266:	3301      	adds	r3, #1
 8007268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800726c:	2b04      	cmp	r3, #4
 800726e:	bf38      	it	cc
 8007270:	2304      	movcc	r3, #4
 8007272:	e04f      	b.n	8007314 <HAL_I2C_Init+0x1c4>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d111      	bne.n	80072a0 <HAL_I2C_Init+0x150>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	1e58      	subs	r0, r3, #1
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6859      	ldr	r1, [r3, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	440b      	add	r3, r1
 800728a:	fbb0 f3f3 	udiv	r3, r0, r3
 800728e:	3301      	adds	r3, #1
 8007290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007294:	2b00      	cmp	r3, #0
 8007296:	bf0c      	ite	eq
 8007298:	2301      	moveq	r3, #1
 800729a:	2300      	movne	r3, #0
 800729c:	b2db      	uxtb	r3, r3
 800729e:	e012      	b.n	80072c6 <HAL_I2C_Init+0x176>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	1e58      	subs	r0, r3, #1
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6859      	ldr	r1, [r3, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	440b      	add	r3, r1
 80072ae:	0099      	lsls	r1, r3, #2
 80072b0:	440b      	add	r3, r1
 80072b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80072b6:	3301      	adds	r3, #1
 80072b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072bc:	2b00      	cmp	r3, #0
 80072be:	bf0c      	ite	eq
 80072c0:	2301      	moveq	r3, #1
 80072c2:	2300      	movne	r3, #0
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <HAL_I2C_Init+0x17e>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e022      	b.n	8007314 <HAL_I2C_Init+0x1c4>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10e      	bne.n	80072f4 <HAL_I2C_Init+0x1a4>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	1e58      	subs	r0, r3, #1
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6859      	ldr	r1, [r3, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	440b      	add	r3, r1
 80072e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80072e8:	3301      	adds	r3, #1
 80072ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072f2:	e00f      	b.n	8007314 <HAL_I2C_Init+0x1c4>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	1e58      	subs	r0, r3, #1
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6859      	ldr	r1, [r3, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	440b      	add	r3, r1
 8007302:	0099      	lsls	r1, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	fbb0 f3f3 	udiv	r3, r0, r3
 800730a:	3301      	adds	r3, #1
 800730c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	6809      	ldr	r1, [r1, #0]
 8007318:	4313      	orrs	r3, r2
 800731a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69da      	ldr	r2, [r3, #28]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	431a      	orrs	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007342:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	6911      	ldr	r1, [r2, #16]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	68d2      	ldr	r2, [r2, #12]
 800734e:	4311      	orrs	r1, r2
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	6812      	ldr	r2, [r2, #0]
 8007354:	430b      	orrs	r3, r1
 8007356:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	695a      	ldr	r2, [r3, #20]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	431a      	orrs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2220      	movs	r2, #32
 800738e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	000186a0 	.word	0x000186a0
 80073b0:	001e847f 	.word	0x001e847f
 80073b4:	003d08ff 	.word	0x003d08ff
 80073b8:	431bde83 	.word	0x431bde83
 80073bc:	10624dd3 	.word	0x10624dd3

080073c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	d129      	bne.n	800742a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2224      	movs	r2, #36	; 0x24
 80073da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0201 	bic.w	r2, r2, #1
 80073ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0210 	bic.w	r2, r2, #16
 80073fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 0201 	orr.w	r2, r2, #1
 800741c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	e000      	b.n	800742c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800742a:	2302      	movs	r3, #2
  }
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007442:	2300      	movs	r3, #0
 8007444:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b20      	cmp	r3, #32
 8007450:	d12a      	bne.n	80074a8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2224      	movs	r2, #36	; 0x24
 8007456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0201 	bic.w	r2, r2, #1
 8007468:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007472:	89fb      	ldrh	r3, [r7, #14]
 8007474:	f023 030f 	bic.w	r3, r3, #15
 8007478:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	b29a      	uxth	r2, r3
 800747e:	89fb      	ldrh	r3, [r7, #14]
 8007480:	4313      	orrs	r3, r2
 8007482:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	89fa      	ldrh	r2, [r7, #14]
 800748a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0201 	orr.w	r2, r2, #1
 800749a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	e000      	b.n	80074aa <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80074a8:	2302      	movs	r3, #2
  }
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
	...

080074b8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e0bf      	b.n	800764a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d106      	bne.n	80074e4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7fc f898 	bl	8003614 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80074fa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6999      	ldr	r1, [r3, #24]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007510:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6899      	ldr	r1, [r3, #8]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	4b4a      	ldr	r3, [pc, #296]	; (8007654 <HAL_LTDC_Init+0x19c>)
 800752c:	400b      	ands	r3, r1
 800752e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	041b      	lsls	r3, r3, #16
 8007536:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6899      	ldr	r1, [r3, #8]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699a      	ldr	r2, [r3, #24]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68d9      	ldr	r1, [r3, #12]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	4b3e      	ldr	r3, [pc, #248]	; (8007654 <HAL_LTDC_Init+0x19c>)
 800755a:	400b      	ands	r3, r1
 800755c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	041b      	lsls	r3, r3, #16
 8007564:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68d9      	ldr	r1, [r3, #12]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a1a      	ldr	r2, [r3, #32]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	431a      	orrs	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6919      	ldr	r1, [r3, #16]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	4b33      	ldr	r3, [pc, #204]	; (8007654 <HAL_LTDC_Init+0x19c>)
 8007588:	400b      	ands	r3, r1
 800758a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	041b      	lsls	r3, r3, #16
 8007592:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6919      	ldr	r1, [r3, #16]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	431a      	orrs	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6959      	ldr	r1, [r3, #20]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	4b27      	ldr	r3, [pc, #156]	; (8007654 <HAL_LTDC_Init+0x19c>)
 80075b6:	400b      	ands	r3, r1
 80075b8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075be:	041b      	lsls	r3, r3, #16
 80075c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6959      	ldr	r1, [r3, #20]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075de:	021b      	lsls	r3, r3, #8
 80075e0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80075e8:	041b      	lsls	r3, r3, #16
 80075ea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80075fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4313      	orrs	r3, r2
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800760e:	431a      	orrs	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0206 	orr.w	r2, r2, #6
 8007626:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0201 	orr.w	r2, r2, #1
 8007636:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	f000f800 	.word	0xf000f800

08007658 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007658:	b5b0      	push	{r4, r5, r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800766a:	2b01      	cmp	r3, #1
 800766c:	d101      	bne.n	8007672 <HAL_LTDC_ConfigLayer+0x1a>
 800766e:	2302      	movs	r3, #2
 8007670:	e02c      	b.n	80076cc <HAL_LTDC_ConfigLayer+0x74>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2202      	movs	r2, #2
 800767e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2134      	movs	r1, #52	; 0x34
 8007688:	fb01 f303 	mul.w	r3, r1, r3
 800768c:	4413      	add	r3, r2
 800768e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4614      	mov	r4, r2
 8007696:	461d      	mov	r5, r3
 8007698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800769a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800769c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800769e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	68b9      	ldr	r1, [r7, #8]
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 f83b 	bl	8007728 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2201      	movs	r2, #1
 80076b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bdb0      	pop	{r4, r5, r7, pc}

080076d4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d101      	bne.n	80076ea <HAL_LTDC_EnableDither+0x16>
 80076e6:	2302      	movs	r3, #2
 80076e8:	e016      	b.n	8007718 <HAL_LTDC_EnableDither+0x44>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2202      	movs	r2, #2
 80076f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80076fa:	4b0a      	ldr	r3, [pc, #40]	; (8007724 <HAL_LTDC_EnableDither+0x50>)
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	4a09      	ldr	r2, [pc, #36]	; (8007724 <HAL_LTDC_EnableDither+0x50>)
 8007700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007704:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	40016800 	.word	0x40016800

08007728 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007728:	b480      	push	{r7}
 800772a:	b089      	sub	sp, #36	; 0x24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	0c1b      	lsrs	r3, r3, #16
 8007740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007744:	4413      	add	r3, r2
 8007746:	041b      	lsls	r3, r3, #16
 8007748:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	01db      	lsls	r3, r3, #7
 8007754:	4413      	add	r3, r2
 8007756:	3384      	adds	r3, #132	; 0x84
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	6812      	ldr	r2, [r2, #0]
 800775e:	4611      	mov	r1, r2
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	01d2      	lsls	r2, r2, #7
 8007764:	440a      	add	r2, r1
 8007766:	3284      	adds	r2, #132	; 0x84
 8007768:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800776c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	0c1b      	lsrs	r3, r3, #16
 800777a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800777e:	4413      	add	r3, r2
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4619      	mov	r1, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	01db      	lsls	r3, r3, #7
 800778c:	440b      	add	r3, r1
 800778e:	3384      	adds	r3, #132	; 0x84
 8007790:	4619      	mov	r1, r3
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	4313      	orrs	r3, r2
 8007796:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077a6:	4413      	add	r3, r2
 80077a8:	041b      	lsls	r3, r3, #16
 80077aa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	01db      	lsls	r3, r3, #7
 80077b6:	4413      	add	r3, r2
 80077b8:	3384      	adds	r3, #132	; 0x84
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	6812      	ldr	r2, [r2, #0]
 80077c0:	4611      	mov	r1, r2
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	01d2      	lsls	r2, r2, #7
 80077c6:	440a      	add	r2, r1
 80077c8:	3284      	adds	r2, #132	; 0x84
 80077ca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80077ce:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077de:	4413      	add	r3, r2
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4619      	mov	r1, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	01db      	lsls	r3, r3, #7
 80077ec:	440b      	add	r3, r1
 80077ee:	3384      	adds	r3, #132	; 0x84
 80077f0:	4619      	mov	r1, r3
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	01db      	lsls	r3, r3, #7
 8007802:	4413      	add	r3, r2
 8007804:	3384      	adds	r3, #132	; 0x84
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	6812      	ldr	r2, [r2, #0]
 800780c:	4611      	mov	r1, r2
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	01d2      	lsls	r2, r2, #7
 8007812:	440a      	add	r2, r1
 8007814:	3284      	adds	r2, #132	; 0x84
 8007816:	f023 0307 	bic.w	r3, r3, #7
 800781a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	01db      	lsls	r3, r3, #7
 8007826:	4413      	add	r3, r2
 8007828:	3384      	adds	r3, #132	; 0x84
 800782a:	461a      	mov	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007838:	021b      	lsls	r3, r3, #8
 800783a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007842:	041b      	lsls	r3, r3, #16
 8007844:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	061b      	lsls	r3, r3, #24
 800784c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	01db      	lsls	r3, r3, #7
 8007858:	4413      	add	r3, r2
 800785a:	3384      	adds	r3, #132	; 0x84
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	01db      	lsls	r3, r3, #7
 8007868:	4413      	add	r3, r2
 800786a:	3384      	adds	r3, #132	; 0x84
 800786c:	461a      	mov	r2, r3
 800786e:	2300      	movs	r3, #0
 8007870:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007878:	461a      	mov	r2, r3
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	431a      	orrs	r2, r3
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	431a      	orrs	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4619      	mov	r1, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	01db      	lsls	r3, r3, #7
 800788c:	440b      	add	r3, r1
 800788e:	3384      	adds	r3, #132	; 0x84
 8007890:	4619      	mov	r1, r3
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	4313      	orrs	r3, r2
 8007896:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	01db      	lsls	r3, r3, #7
 80078a2:	4413      	add	r3, r2
 80078a4:	3384      	adds	r3, #132	; 0x84
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	4611      	mov	r1, r2
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	01d2      	lsls	r2, r2, #7
 80078b2:	440a      	add	r2, r1
 80078b4:	3284      	adds	r2, #132	; 0x84
 80078b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80078ba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	01db      	lsls	r3, r3, #7
 80078c6:	4413      	add	r3, r2
 80078c8:	3384      	adds	r3, #132	; 0x84
 80078ca:	461a      	mov	r2, r3
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	01db      	lsls	r3, r3, #7
 80078dc:	4413      	add	r3, r2
 80078de:	3384      	adds	r3, #132	; 0x84
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	6812      	ldr	r2, [r2, #0]
 80078e6:	4611      	mov	r1, r2
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	01d2      	lsls	r2, r2, #7
 80078ec:	440a      	add	r2, r1
 80078ee:	3284      	adds	r2, #132	; 0x84
 80078f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80078f4:	f023 0307 	bic.w	r3, r3, #7
 80078f8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	69da      	ldr	r2, [r3, #28]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	68f9      	ldr	r1, [r7, #12]
 8007904:	6809      	ldr	r1, [r1, #0]
 8007906:	4608      	mov	r0, r1
 8007908:	6879      	ldr	r1, [r7, #4]
 800790a:	01c9      	lsls	r1, r1, #7
 800790c:	4401      	add	r1, r0
 800790e:	3184      	adds	r1, #132	; 0x84
 8007910:	4313      	orrs	r3, r2
 8007912:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	01db      	lsls	r3, r3, #7
 800791e:	4413      	add	r3, r2
 8007920:	3384      	adds	r3, #132	; 0x84
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	461a      	mov	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	01db      	lsls	r3, r3, #7
 800792e:	4413      	add	r3, r2
 8007930:	3384      	adds	r3, #132	; 0x84
 8007932:	461a      	mov	r2, r3
 8007934:	2300      	movs	r3, #0
 8007936:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	01db      	lsls	r3, r3, #7
 8007942:	4413      	add	r3, r2
 8007944:	3384      	adds	r3, #132	; 0x84
 8007946:	461a      	mov	r2, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d102      	bne.n	800795c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007956:	2304      	movs	r3, #4
 8007958:	61fb      	str	r3, [r7, #28]
 800795a:	e01b      	b.n	8007994 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d102      	bne.n	800796a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007964:	2303      	movs	r3, #3
 8007966:	61fb      	str	r3, [r7, #28]
 8007968:	e014      	b.n	8007994 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	2b04      	cmp	r3, #4
 8007970:	d00b      	beq.n	800798a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007976:	2b02      	cmp	r3, #2
 8007978:	d007      	beq.n	800798a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800797e:	2b03      	cmp	r3, #3
 8007980:	d003      	beq.n	800798a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007986:	2b07      	cmp	r3, #7
 8007988:	d102      	bne.n	8007990 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800798a:	2302      	movs	r3, #2
 800798c:	61fb      	str	r3, [r7, #28]
 800798e:	e001      	b.n	8007994 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007990:	2301      	movs	r3, #1
 8007992:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	01db      	lsls	r3, r3, #7
 800799e:	4413      	add	r3, r2
 80079a0:	3384      	adds	r3, #132	; 0x84
 80079a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	6812      	ldr	r2, [r2, #0]
 80079a8:	4611      	mov	r1, r2
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	01d2      	lsls	r2, r2, #7
 80079ae:	440a      	add	r2, r1
 80079b0:	3284      	adds	r2, #132	; 0x84
 80079b2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80079b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	fb02 f303 	mul.w	r3, r2, r3
 80079c2:	041a      	lsls	r2, r3, #16
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	6859      	ldr	r1, [r3, #4]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	1acb      	subs	r3, r1, r3
 80079ce:	69f9      	ldr	r1, [r7, #28]
 80079d0:	fb01 f303 	mul.w	r3, r1, r3
 80079d4:	3303      	adds	r3, #3
 80079d6:	68f9      	ldr	r1, [r7, #12]
 80079d8:	6809      	ldr	r1, [r1, #0]
 80079da:	4608      	mov	r0, r1
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	01c9      	lsls	r1, r1, #7
 80079e0:	4401      	add	r1, r0
 80079e2:	3184      	adds	r1, #132	; 0x84
 80079e4:	4313      	orrs	r3, r2
 80079e6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	461a      	mov	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	01db      	lsls	r3, r3, #7
 80079f2:	4413      	add	r3, r2
 80079f4:	3384      	adds	r3, #132	; 0x84
 80079f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	6812      	ldr	r2, [r2, #0]
 80079fc:	4611      	mov	r1, r2
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	01d2      	lsls	r2, r2, #7
 8007a02:	440a      	add	r2, r1
 8007a04:	3284      	adds	r2, #132	; 0x84
 8007a06:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a0a:	f023 0307 	bic.w	r3, r3, #7
 8007a0e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	01db      	lsls	r3, r3, #7
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3384      	adds	r3, #132	; 0x84
 8007a1e:	461a      	mov	r2, r3
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a24:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	01db      	lsls	r3, r3, #7
 8007a30:	4413      	add	r3, r2
 8007a32:	3384      	adds	r3, #132	; 0x84
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	6812      	ldr	r2, [r2, #0]
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	01d2      	lsls	r2, r2, #7
 8007a40:	440a      	add	r2, r1
 8007a42:	3284      	adds	r2, #132	; 0x84
 8007a44:	f043 0301 	orr.w	r3, r3, #1
 8007a48:	6013      	str	r3, [r2, #0]
}
 8007a4a:	bf00      	nop
 8007a4c:	3724      	adds	r7, #36	; 0x24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
	...

08007a58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007a62:	2300      	movs	r3, #0
 8007a64:	603b      	str	r3, [r7, #0]
 8007a66:	4b20      	ldr	r3, [pc, #128]	; (8007ae8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6a:	4a1f      	ldr	r2, [pc, #124]	; (8007ae8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a70:	6413      	str	r3, [r2, #64]	; 0x40
 8007a72:	4b1d      	ldr	r3, [pc, #116]	; (8007ae8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a7a:	603b      	str	r3, [r7, #0]
 8007a7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007a7e:	4b1b      	ldr	r3, [pc, #108]	; (8007aec <HAL_PWREx_EnableOverDrive+0x94>)
 8007a80:	2201      	movs	r2, #1
 8007a82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a84:	f7fd fcae 	bl	80053e4 <HAL_GetTick>
 8007a88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007a8a:	e009      	b.n	8007aa0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007a8c:	f7fd fcaa 	bl	80053e4 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a9a:	d901      	bls.n	8007aa0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e01f      	b.n	8007ae0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007aa0:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aac:	d1ee      	bne.n	8007a8c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007aae:	4b11      	ldr	r3, [pc, #68]	; (8007af4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ab4:	f7fd fc96 	bl	80053e4 <HAL_GetTick>
 8007ab8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007aba:	e009      	b.n	8007ad0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007abc:	f7fd fc92 	bl	80053e4 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007aca:	d901      	bls.n	8007ad0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e007      	b.n	8007ae0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007ad0:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007adc:	d1ee      	bne.n	8007abc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	40023800 	.word	0x40023800
 8007aec:	420e0040 	.word	0x420e0040
 8007af0:	40007000 	.word	0x40007000
 8007af4:	420e0044 	.word	0x420e0044

08007af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e25b      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d075      	beq.n	8007c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b16:	4ba3      	ldr	r3, [pc, #652]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f003 030c 	and.w	r3, r3, #12
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d00c      	beq.n	8007b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b22:	4ba0      	ldr	r3, [pc, #640]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b2a:	2b08      	cmp	r3, #8
 8007b2c:	d112      	bne.n	8007b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b2e:	4b9d      	ldr	r3, [pc, #628]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b3a:	d10b      	bne.n	8007b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b3c:	4b99      	ldr	r3, [pc, #612]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d05b      	beq.n	8007c00 <HAL_RCC_OscConfig+0x108>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d157      	bne.n	8007c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e236      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b5c:	d106      	bne.n	8007b6c <HAL_RCC_OscConfig+0x74>
 8007b5e:	4b91      	ldr	r3, [pc, #580]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a90      	ldr	r2, [pc, #576]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	e01d      	b.n	8007ba8 <HAL_RCC_OscConfig+0xb0>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b74:	d10c      	bne.n	8007b90 <HAL_RCC_OscConfig+0x98>
 8007b76:	4b8b      	ldr	r3, [pc, #556]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a8a      	ldr	r2, [pc, #552]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	4b88      	ldr	r3, [pc, #544]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a87      	ldr	r2, [pc, #540]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b8c:	6013      	str	r3, [r2, #0]
 8007b8e:	e00b      	b.n	8007ba8 <HAL_RCC_OscConfig+0xb0>
 8007b90:	4b84      	ldr	r3, [pc, #528]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a83      	ldr	r2, [pc, #524]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	4b81      	ldr	r3, [pc, #516]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a80      	ldr	r2, [pc, #512]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d013      	beq.n	8007bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bb0:	f7fd fc18 	bl	80053e4 <HAL_GetTick>
 8007bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bb6:	e008      	b.n	8007bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007bb8:	f7fd fc14 	bl	80053e4 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b64      	cmp	r3, #100	; 0x64
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e1fb      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bca:	4b76      	ldr	r3, [pc, #472]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0f0      	beq.n	8007bb8 <HAL_RCC_OscConfig+0xc0>
 8007bd6:	e014      	b.n	8007c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bd8:	f7fd fc04 	bl	80053e4 <HAL_GetTick>
 8007bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bde:	e008      	b.n	8007bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007be0:	f7fd fc00 	bl	80053e4 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	2b64      	cmp	r3, #100	; 0x64
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e1e7      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bf2:	4b6c      	ldr	r3, [pc, #432]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1f0      	bne.n	8007be0 <HAL_RCC_OscConfig+0xe8>
 8007bfe:	e000      	b.n	8007c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d063      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c0e:	4b65      	ldr	r3, [pc, #404]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 030c 	and.w	r3, r3, #12
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00b      	beq.n	8007c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c1a:	4b62      	ldr	r3, [pc, #392]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c22:	2b08      	cmp	r3, #8
 8007c24:	d11c      	bne.n	8007c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c26:	4b5f      	ldr	r3, [pc, #380]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d116      	bne.n	8007c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c32:	4b5c      	ldr	r3, [pc, #368]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d005      	beq.n	8007c4a <HAL_RCC_OscConfig+0x152>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d001      	beq.n	8007c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e1bb      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c4a:	4b56      	ldr	r3, [pc, #344]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	4952      	ldr	r1, [pc, #328]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c5e:	e03a      	b.n	8007cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d020      	beq.n	8007caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c68:	4b4f      	ldr	r3, [pc, #316]	; (8007da8 <HAL_RCC_OscConfig+0x2b0>)
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c6e:	f7fd fbb9 	bl	80053e4 <HAL_GetTick>
 8007c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c74:	e008      	b.n	8007c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c76:	f7fd fbb5 	bl	80053e4 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d901      	bls.n	8007c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e19c      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c88:	4b46      	ldr	r3, [pc, #280]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0f0      	beq.n	8007c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c94:	4b43      	ldr	r3, [pc, #268]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	4940      	ldr	r1, [pc, #256]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	600b      	str	r3, [r1, #0]
 8007ca8:	e015      	b.n	8007cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007caa:	4b3f      	ldr	r3, [pc, #252]	; (8007da8 <HAL_RCC_OscConfig+0x2b0>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb0:	f7fd fb98 	bl	80053e4 <HAL_GetTick>
 8007cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cb6:	e008      	b.n	8007cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cb8:	f7fd fb94 	bl	80053e4 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d901      	bls.n	8007cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e17b      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cca:	4b36      	ldr	r3, [pc, #216]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1f0      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0308 	and.w	r3, r3, #8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d030      	beq.n	8007d44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d016      	beq.n	8007d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cea:	4b30      	ldr	r3, [pc, #192]	; (8007dac <HAL_RCC_OscConfig+0x2b4>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf0:	f7fd fb78 	bl	80053e4 <HAL_GetTick>
 8007cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cf6:	e008      	b.n	8007d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cf8:	f7fd fb74 	bl	80053e4 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e15b      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d0a:	4b26      	ldr	r3, [pc, #152]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0f0      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x200>
 8007d16:	e015      	b.n	8007d44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d18:	4b24      	ldr	r3, [pc, #144]	; (8007dac <HAL_RCC_OscConfig+0x2b4>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d1e:	f7fd fb61 	bl	80053e4 <HAL_GetTick>
 8007d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d24:	e008      	b.n	8007d38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d26:	f7fd fb5d 	bl	80053e4 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d901      	bls.n	8007d38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e144      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d38:	4b1a      	ldr	r3, [pc, #104]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1f0      	bne.n	8007d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 80a0 	beq.w	8007e92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d52:	2300      	movs	r3, #0
 8007d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d56:	4b13      	ldr	r3, [pc, #76]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10f      	bne.n	8007d82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d62:	2300      	movs	r3, #0
 8007d64:	60bb      	str	r3, [r7, #8]
 8007d66:	4b0f      	ldr	r3, [pc, #60]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6a:	4a0e      	ldr	r2, [pc, #56]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d70:	6413      	str	r3, [r2, #64]	; 0x40
 8007d72:	4b0c      	ldr	r3, [pc, #48]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d7a:	60bb      	str	r3, [r7, #8]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d82:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <HAL_RCC_OscConfig+0x2b8>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d121      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d8e:	4b08      	ldr	r3, [pc, #32]	; (8007db0 <HAL_RCC_OscConfig+0x2b8>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a07      	ldr	r2, [pc, #28]	; (8007db0 <HAL_RCC_OscConfig+0x2b8>)
 8007d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d9a:	f7fd fb23 	bl	80053e4 <HAL_GetTick>
 8007d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007da0:	e011      	b.n	8007dc6 <HAL_RCC_OscConfig+0x2ce>
 8007da2:	bf00      	nop
 8007da4:	40023800 	.word	0x40023800
 8007da8:	42470000 	.word	0x42470000
 8007dac:	42470e80 	.word	0x42470e80
 8007db0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007db4:	f7fd fb16 	bl	80053e4 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e0fd      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dc6:	4b81      	ldr	r3, [pc, #516]	; (8007fcc <HAL_RCC_OscConfig+0x4d4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0f0      	beq.n	8007db4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d106      	bne.n	8007de8 <HAL_RCC_OscConfig+0x2f0>
 8007dda:	4b7d      	ldr	r3, [pc, #500]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dde:	4a7c      	ldr	r2, [pc, #496]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007de0:	f043 0301 	orr.w	r3, r3, #1
 8007de4:	6713      	str	r3, [r2, #112]	; 0x70
 8007de6:	e01c      	b.n	8007e22 <HAL_RCC_OscConfig+0x32a>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	2b05      	cmp	r3, #5
 8007dee:	d10c      	bne.n	8007e0a <HAL_RCC_OscConfig+0x312>
 8007df0:	4b77      	ldr	r3, [pc, #476]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df4:	4a76      	ldr	r2, [pc, #472]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007df6:	f043 0304 	orr.w	r3, r3, #4
 8007dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8007dfc:	4b74      	ldr	r3, [pc, #464]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e00:	4a73      	ldr	r2, [pc, #460]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007e02:	f043 0301 	orr.w	r3, r3, #1
 8007e06:	6713      	str	r3, [r2, #112]	; 0x70
 8007e08:	e00b      	b.n	8007e22 <HAL_RCC_OscConfig+0x32a>
 8007e0a:	4b71      	ldr	r3, [pc, #452]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0e:	4a70      	ldr	r2, [pc, #448]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007e10:	f023 0301 	bic.w	r3, r3, #1
 8007e14:	6713      	str	r3, [r2, #112]	; 0x70
 8007e16:	4b6e      	ldr	r3, [pc, #440]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1a:	4a6d      	ldr	r2, [pc, #436]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007e1c:	f023 0304 	bic.w	r3, r3, #4
 8007e20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d015      	beq.n	8007e56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e2a:	f7fd fadb 	bl	80053e4 <HAL_GetTick>
 8007e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e30:	e00a      	b.n	8007e48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e32:	f7fd fad7 	bl	80053e4 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d901      	bls.n	8007e48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e0bc      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e48:	4b61      	ldr	r3, [pc, #388]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d0ee      	beq.n	8007e32 <HAL_RCC_OscConfig+0x33a>
 8007e54:	e014      	b.n	8007e80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e56:	f7fd fac5 	bl	80053e4 <HAL_GetTick>
 8007e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e5c:	e00a      	b.n	8007e74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e5e:	f7fd fac1 	bl	80053e4 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d901      	bls.n	8007e74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e0a6      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e74:	4b56      	ldr	r3, [pc, #344]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1ee      	bne.n	8007e5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d105      	bne.n	8007e92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e86:	4b52      	ldr	r3, [pc, #328]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	4a51      	ldr	r2, [pc, #324]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 8092 	beq.w	8007fc0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e9c:	4b4c      	ldr	r3, [pc, #304]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f003 030c 	and.w	r3, r3, #12
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d05c      	beq.n	8007f62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d141      	bne.n	8007f34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eb0:	4b48      	ldr	r3, [pc, #288]	; (8007fd4 <HAL_RCC_OscConfig+0x4dc>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eb6:	f7fd fa95 	bl	80053e4 <HAL_GetTick>
 8007eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ebc:	e008      	b.n	8007ed0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ebe:	f7fd fa91 	bl	80053e4 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d901      	bls.n	8007ed0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e078      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ed0:	4b3f      	ldr	r3, [pc, #252]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1f0      	bne.n	8007ebe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	69da      	ldr	r2, [r3, #28]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	019b      	lsls	r3, r3, #6
 8007eec:	431a      	orrs	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	041b      	lsls	r3, r3, #16
 8007ef8:	431a      	orrs	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	061b      	lsls	r3, r3, #24
 8007f00:	4933      	ldr	r1, [pc, #204]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f06:	4b33      	ldr	r3, [pc, #204]	; (8007fd4 <HAL_RCC_OscConfig+0x4dc>)
 8007f08:	2201      	movs	r2, #1
 8007f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f0c:	f7fd fa6a 	bl	80053e4 <HAL_GetTick>
 8007f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f12:	e008      	b.n	8007f26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f14:	f7fd fa66 	bl	80053e4 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d901      	bls.n	8007f26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e04d      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f26:	4b2a      	ldr	r3, [pc, #168]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0f0      	beq.n	8007f14 <HAL_RCC_OscConfig+0x41c>
 8007f32:	e045      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f34:	4b27      	ldr	r3, [pc, #156]	; (8007fd4 <HAL_RCC_OscConfig+0x4dc>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f3a:	f7fd fa53 	bl	80053e4 <HAL_GetTick>
 8007f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f40:	e008      	b.n	8007f54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f42:	f7fd fa4f 	bl	80053e4 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d901      	bls.n	8007f54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e036      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f54:	4b1e      	ldr	r3, [pc, #120]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1f0      	bne.n	8007f42 <HAL_RCC_OscConfig+0x44a>
 8007f60:	e02e      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d101      	bne.n	8007f6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e029      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007f6e:	4b18      	ldr	r3, [pc, #96]	; (8007fd0 <HAL_RCC_OscConfig+0x4d8>)
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d11c      	bne.n	8007fbc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d115      	bne.n	8007fbc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f96:	4013      	ands	r3, r2
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d10d      	bne.n	8007fbc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d106      	bne.n	8007fbc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d001      	beq.n	8007fc0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e000      	b.n	8007fc2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	40007000 	.word	0x40007000
 8007fd0:	40023800 	.word	0x40023800
 8007fd4:	42470060 	.word	0x42470060

08007fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e0cc      	b.n	8008186 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007fec:	4b68      	ldr	r3, [pc, #416]	; (8008190 <HAL_RCC_ClockConfig+0x1b8>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 030f 	and.w	r3, r3, #15
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d90c      	bls.n	8008014 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ffa:	4b65      	ldr	r3, [pc, #404]	; (8008190 <HAL_RCC_ClockConfig+0x1b8>)
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	b2d2      	uxtb	r2, r2
 8008000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008002:	4b63      	ldr	r3, [pc, #396]	; (8008190 <HAL_RCC_ClockConfig+0x1b8>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 030f 	and.w	r3, r3, #15
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d001      	beq.n	8008014 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e0b8      	b.n	8008186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d020      	beq.n	8008062 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b00      	cmp	r3, #0
 800802a:	d005      	beq.n	8008038 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800802c:	4b59      	ldr	r3, [pc, #356]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	4a58      	ldr	r2, [pc, #352]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 8008032:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008036:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0308 	and.w	r3, r3, #8
 8008040:	2b00      	cmp	r3, #0
 8008042:	d005      	beq.n	8008050 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008044:	4b53      	ldr	r3, [pc, #332]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	4a52      	ldr	r2, [pc, #328]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 800804a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800804e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008050:	4b50      	ldr	r3, [pc, #320]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	494d      	ldr	r1, [pc, #308]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 800805e:	4313      	orrs	r3, r2
 8008060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d044      	beq.n	80080f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d107      	bne.n	8008086 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008076:	4b47      	ldr	r3, [pc, #284]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d119      	bne.n	80080b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e07f      	b.n	8008186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	2b02      	cmp	r3, #2
 800808c:	d003      	beq.n	8008096 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008092:	2b03      	cmp	r3, #3
 8008094:	d107      	bne.n	80080a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008096:	4b3f      	ldr	r3, [pc, #252]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d109      	bne.n	80080b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e06f      	b.n	8008186 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080a6:	4b3b      	ldr	r3, [pc, #236]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e067      	b.n	8008186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080b6:	4b37      	ldr	r3, [pc, #220]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f023 0203 	bic.w	r2, r3, #3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	4934      	ldr	r1, [pc, #208]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080c8:	f7fd f98c 	bl	80053e4 <HAL_GetTick>
 80080cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ce:	e00a      	b.n	80080e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080d0:	f7fd f988 	bl	80053e4 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	f241 3288 	movw	r2, #5000	; 0x1388
 80080de:	4293      	cmp	r3, r2
 80080e0:	d901      	bls.n	80080e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e04f      	b.n	8008186 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080e6:	4b2b      	ldr	r3, [pc, #172]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f003 020c 	and.w	r2, r3, #12
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d1eb      	bne.n	80080d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080f8:	4b25      	ldr	r3, [pc, #148]	; (8008190 <HAL_RCC_ClockConfig+0x1b8>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 030f 	and.w	r3, r3, #15
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	429a      	cmp	r2, r3
 8008104:	d20c      	bcs.n	8008120 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008106:	4b22      	ldr	r3, [pc, #136]	; (8008190 <HAL_RCC_ClockConfig+0x1b8>)
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	b2d2      	uxtb	r2, r2
 800810c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800810e:	4b20      	ldr	r3, [pc, #128]	; (8008190 <HAL_RCC_ClockConfig+0x1b8>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 030f 	and.w	r3, r3, #15
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	429a      	cmp	r2, r3
 800811a:	d001      	beq.n	8008120 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e032      	b.n	8008186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b00      	cmp	r3, #0
 800812a:	d008      	beq.n	800813e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800812c:	4b19      	ldr	r3, [pc, #100]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	4916      	ldr	r1, [pc, #88]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 800813a:	4313      	orrs	r3, r2
 800813c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	2b00      	cmp	r3, #0
 8008148:	d009      	beq.n	800815e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800814a:	4b12      	ldr	r3, [pc, #72]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	490e      	ldr	r1, [pc, #56]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 800815a:	4313      	orrs	r3, r2
 800815c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800815e:	f000 f821 	bl	80081a4 <HAL_RCC_GetSysClockFreq>
 8008162:	4601      	mov	r1, r0
 8008164:	4b0b      	ldr	r3, [pc, #44]	; (8008194 <HAL_RCC_ClockConfig+0x1bc>)
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	091b      	lsrs	r3, r3, #4
 800816a:	f003 030f 	and.w	r3, r3, #15
 800816e:	4a0a      	ldr	r2, [pc, #40]	; (8008198 <HAL_RCC_ClockConfig+0x1c0>)
 8008170:	5cd3      	ldrb	r3, [r2, r3]
 8008172:	fa21 f303 	lsr.w	r3, r1, r3
 8008176:	4a09      	ldr	r2, [pc, #36]	; (800819c <HAL_RCC_ClockConfig+0x1c4>)
 8008178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800817a:	4b09      	ldr	r3, [pc, #36]	; (80081a0 <HAL_RCC_ClockConfig+0x1c8>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4618      	mov	r0, r3
 8008180:	f7fd f8ec 	bl	800535c <HAL_InitTick>

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	40023c00 	.word	0x40023c00
 8008194:	40023800 	.word	0x40023800
 8008198:	0800eb54 	.word	0x0800eb54
 800819c:	20000004 	.word	0x20000004
 80081a0:	20000060 	.word	0x20000060

080081a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	607b      	str	r3, [r7, #4]
 80081ae:	2300      	movs	r3, #0
 80081b0:	60fb      	str	r3, [r7, #12]
 80081b2:	2300      	movs	r3, #0
 80081b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081ba:	4b63      	ldr	r3, [pc, #396]	; (8008348 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f003 030c 	and.w	r3, r3, #12
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d007      	beq.n	80081d6 <HAL_RCC_GetSysClockFreq+0x32>
 80081c6:	2b08      	cmp	r3, #8
 80081c8:	d008      	beq.n	80081dc <HAL_RCC_GetSysClockFreq+0x38>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f040 80b4 	bne.w	8008338 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081d0:	4b5e      	ldr	r3, [pc, #376]	; (800834c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80081d2:	60bb      	str	r3, [r7, #8]
       break;
 80081d4:	e0b3      	b.n	800833e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081d6:	4b5e      	ldr	r3, [pc, #376]	; (8008350 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80081d8:	60bb      	str	r3, [r7, #8]
      break;
 80081da:	e0b0      	b.n	800833e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081dc:	4b5a      	ldr	r3, [pc, #360]	; (8008348 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081e6:	4b58      	ldr	r3, [pc, #352]	; (8008348 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d04a      	beq.n	8008288 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081f2:	4b55      	ldr	r3, [pc, #340]	; (8008348 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	099b      	lsrs	r3, r3, #6
 80081f8:	f04f 0400 	mov.w	r4, #0
 80081fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008200:	f04f 0200 	mov.w	r2, #0
 8008204:	ea03 0501 	and.w	r5, r3, r1
 8008208:	ea04 0602 	and.w	r6, r4, r2
 800820c:	4629      	mov	r1, r5
 800820e:	4632      	mov	r2, r6
 8008210:	f04f 0300 	mov.w	r3, #0
 8008214:	f04f 0400 	mov.w	r4, #0
 8008218:	0154      	lsls	r4, r2, #5
 800821a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800821e:	014b      	lsls	r3, r1, #5
 8008220:	4619      	mov	r1, r3
 8008222:	4622      	mov	r2, r4
 8008224:	1b49      	subs	r1, r1, r5
 8008226:	eb62 0206 	sbc.w	r2, r2, r6
 800822a:	f04f 0300 	mov.w	r3, #0
 800822e:	f04f 0400 	mov.w	r4, #0
 8008232:	0194      	lsls	r4, r2, #6
 8008234:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008238:	018b      	lsls	r3, r1, #6
 800823a:	1a5b      	subs	r3, r3, r1
 800823c:	eb64 0402 	sbc.w	r4, r4, r2
 8008240:	f04f 0100 	mov.w	r1, #0
 8008244:	f04f 0200 	mov.w	r2, #0
 8008248:	00e2      	lsls	r2, r4, #3
 800824a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800824e:	00d9      	lsls	r1, r3, #3
 8008250:	460b      	mov	r3, r1
 8008252:	4614      	mov	r4, r2
 8008254:	195b      	adds	r3, r3, r5
 8008256:	eb44 0406 	adc.w	r4, r4, r6
 800825a:	f04f 0100 	mov.w	r1, #0
 800825e:	f04f 0200 	mov.w	r2, #0
 8008262:	0262      	lsls	r2, r4, #9
 8008264:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008268:	0259      	lsls	r1, r3, #9
 800826a:	460b      	mov	r3, r1
 800826c:	4614      	mov	r4, r2
 800826e:	4618      	mov	r0, r3
 8008270:	4621      	mov	r1, r4
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f04f 0400 	mov.w	r4, #0
 8008278:	461a      	mov	r2, r3
 800827a:	4623      	mov	r3, r4
 800827c:	f7f8 fcbc 	bl	8000bf8 <__aeabi_uldivmod>
 8008280:	4603      	mov	r3, r0
 8008282:	460c      	mov	r4, r1
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	e049      	b.n	800831c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008288:	4b2f      	ldr	r3, [pc, #188]	; (8008348 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	099b      	lsrs	r3, r3, #6
 800828e:	f04f 0400 	mov.w	r4, #0
 8008292:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008296:	f04f 0200 	mov.w	r2, #0
 800829a:	ea03 0501 	and.w	r5, r3, r1
 800829e:	ea04 0602 	and.w	r6, r4, r2
 80082a2:	4629      	mov	r1, r5
 80082a4:	4632      	mov	r2, r6
 80082a6:	f04f 0300 	mov.w	r3, #0
 80082aa:	f04f 0400 	mov.w	r4, #0
 80082ae:	0154      	lsls	r4, r2, #5
 80082b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80082b4:	014b      	lsls	r3, r1, #5
 80082b6:	4619      	mov	r1, r3
 80082b8:	4622      	mov	r2, r4
 80082ba:	1b49      	subs	r1, r1, r5
 80082bc:	eb62 0206 	sbc.w	r2, r2, r6
 80082c0:	f04f 0300 	mov.w	r3, #0
 80082c4:	f04f 0400 	mov.w	r4, #0
 80082c8:	0194      	lsls	r4, r2, #6
 80082ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80082ce:	018b      	lsls	r3, r1, #6
 80082d0:	1a5b      	subs	r3, r3, r1
 80082d2:	eb64 0402 	sbc.w	r4, r4, r2
 80082d6:	f04f 0100 	mov.w	r1, #0
 80082da:	f04f 0200 	mov.w	r2, #0
 80082de:	00e2      	lsls	r2, r4, #3
 80082e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80082e4:	00d9      	lsls	r1, r3, #3
 80082e6:	460b      	mov	r3, r1
 80082e8:	4614      	mov	r4, r2
 80082ea:	195b      	adds	r3, r3, r5
 80082ec:	eb44 0406 	adc.w	r4, r4, r6
 80082f0:	f04f 0100 	mov.w	r1, #0
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	02a2      	lsls	r2, r4, #10
 80082fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80082fe:	0299      	lsls	r1, r3, #10
 8008300:	460b      	mov	r3, r1
 8008302:	4614      	mov	r4, r2
 8008304:	4618      	mov	r0, r3
 8008306:	4621      	mov	r1, r4
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f04f 0400 	mov.w	r4, #0
 800830e:	461a      	mov	r2, r3
 8008310:	4623      	mov	r3, r4
 8008312:	f7f8 fc71 	bl	8000bf8 <__aeabi_uldivmod>
 8008316:	4603      	mov	r3, r0
 8008318:	460c      	mov	r4, r1
 800831a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800831c:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	0c1b      	lsrs	r3, r3, #16
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	3301      	adds	r3, #1
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	fbb2 f3f3 	udiv	r3, r2, r3
 8008334:	60bb      	str	r3, [r7, #8]
      break;
 8008336:	e002      	b.n	800833e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008338:	4b04      	ldr	r3, [pc, #16]	; (800834c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800833a:	60bb      	str	r3, [r7, #8]
      break;
 800833c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800833e:	68bb      	ldr	r3, [r7, #8]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008348:	40023800 	.word	0x40023800
 800834c:	00f42400 	.word	0x00f42400
 8008350:	007a1200 	.word	0x007a1200

08008354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008358:	4b03      	ldr	r3, [pc, #12]	; (8008368 <HAL_RCC_GetHCLKFreq+0x14>)
 800835a:	681b      	ldr	r3, [r3, #0]
}
 800835c:	4618      	mov	r0, r3
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	20000004 	.word	0x20000004

0800836c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008370:	f7ff fff0 	bl	8008354 <HAL_RCC_GetHCLKFreq>
 8008374:	4601      	mov	r1, r0
 8008376:	4b05      	ldr	r3, [pc, #20]	; (800838c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	0a9b      	lsrs	r3, r3, #10
 800837c:	f003 0307 	and.w	r3, r3, #7
 8008380:	4a03      	ldr	r2, [pc, #12]	; (8008390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008382:	5cd3      	ldrb	r3, [r2, r3]
 8008384:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008388:	4618      	mov	r0, r3
 800838a:	bd80      	pop	{r7, pc}
 800838c:	40023800 	.word	0x40023800
 8008390:	0800eb64 	.word	0x0800eb64

08008394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008398:	f7ff ffdc 	bl	8008354 <HAL_RCC_GetHCLKFreq>
 800839c:	4601      	mov	r1, r0
 800839e:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	0b5b      	lsrs	r3, r3, #13
 80083a4:	f003 0307 	and.w	r3, r3, #7
 80083a8:	4a03      	ldr	r2, [pc, #12]	; (80083b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083aa:	5cd3      	ldrb	r3, [r2, r3]
 80083ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	40023800 	.word	0x40023800
 80083b8:	0800eb64 	.word	0x0800eb64

080083bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083c4:	2300      	movs	r3, #0
 80083c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10b      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d105      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d075      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80083f0:	4bad      	ldr	r3, [pc, #692]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80083f6:	f7fc fff5 	bl	80053e4 <HAL_GetTick>
 80083fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083fc:	e008      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80083fe:	f7fc fff1 	bl	80053e4 <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	2b02      	cmp	r3, #2
 800840a:	d901      	bls.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e18b      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008410:	4ba6      	ldr	r3, [pc, #664]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1f0      	bne.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	d009      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	019a      	lsls	r2, r3, #6
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	071b      	lsls	r3, r3, #28
 8008434:	499d      	ldr	r1, [pc, #628]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008436:	4313      	orrs	r3, r2
 8008438:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01f      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008448:	4b98      	ldr	r3, [pc, #608]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800844a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800844e:	0f1b      	lsrs	r3, r3, #28
 8008450:	f003 0307 	and.w	r3, r3, #7
 8008454:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	019a      	lsls	r2, r3, #6
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	061b      	lsls	r3, r3, #24
 8008462:	431a      	orrs	r2, r3
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	071b      	lsls	r3, r3, #28
 8008468:	4990      	ldr	r1, [pc, #576]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800846a:	4313      	orrs	r3, r2
 800846c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008470:	4b8e      	ldr	r3, [pc, #568]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008476:	f023 021f 	bic.w	r2, r3, #31
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	3b01      	subs	r3, #1
 8008480:	498a      	ldr	r1, [pc, #552]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008482:	4313      	orrs	r3, r2
 8008484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00d      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	019a      	lsls	r2, r3, #6
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	061b      	lsls	r3, r3, #24
 80084a0:	431a      	orrs	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	071b      	lsls	r3, r3, #28
 80084a8:	4980      	ldr	r1, [pc, #512]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084aa:	4313      	orrs	r3, r2
 80084ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80084b0:	4b7d      	ldr	r3, [pc, #500]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80084b2:	2201      	movs	r2, #1
 80084b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084b6:	f7fc ff95 	bl	80053e4 <HAL_GetTick>
 80084ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084bc:	e008      	b.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80084be:	f7fc ff91 	bl	80053e4 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d901      	bls.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e12b      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084d0:	4b76      	ldr	r3, [pc, #472]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d0f0      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d105      	bne.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d079      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80084f4:	4b6e      	ldr	r3, [pc, #440]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084f6:	2200      	movs	r2, #0
 80084f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084fa:	f7fc ff73 	bl	80053e4 <HAL_GetTick>
 80084fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008500:	e008      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008502:	f7fc ff6f 	bl	80053e4 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	2b02      	cmp	r3, #2
 800850e:	d901      	bls.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e109      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008514:	4b65      	ldr	r3, [pc, #404]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800851c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008520:	d0ef      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0304 	and.w	r3, r3, #4
 800852a:	2b00      	cmp	r3, #0
 800852c:	d020      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800852e:	4b5f      	ldr	r3, [pc, #380]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008534:	0f1b      	lsrs	r3, r3, #28
 8008536:	f003 0307 	and.w	r3, r3, #7
 800853a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	019a      	lsls	r2, r3, #6
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	061b      	lsls	r3, r3, #24
 8008548:	431a      	orrs	r2, r3
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	071b      	lsls	r3, r3, #28
 800854e:	4957      	ldr	r1, [pc, #348]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008550:	4313      	orrs	r3, r2
 8008552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008556:	4b55      	ldr	r3, [pc, #340]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800855c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	3b01      	subs	r3, #1
 8008566:	021b      	lsls	r3, r3, #8
 8008568:	4950      	ldr	r1, [pc, #320]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800856a:	4313      	orrs	r3, r2
 800856c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0308 	and.w	r3, r3, #8
 8008578:	2b00      	cmp	r3, #0
 800857a:	d01e      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800857c:	4b4b      	ldr	r3, [pc, #300]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800857e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008582:	0e1b      	lsrs	r3, r3, #24
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	019a      	lsls	r2, r3, #6
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	061b      	lsls	r3, r3, #24
 8008594:	431a      	orrs	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	071b      	lsls	r3, r3, #28
 800859c:	4943      	ldr	r1, [pc, #268]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80085a4:	4b41      	ldr	r3, [pc, #260]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b2:	493e      	ldr	r1, [pc, #248]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80085ba:	4b3d      	ldr	r3, [pc, #244]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085bc:	2201      	movs	r2, #1
 80085be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80085c0:	f7fc ff10 	bl	80053e4 <HAL_GetTick>
 80085c4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80085c6:	e008      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80085c8:	f7fc ff0c 	bl	80053e4 <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d901      	bls.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e0a6      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80085da:	4b34      	ldr	r3, [pc, #208]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085e6:	d1ef      	bne.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0320 	and.w	r3, r3, #32
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 808d 	beq.w	8008710 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]
 80085fa:	4b2c      	ldr	r3, [pc, #176]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80085fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fe:	4a2b      	ldr	r2, [pc, #172]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008604:	6413      	str	r3, [r2, #64]	; 0x40
 8008606:	4b29      	ldr	r3, [pc, #164]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008612:	4b28      	ldr	r3, [pc, #160]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a27      	ldr	r2, [pc, #156]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800861c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800861e:	f7fc fee1 	bl	80053e4 <HAL_GetTick>
 8008622:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008624:	e008      	b.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008626:	f7fc fedd 	bl	80053e4 <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	2b02      	cmp	r3, #2
 8008632:	d901      	bls.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e077      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008638:	4b1e      	ldr	r3, [pc, #120]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008640:	2b00      	cmp	r3, #0
 8008642:	d0f0      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008644:	4b19      	ldr	r3, [pc, #100]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800864c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d039      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	429a      	cmp	r2, r3
 8008660:	d032      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008662:	4b12      	ldr	r3, [pc, #72]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800866a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800866c:	4b12      	ldr	r3, [pc, #72]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800866e:	2201      	movs	r2, #1
 8008670:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008672:	4b11      	ldr	r3, [pc, #68]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008674:	2200      	movs	r2, #0
 8008676:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008678:	4a0c      	ldr	r2, [pc, #48]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800867e:	4b0b      	ldr	r3, [pc, #44]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b01      	cmp	r3, #1
 8008688:	d11e      	bne.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800868a:	f7fc feab 	bl	80053e4 <HAL_GetTick>
 800868e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008690:	e014      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008692:	f7fc fea7 	bl	80053e4 <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	f241 3288 	movw	r2, #5000	; 0x1388
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d90b      	bls.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e03f      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80086a8:	42470068 	.word	0x42470068
 80086ac:	40023800 	.word	0x40023800
 80086b0:	42470070 	.word	0x42470070
 80086b4:	40007000 	.word	0x40007000
 80086b8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086bc:	4b1c      	ldr	r3, [pc, #112]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80086be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d0e4      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086d4:	d10d      	bne.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80086d6:	4b16      	ldr	r3, [pc, #88]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80086e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086ea:	4911      	ldr	r1, [pc, #68]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	608b      	str	r3, [r1, #8]
 80086f0:	e005      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x342>
 80086f2:	4b0f      	ldr	r3, [pc, #60]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	4a0e      	ldr	r2, [pc, #56]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80086f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80086fc:	6093      	str	r3, [r2, #8]
 80086fe:	4b0c      	ldr	r3, [pc, #48]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008700:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800870a:	4909      	ldr	r1, [pc, #36]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800870c:	4313      	orrs	r3, r2
 800870e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0310 	and.w	r3, r3, #16
 8008718:	2b00      	cmp	r3, #0
 800871a:	d004      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008722:	4b04      	ldr	r3, [pc, #16]	; (8008734 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008724:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3718      	adds	r7, #24
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	40023800 	.word	0x40023800
 8008734:	424711e0 	.word	0x424711e0

08008738 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e025      	b.n	8008798 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d106      	bne.n	8008766 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7fb f9eb 	bl	8003b3c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2202      	movs	r2, #2
 800876a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	3304      	adds	r3, #4
 8008776:	4619      	mov	r1, r3
 8008778:	4610      	mov	r0, r2
 800877a:	f001 fdbb 	bl	800a2f4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6818      	ldr	r0, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	461a      	mov	r2, r3
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	f001 fe26 	bl	800a3da <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d101      	bne.n	80087bc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80087b8:	2302      	movs	r3, #2
 80087ba:	e018      	b.n	80087ee <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2202      	movs	r2, #2
 80087c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	68b9      	ldr	r1, [r7, #8]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f001 fe83 	bl	800a4d8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d104      	bne.n	80087e4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2205      	movs	r2, #5
 80087de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80087e2:	e003      	b.n	80087ec <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b082      	sub	sp, #8
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b02      	cmp	r3, #2
 800880a:	d101      	bne.n	8008810 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800880c:	2302      	movs	r3, #2
 800880e:	e00e      	b.n	800882e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	4618      	mov	r0, r3
 8008820:	f001 fe96 	bl	800a550 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b082      	sub	sp, #8
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e056      	b.n	80088f6 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	d106      	bne.n	8008868 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7fa ffe4 	bl	8003830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800887e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	431a      	orrs	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	431a      	orrs	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	431a      	orrs	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	431a      	orrs	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088a4:	431a      	orrs	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	431a      	orrs	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a1b      	ldr	r3, [r3, #32]
 80088b0:	ea42 0103 	orr.w	r1, r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	0c1b      	lsrs	r3, r3, #16
 80088c6:	f003 0104 	and.w	r1, r3, #4
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	69da      	ldr	r2, [r3, #28]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d101      	bne.n	8008910 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e01a      	b.n	8008946 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008926:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7fa ffc9 	bl	80038c0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b088      	sub	sp, #32
 8008952:	af00      	add	r7, sp, #0
 8008954:	60f8      	str	r0, [r7, #12]
 8008956:	60b9      	str	r1, [r7, #8]
 8008958:	603b      	str	r3, [r7, #0]
 800895a:	4613      	mov	r3, r2
 800895c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008968:	2b01      	cmp	r3, #1
 800896a:	d101      	bne.n	8008970 <HAL_SPI_Transmit+0x22>
 800896c:	2302      	movs	r3, #2
 800896e:	e11e      	b.n	8008bae <HAL_SPI_Transmit+0x260>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008978:	f7fc fd34 	bl	80053e4 <HAL_GetTick>
 800897c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800897e:	88fb      	ldrh	r3, [r7, #6]
 8008980:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b01      	cmp	r3, #1
 800898c:	d002      	beq.n	8008994 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800898e:	2302      	movs	r3, #2
 8008990:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008992:	e103      	b.n	8008b9c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <HAL_SPI_Transmit+0x52>
 800899a:	88fb      	ldrh	r3, [r7, #6]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d102      	bne.n	80089a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80089a4:	e0fa      	b.n	8008b9c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2203      	movs	r2, #3
 80089aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	88fa      	ldrh	r2, [r7, #6]
 80089be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	88fa      	ldrh	r2, [r7, #6]
 80089c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ec:	d107      	bne.n	80089fe <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a08:	2b40      	cmp	r3, #64	; 0x40
 8008a0a:	d007      	beq.n	8008a1c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a24:	d14b      	bne.n	8008abe <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d002      	beq.n	8008a34 <HAL_SPI_Transmit+0xe6>
 8008a2e:	8afb      	ldrh	r3, [r7, #22]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d13e      	bne.n	8008ab2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a38:	881a      	ldrh	r2, [r3, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a44:	1c9a      	adds	r2, r3, #2
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	3b01      	subs	r3, #1
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a58:	e02b      	b.n	8008ab2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d112      	bne.n	8008a8e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6c:	881a      	ldrh	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a78:	1c9a      	adds	r2, r3, #2
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	3b01      	subs	r3, #1
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a8c:	e011      	b.n	8008ab2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a8e:	f7fc fca9 	bl	80053e4 <HAL_GetTick>
 8008a92:	4602      	mov	r2, r0
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d803      	bhi.n	8008aa6 <HAL_SPI_Transmit+0x158>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa4:	d102      	bne.n	8008aac <HAL_SPI_Transmit+0x15e>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d102      	bne.n	8008ab2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008aac:	2303      	movs	r3, #3
 8008aae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ab0:	e074      	b.n	8008b9c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1ce      	bne.n	8008a5a <HAL_SPI_Transmit+0x10c>
 8008abc:	e04c      	b.n	8008b58 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <HAL_SPI_Transmit+0x17e>
 8008ac6:	8afb      	ldrh	r3, [r7, #22]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d140      	bne.n	8008b4e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	330c      	adds	r3, #12
 8008ad6:	7812      	ldrb	r2, [r2, #0]
 8008ad8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	3b01      	subs	r3, #1
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008af2:	e02c      	b.n	8008b4e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d113      	bne.n	8008b2a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	330c      	adds	r3, #12
 8008b0c:	7812      	ldrb	r2, [r2, #0]
 8008b0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b14:	1c5a      	adds	r2, r3, #1
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	3b01      	subs	r3, #1
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	86da      	strh	r2, [r3, #54]	; 0x36
 8008b28:	e011      	b.n	8008b4e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b2a:	f7fc fc5b 	bl	80053e4 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d803      	bhi.n	8008b42 <HAL_SPI_Transmit+0x1f4>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b40:	d102      	bne.n	8008b48 <HAL_SPI_Transmit+0x1fa>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d102      	bne.n	8008b4e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b4c:	e026      	b.n	8008b9c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1cd      	bne.n	8008af4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 fbb3 	bl	80092c8 <SPI_EndRxTxTransaction>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10a      	bne.n	8008b8c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b76:	2300      	movs	r3, #0
 8008b78:	613b      	str	r3, [r7, #16]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	613b      	str	r3, [r7, #16]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	613b      	str	r3, [r7, #16]
 8008b8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	77fb      	strb	r3, [r7, #31]
 8008b98:	e000      	b.n	8008b9c <HAL_SPI_Transmit+0x24e>
  }

error:
 8008b9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008bac:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b088      	sub	sp, #32
 8008bba:	af02      	add	r7, sp, #8
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	603b      	str	r3, [r7, #0]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bd2:	d112      	bne.n	8008bfa <HAL_SPI_Receive+0x44>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10e      	bne.n	8008bfa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2204      	movs	r2, #4
 8008be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008be4:	88fa      	ldrh	r2, [r7, #6]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	4613      	mov	r3, r2
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 f8e9 	bl	8008dc8 <HAL_SPI_TransmitReceive>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	e0e2      	b.n	8008dc0 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d101      	bne.n	8008c08 <HAL_SPI_Receive+0x52>
 8008c04:	2302      	movs	r3, #2
 8008c06:	e0db      	b.n	8008dc0 <HAL_SPI_Receive+0x20a>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c10:	f7fc fbe8 	bl	80053e4 <HAL_GetTick>
 8008c14:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d002      	beq.n	8008c28 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008c22:	2302      	movs	r3, #2
 8008c24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c26:	e0c2      	b.n	8008dae <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <HAL_SPI_Receive+0x7e>
 8008c2e:	88fb      	ldrh	r3, [r7, #6]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d102      	bne.n	8008c3a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c38:	e0b9      	b.n	8008dae <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2204      	movs	r2, #4
 8008c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	88fa      	ldrh	r2, [r7, #6]
 8008c52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	88fa      	ldrh	r2, [r7, #6]
 8008c58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c80:	d107      	bne.n	8008c92 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008c90:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9c:	2b40      	cmp	r3, #64	; 0x40
 8008c9e:	d007      	beq.n	8008cb0 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d162      	bne.n	8008d7e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008cb8:	e02e      	b.n	8008d18 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d115      	bne.n	8008cf4 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f103 020c 	add.w	r2, r3, #12
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd4:	7812      	ldrb	r2, [r2, #0]
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cde:	1c5a      	adds	r2, r3, #1
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	3b01      	subs	r3, #1
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008cf2:	e011      	b.n	8008d18 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cf4:	f7fc fb76 	bl	80053e4 <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d803      	bhi.n	8008d0c <HAL_SPI_Receive+0x156>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0a:	d102      	bne.n	8008d12 <HAL_SPI_Receive+0x15c>
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d102      	bne.n	8008d18 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008d16:	e04a      	b.n	8008dae <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1cb      	bne.n	8008cba <HAL_SPI_Receive+0x104>
 8008d22:	e031      	b.n	8008d88 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d113      	bne.n	8008d5a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68da      	ldr	r2, [r3, #12]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3c:	b292      	uxth	r2, r2
 8008d3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d44:	1c9a      	adds	r2, r3, #2
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	3b01      	subs	r3, #1
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d58:	e011      	b.n	8008d7e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d5a:	f7fc fb43 	bl	80053e4 <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d803      	bhi.n	8008d72 <HAL_SPI_Receive+0x1bc>
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d70:	d102      	bne.n	8008d78 <HAL_SPI_Receive+0x1c2>
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d102      	bne.n	8008d7e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008d7c:	e017      	b.n	8008dae <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1cd      	bne.n	8008d24 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f000 fa35 	bl	80091fc <SPI_EndRxTransaction>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d002      	beq.n	8008d9e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	75fb      	strb	r3, [r7, #23]
 8008daa:	e000      	b.n	8008dae <HAL_SPI_Receive+0x1f8>
  }

error :
 8008dac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08c      	sub	sp, #48	; 0x30
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
 8008dd4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d101      	bne.n	8008dee <HAL_SPI_TransmitReceive+0x26>
 8008dea:	2302      	movs	r3, #2
 8008dec:	e18a      	b.n	8009104 <HAL_SPI_TransmitReceive+0x33c>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008df6:	f7fc faf5 	bl	80053e4 <HAL_GetTick>
 8008dfa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008e0c:	887b      	ldrh	r3, [r7, #2]
 8008e0e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008e10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d00f      	beq.n	8008e38 <HAL_SPI_TransmitReceive+0x70>
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e1e:	d107      	bne.n	8008e30 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d103      	bne.n	8008e30 <HAL_SPI_TransmitReceive+0x68>
 8008e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e2c:	2b04      	cmp	r3, #4
 8008e2e:	d003      	beq.n	8008e38 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008e30:	2302      	movs	r3, #2
 8008e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008e36:	e15b      	b.n	80090f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d005      	beq.n	8008e4a <HAL_SPI_TransmitReceive+0x82>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <HAL_SPI_TransmitReceive+0x82>
 8008e44:	887b      	ldrh	r3, [r7, #2]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d103      	bne.n	8008e52 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008e50:	e14e      	b.n	80090f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b04      	cmp	r3, #4
 8008e5c:	d003      	beq.n	8008e66 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2205      	movs	r2, #5
 8008e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	887a      	ldrh	r2, [r7, #2]
 8008e76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	887a      	ldrh	r2, [r7, #2]
 8008e7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	887a      	ldrh	r2, [r7, #2]
 8008e88:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	887a      	ldrh	r2, [r7, #2]
 8008e8e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea6:	2b40      	cmp	r3, #64	; 0x40
 8008ea8:	d007      	beq.n	8008eba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ec2:	d178      	bne.n	8008fb6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <HAL_SPI_TransmitReceive+0x10a>
 8008ecc:	8b7b      	ldrh	r3, [r7, #26]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d166      	bne.n	8008fa0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed6:	881a      	ldrh	r2, [r3, #0]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee2:	1c9a      	adds	r2, r3, #2
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ef6:	e053      	b.n	8008fa0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f003 0302 	and.w	r3, r3, #2
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d11b      	bne.n	8008f3e <HAL_SPI_TransmitReceive+0x176>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d016      	beq.n	8008f3e <HAL_SPI_TransmitReceive+0x176>
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d113      	bne.n	8008f3e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1a:	881a      	ldrh	r2, [r3, #0]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f26:	1c9a      	adds	r2, r3, #2
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	3b01      	subs	r3, #1
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d119      	bne.n	8008f80 <HAL_SPI_TransmitReceive+0x1b8>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d014      	beq.n	8008f80 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68da      	ldr	r2, [r3, #12]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f60:	b292      	uxth	r2, r2
 8008f62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f68:	1c9a      	adds	r2, r3, #2
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	3b01      	subs	r3, #1
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f80:	f7fc fa30 	bl	80053e4 <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d807      	bhi.n	8008fa0 <HAL_SPI_TransmitReceive+0x1d8>
 8008f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f96:	d003      	beq.n	8008fa0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008f9e:	e0a7      	b.n	80090f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1a6      	bne.n	8008ef8 <HAL_SPI_TransmitReceive+0x130>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1a1      	bne.n	8008ef8 <HAL_SPI_TransmitReceive+0x130>
 8008fb4:	e07c      	b.n	80090b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <HAL_SPI_TransmitReceive+0x1fc>
 8008fbe:	8b7b      	ldrh	r3, [r7, #26]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d16b      	bne.n	800909c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	330c      	adds	r3, #12
 8008fce:	7812      	ldrb	r2, [r2, #0]
 8008fd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fea:	e057      	b.n	800909c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	f003 0302 	and.w	r3, r3, #2
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d11c      	bne.n	8009034 <HAL_SPI_TransmitReceive+0x26c>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	2b00      	cmp	r3, #0
 8009002:	d017      	beq.n	8009034 <HAL_SPI_TransmitReceive+0x26c>
 8009004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009006:	2b01      	cmp	r3, #1
 8009008:	d114      	bne.n	8009034 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	330c      	adds	r3, #12
 8009014:	7812      	ldrb	r2, [r2, #0]
 8009016:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901c:	1c5a      	adds	r2, r3, #1
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009026:	b29b      	uxth	r3, r3
 8009028:	3b01      	subs	r3, #1
 800902a:	b29a      	uxth	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b01      	cmp	r3, #1
 8009040:	d119      	bne.n	8009076 <HAL_SPI_TransmitReceive+0x2ae>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009046:	b29b      	uxth	r3, r3
 8009048:	2b00      	cmp	r3, #0
 800904a:	d014      	beq.n	8009076 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009056:	b2d2      	uxtb	r2, r2
 8009058:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905e:	1c5a      	adds	r2, r3, #1
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009068:	b29b      	uxth	r3, r3
 800906a:	3b01      	subs	r3, #1
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009072:	2301      	movs	r3, #1
 8009074:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009076:	f7fc f9b5 	bl	80053e4 <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009082:	429a      	cmp	r2, r3
 8009084:	d803      	bhi.n	800908e <HAL_SPI_TransmitReceive+0x2c6>
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908c:	d102      	bne.n	8009094 <HAL_SPI_TransmitReceive+0x2cc>
 800908e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009090:	2b00      	cmp	r3, #0
 8009092:	d103      	bne.n	800909c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800909a:	e029      	b.n	80090f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1a2      	bne.n	8008fec <HAL_SPI_TransmitReceive+0x224>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d19d      	bne.n	8008fec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 f907 	bl	80092c8 <SPI_EndRxTxTransaction>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d006      	beq.n	80090ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2220      	movs	r2, #32
 80090ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80090cc:	e010      	b.n	80090f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10b      	bne.n	80090ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090d6:	2300      	movs	r3, #0
 80090d8:	617b      	str	r3, [r7, #20]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	617b      	str	r3, [r7, #20]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	617b      	str	r3, [r7, #20]
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	e000      	b.n	80090f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80090ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009100:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009104:	4618      	mov	r0, r3
 8009106:	3730      	adds	r7, #48	; 0x30
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800911a:	b2db      	uxtb	r3, r3
}
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	603b      	str	r3, [r7, #0]
 8009134:	4613      	mov	r3, r2
 8009136:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009138:	e04c      	b.n	80091d4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009140:	d048      	beq.n	80091d4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009142:	f7fc f94f 	bl	80053e4 <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	429a      	cmp	r2, r3
 8009150:	d902      	bls.n	8009158 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d13d      	bne.n	80091d4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009166:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009170:	d111      	bne.n	8009196 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800917a:	d004      	beq.n	8009186 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009184:	d107      	bne.n	8009196 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009194:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800919e:	d10f      	bne.n	80091c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091ae:	601a      	str	r2, [r3, #0]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e00f      	b.n	80091f4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	689a      	ldr	r2, [r3, #8]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	4013      	ands	r3, r2
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	bf0c      	ite	eq
 80091e4:	2301      	moveq	r3, #1
 80091e6:	2300      	movne	r3, #0
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	461a      	mov	r2, r3
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d1a3      	bne.n	800913a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af02      	add	r7, sp, #8
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009210:	d111      	bne.n	8009236 <SPI_EndRxTransaction+0x3a>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800921a:	d004      	beq.n	8009226 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009224:	d107      	bne.n	8009236 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009234:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800923e:	d12a      	bne.n	8009296 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009248:	d012      	beq.n	8009270 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	2200      	movs	r2, #0
 8009252:	2180      	movs	r1, #128	; 0x80
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f7ff ff67 	bl	8009128 <SPI_WaitFlagStateUntilTimeout>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d02d      	beq.n	80092bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009264:	f043 0220 	orr.w	r2, r3, #32
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e026      	b.n	80092be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2200      	movs	r2, #0
 8009278:	2101      	movs	r1, #1
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f7ff ff54 	bl	8009128 <SPI_WaitFlagStateUntilTimeout>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d01a      	beq.n	80092bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800928a:	f043 0220 	orr.w	r2, r3, #32
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e013      	b.n	80092be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	2200      	movs	r2, #0
 800929e:	2101      	movs	r1, #1
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f7ff ff41 	bl	8009128 <SPI_WaitFlagStateUntilTimeout>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d007      	beq.n	80092bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b0:	f043 0220 	orr.w	r2, r3, #32
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e000      	b.n	80092be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b088      	sub	sp, #32
 80092cc:	af02      	add	r7, sp, #8
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80092d4:	4b1b      	ldr	r3, [pc, #108]	; (8009344 <SPI_EndRxTxTransaction+0x7c>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a1b      	ldr	r2, [pc, #108]	; (8009348 <SPI_EndRxTxTransaction+0x80>)
 80092da:	fba2 2303 	umull	r2, r3, r2, r3
 80092de:	0d5b      	lsrs	r3, r3, #21
 80092e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092e4:	fb02 f303 	mul.w	r3, r2, r3
 80092e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092f2:	d112      	bne.n	800931a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2200      	movs	r2, #0
 80092fc:	2180      	movs	r1, #128	; 0x80
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f7ff ff12 	bl	8009128 <SPI_WaitFlagStateUntilTimeout>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d016      	beq.n	8009338 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800930e:	f043 0220 	orr.w	r2, r3, #32
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e00f      	b.n	800933a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00a      	beq.n	8009336 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	3b01      	subs	r3, #1
 8009324:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009330:	2b80      	cmp	r3, #128	; 0x80
 8009332:	d0f2      	beq.n	800931a <SPI_EndRxTxTransaction+0x52>
 8009334:	e000      	b.n	8009338 <SPI_EndRxTxTransaction+0x70>
        break;
 8009336:	bf00      	nop
  }

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20000004 	.word	0x20000004
 8009348:	165e9f81 	.word	0x165e9f81

0800934c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e01d      	b.n	800939a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d106      	bne.n	8009378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7fa fac2 	bl	80038fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2202      	movs	r2, #2
 800937c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3304      	adds	r3, #4
 8009388:	4619      	mov	r1, r3
 800938a:	4610      	mov	r0, r2
 800938c:	f000 fa1e 	bl	80097cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b085      	sub	sp, #20
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2202      	movs	r2, #2
 80093ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f003 0307 	and.w	r3, r3, #7
 80093bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b06      	cmp	r3, #6
 80093c2:	d007      	beq.n	80093d4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f042 0201 	orr.w	r2, r2, #1
 80093d2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b082      	sub	sp, #8
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	f003 0302 	and.w	r3, r3, #2
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d122      	bne.n	8009446 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	2b02      	cmp	r3, #2
 800940c:	d11b      	bne.n	8009446 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f06f 0202 	mvn.w	r2, #2
 8009416:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	f003 0303 	and.w	r3, r3, #3
 8009428:	2b00      	cmp	r3, #0
 800942a:	d003      	beq.n	8009434 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f9af 	bl	8009790 <HAL_TIM_IC_CaptureCallback>
 8009432:	e005      	b.n	8009440 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f9a1 	bl	800977c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f9b2 	bl	80097a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	f003 0304 	and.w	r3, r3, #4
 8009450:	2b04      	cmp	r3, #4
 8009452:	d122      	bne.n	800949a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	f003 0304 	and.w	r3, r3, #4
 800945e:	2b04      	cmp	r3, #4
 8009460:	d11b      	bne.n	800949a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f06f 0204 	mvn.w	r2, #4
 800946a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2202      	movs	r2, #2
 8009470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800947c:	2b00      	cmp	r3, #0
 800947e:	d003      	beq.n	8009488 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f985 	bl	8009790 <HAL_TIM_IC_CaptureCallback>
 8009486:	e005      	b.n	8009494 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f977 	bl	800977c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f988 	bl	80097a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	f003 0308 	and.w	r3, r3, #8
 80094a4:	2b08      	cmp	r3, #8
 80094a6:	d122      	bne.n	80094ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	f003 0308 	and.w	r3, r3, #8
 80094b2:	2b08      	cmp	r3, #8
 80094b4:	d11b      	bne.n	80094ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f06f 0208 	mvn.w	r2, #8
 80094be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2204      	movs	r2, #4
 80094c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	69db      	ldr	r3, [r3, #28]
 80094cc:	f003 0303 	and.w	r3, r3, #3
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d003      	beq.n	80094dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f95b 	bl	8009790 <HAL_TIM_IC_CaptureCallback>
 80094da:	e005      	b.n	80094e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f94d 	bl	800977c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f95e 	bl	80097a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	f003 0310 	and.w	r3, r3, #16
 80094f8:	2b10      	cmp	r3, #16
 80094fa:	d122      	bne.n	8009542 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	f003 0310 	and.w	r3, r3, #16
 8009506:	2b10      	cmp	r3, #16
 8009508:	d11b      	bne.n	8009542 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f06f 0210 	mvn.w	r2, #16
 8009512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2208      	movs	r2, #8
 8009518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	69db      	ldr	r3, [r3, #28]
 8009520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009524:	2b00      	cmp	r3, #0
 8009526:	d003      	beq.n	8009530 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f931 	bl	8009790 <HAL_TIM_IC_CaptureCallback>
 800952e:	e005      	b.n	800953c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f923 	bl	800977c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f934 	bl	80097a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	2b01      	cmp	r3, #1
 800954e:	d10e      	bne.n	800956e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b01      	cmp	r3, #1
 800955c:	d107      	bne.n	800956e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f06f 0201 	mvn.w	r2, #1
 8009566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f8fd 	bl	8009768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009578:	2b80      	cmp	r3, #128	; 0x80
 800957a:	d10e      	bne.n	800959a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009586:	2b80      	cmp	r3, #128	; 0x80
 8009588:	d107      	bne.n	800959a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fad9 	bl	8009b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a4:	2b40      	cmp	r3, #64	; 0x40
 80095a6:	d10e      	bne.n	80095c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b2:	2b40      	cmp	r3, #64	; 0x40
 80095b4:	d107      	bne.n	80095c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f8f9 	bl	80097b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	f003 0320 	and.w	r3, r3, #32
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	d10e      	bne.n	80095f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	f003 0320 	and.w	r3, r3, #32
 80095de:	2b20      	cmp	r3, #32
 80095e0:	d107      	bne.n	80095f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f06f 0220 	mvn.w	r2, #32
 80095ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 faa3 	bl	8009b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800960a:	2b01      	cmp	r3, #1
 800960c:	d101      	bne.n	8009612 <HAL_TIM_ConfigClockSource+0x18>
 800960e:	2302      	movs	r3, #2
 8009610:	e0a6      	b.n	8009760 <HAL_TIM_ConfigClockSource+0x166>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2202      	movs	r2, #2
 800961e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009630:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009638:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b40      	cmp	r3, #64	; 0x40
 8009648:	d067      	beq.n	800971a <HAL_TIM_ConfigClockSource+0x120>
 800964a:	2b40      	cmp	r3, #64	; 0x40
 800964c:	d80b      	bhi.n	8009666 <HAL_TIM_ConfigClockSource+0x6c>
 800964e:	2b10      	cmp	r3, #16
 8009650:	d073      	beq.n	800973a <HAL_TIM_ConfigClockSource+0x140>
 8009652:	2b10      	cmp	r3, #16
 8009654:	d802      	bhi.n	800965c <HAL_TIM_ConfigClockSource+0x62>
 8009656:	2b00      	cmp	r3, #0
 8009658:	d06f      	beq.n	800973a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800965a:	e078      	b.n	800974e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800965c:	2b20      	cmp	r3, #32
 800965e:	d06c      	beq.n	800973a <HAL_TIM_ConfigClockSource+0x140>
 8009660:	2b30      	cmp	r3, #48	; 0x30
 8009662:	d06a      	beq.n	800973a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009664:	e073      	b.n	800974e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009666:	2b70      	cmp	r3, #112	; 0x70
 8009668:	d00d      	beq.n	8009686 <HAL_TIM_ConfigClockSource+0x8c>
 800966a:	2b70      	cmp	r3, #112	; 0x70
 800966c:	d804      	bhi.n	8009678 <HAL_TIM_ConfigClockSource+0x7e>
 800966e:	2b50      	cmp	r3, #80	; 0x50
 8009670:	d033      	beq.n	80096da <HAL_TIM_ConfigClockSource+0xe0>
 8009672:	2b60      	cmp	r3, #96	; 0x60
 8009674:	d041      	beq.n	80096fa <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009676:	e06a      	b.n	800974e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800967c:	d066      	beq.n	800974c <HAL_TIM_ConfigClockSource+0x152>
 800967e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009682:	d017      	beq.n	80096b4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009684:	e063      	b.n	800974e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6818      	ldr	r0, [r3, #0]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	6899      	ldr	r1, [r3, #8]
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	685a      	ldr	r2, [r3, #4]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	f000 f9b3 	bl	8009a00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80096a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	609a      	str	r2, [r3, #8]
      break;
 80096b2:	e04c      	b.n	800974e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6818      	ldr	r0, [r3, #0]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	6899      	ldr	r1, [r3, #8]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	f000 f99c 	bl	8009a00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	689a      	ldr	r2, [r3, #8]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096d6:	609a      	str	r2, [r3, #8]
      break;
 80096d8:	e039      	b.n	800974e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6818      	ldr	r0, [r3, #0]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	6859      	ldr	r1, [r3, #4]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	461a      	mov	r2, r3
 80096e8:	f000 f910 	bl	800990c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2150      	movs	r1, #80	; 0x50
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 f969 	bl	80099ca <TIM_ITRx_SetConfig>
      break;
 80096f8:	e029      	b.n	800974e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6818      	ldr	r0, [r3, #0]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	6859      	ldr	r1, [r3, #4]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	461a      	mov	r2, r3
 8009708:	f000 f92f 	bl	800996a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2160      	movs	r1, #96	; 0x60
 8009712:	4618      	mov	r0, r3
 8009714:	f000 f959 	bl	80099ca <TIM_ITRx_SetConfig>
      break;
 8009718:	e019      	b.n	800974e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6818      	ldr	r0, [r3, #0]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	6859      	ldr	r1, [r3, #4]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	461a      	mov	r2, r3
 8009728:	f000 f8f0 	bl	800990c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2140      	movs	r1, #64	; 0x40
 8009732:	4618      	mov	r0, r3
 8009734:	f000 f949 	bl	80099ca <TIM_ITRx_SetConfig>
      break;
 8009738:	e009      	b.n	800974e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4619      	mov	r1, r3
 8009744:	4610      	mov	r0, r2
 8009746:	f000 f940 	bl	80099ca <TIM_ITRx_SetConfig>
      break;
 800974a:	e000      	b.n	800974e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800974c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a40      	ldr	r2, [pc, #256]	; (80098e0 <TIM_Base_SetConfig+0x114>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d013      	beq.n	800980c <TIM_Base_SetConfig+0x40>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ea:	d00f      	beq.n	800980c <TIM_Base_SetConfig+0x40>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a3d      	ldr	r2, [pc, #244]	; (80098e4 <TIM_Base_SetConfig+0x118>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d00b      	beq.n	800980c <TIM_Base_SetConfig+0x40>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a3c      	ldr	r2, [pc, #240]	; (80098e8 <TIM_Base_SetConfig+0x11c>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d007      	beq.n	800980c <TIM_Base_SetConfig+0x40>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a3b      	ldr	r2, [pc, #236]	; (80098ec <TIM_Base_SetConfig+0x120>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d003      	beq.n	800980c <TIM_Base_SetConfig+0x40>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a3a      	ldr	r2, [pc, #232]	; (80098f0 <TIM_Base_SetConfig+0x124>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d108      	bne.n	800981e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	4313      	orrs	r3, r2
 800981c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4a2f      	ldr	r2, [pc, #188]	; (80098e0 <TIM_Base_SetConfig+0x114>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d02b      	beq.n	800987e <TIM_Base_SetConfig+0xb2>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800982c:	d027      	beq.n	800987e <TIM_Base_SetConfig+0xb2>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a2c      	ldr	r2, [pc, #176]	; (80098e4 <TIM_Base_SetConfig+0x118>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d023      	beq.n	800987e <TIM_Base_SetConfig+0xb2>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a2b      	ldr	r2, [pc, #172]	; (80098e8 <TIM_Base_SetConfig+0x11c>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d01f      	beq.n	800987e <TIM_Base_SetConfig+0xb2>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a2a      	ldr	r2, [pc, #168]	; (80098ec <TIM_Base_SetConfig+0x120>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d01b      	beq.n	800987e <TIM_Base_SetConfig+0xb2>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a29      	ldr	r2, [pc, #164]	; (80098f0 <TIM_Base_SetConfig+0x124>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d017      	beq.n	800987e <TIM_Base_SetConfig+0xb2>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a28      	ldr	r2, [pc, #160]	; (80098f4 <TIM_Base_SetConfig+0x128>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d013      	beq.n	800987e <TIM_Base_SetConfig+0xb2>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a27      	ldr	r2, [pc, #156]	; (80098f8 <TIM_Base_SetConfig+0x12c>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d00f      	beq.n	800987e <TIM_Base_SetConfig+0xb2>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a26      	ldr	r2, [pc, #152]	; (80098fc <TIM_Base_SetConfig+0x130>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d00b      	beq.n	800987e <TIM_Base_SetConfig+0xb2>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a25      	ldr	r2, [pc, #148]	; (8009900 <TIM_Base_SetConfig+0x134>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d007      	beq.n	800987e <TIM_Base_SetConfig+0xb2>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a24      	ldr	r2, [pc, #144]	; (8009904 <TIM_Base_SetConfig+0x138>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d003      	beq.n	800987e <TIM_Base_SetConfig+0xb2>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a23      	ldr	r2, [pc, #140]	; (8009908 <TIM_Base_SetConfig+0x13c>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d108      	bne.n	8009890 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	4313      	orrs	r3, r2
 800988e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	4313      	orrs	r3, r2
 800989c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	689a      	ldr	r2, [r3, #8]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a0a      	ldr	r2, [pc, #40]	; (80098e0 <TIM_Base_SetConfig+0x114>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d003      	beq.n	80098c4 <TIM_Base_SetConfig+0xf8>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a0c      	ldr	r2, [pc, #48]	; (80098f0 <TIM_Base_SetConfig+0x124>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d103      	bne.n	80098cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	691a      	ldr	r2, [r3, #16]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	615a      	str	r2, [r3, #20]
}
 80098d2:	bf00      	nop
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	40010000 	.word	0x40010000
 80098e4:	40000400 	.word	0x40000400
 80098e8:	40000800 	.word	0x40000800
 80098ec:	40000c00 	.word	0x40000c00
 80098f0:	40010400 	.word	0x40010400
 80098f4:	40014000 	.word	0x40014000
 80098f8:	40014400 	.word	0x40014400
 80098fc:	40014800 	.word	0x40014800
 8009900:	40001800 	.word	0x40001800
 8009904:	40001c00 	.word	0x40001c00
 8009908:	40002000 	.word	0x40002000

0800990c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800990c:	b480      	push	{r7}
 800990e:	b087      	sub	sp, #28
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6a1b      	ldr	r3, [r3, #32]
 800991c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	f023 0201 	bic.w	r2, r3, #1
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	011b      	lsls	r3, r3, #4
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	4313      	orrs	r3, r2
 8009940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	f023 030a 	bic.w	r3, r3, #10
 8009948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	4313      	orrs	r3, r2
 8009950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	621a      	str	r2, [r3, #32]
}
 800995e:	bf00      	nop
 8009960:	371c      	adds	r7, #28
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800996a:	b480      	push	{r7}
 800996c:	b087      	sub	sp, #28
 800996e:	af00      	add	r7, sp, #0
 8009970:	60f8      	str	r0, [r7, #12]
 8009972:	60b9      	str	r1, [r7, #8]
 8009974:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	f023 0210 	bic.w	r2, r3, #16
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6a1b      	ldr	r3, [r3, #32]
 800998c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009994:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	031b      	lsls	r3, r3, #12
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	4313      	orrs	r3, r2
 800999e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	011b      	lsls	r3, r3, #4
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	693a      	ldr	r2, [r7, #16]
 80099bc:	621a      	str	r2, [r3, #32]
}
 80099be:	bf00      	nop
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b085      	sub	sp, #20
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	f043 0307 	orr.w	r3, r3, #7
 80099ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	609a      	str	r2, [r3, #8]
}
 80099f4:	bf00      	nop
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
 8009a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	021a      	lsls	r2, r3, #8
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	431a      	orrs	r2, r3
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	609a      	str	r2, [r3, #8]
}
 8009a34:	bf00      	nop
 8009a36:	371c      	adds	r7, #28
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d101      	bne.n	8009a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a54:	2302      	movs	r3, #2
 8009a56:	e05a      	b.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2202      	movs	r2, #2
 8009a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a21      	ldr	r2, [pc, #132]	; (8009b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d022      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aa4:	d01d      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a1d      	ldr	r2, [pc, #116]	; (8009b20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d018      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a1b      	ldr	r2, [pc, #108]	; (8009b24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d013      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a1a      	ldr	r2, [pc, #104]	; (8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d00e      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a18      	ldr	r2, [pc, #96]	; (8009b2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d009      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a17      	ldr	r2, [pc, #92]	; (8009b30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d004      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a15      	ldr	r2, [pc, #84]	; (8009b34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d10c      	bne.n	8009afc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3714      	adds	r7, #20
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	40010000 	.word	0x40010000
 8009b20:	40000400 	.word	0x40000400
 8009b24:	40000800 	.word	0x40000800
 8009b28:	40000c00 	.word	0x40000c00
 8009b2c:	40010400 	.word	0x40010400
 8009b30:	40014000 	.word	0x40014000
 8009b34:	40001800 	.word	0x40001800

08009b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d101      	bne.n	8009b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e03f      	b.n	8009bf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d106      	bne.n	8009b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7f9 fede 	bl	8003948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2224      	movs	r2, #36	; 0x24
 8009b90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	68da      	ldr	r2, [r3, #12]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f829 	bl	8009bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	691a      	ldr	r2, [r3, #16]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	695a      	ldr	r2, [r3, #20]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68da      	ldr	r2, [r3, #12]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2220      	movs	r2, #32
 8009be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2220      	movs	r2, #32
 8009bec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
	...

08009bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c00:	b085      	sub	sp, #20
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	68da      	ldr	r2, [r3, #12]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	430a      	orrs	r2, r1
 8009c1a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	689a      	ldr	r2, [r3, #8]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	431a      	orrs	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	431a      	orrs	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	69db      	ldr	r3, [r3, #28]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009c3e:	f023 030c 	bic.w	r3, r3, #12
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	6812      	ldr	r2, [r2, #0]
 8009c46:	68f9      	ldr	r1, [r7, #12]
 8009c48:	430b      	orrs	r3, r1
 8009c4a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	695b      	ldr	r3, [r3, #20]
 8009c52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	699a      	ldr	r2, [r3, #24]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	69db      	ldr	r3, [r3, #28]
 8009c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c6a:	f040 818b 	bne.w	8009f84 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4ac1      	ldr	r2, [pc, #772]	; (8009f78 <UART_SetConfig+0x37c>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d005      	beq.n	8009c84 <UART_SetConfig+0x88>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4abf      	ldr	r2, [pc, #764]	; (8009f7c <UART_SetConfig+0x380>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	f040 80bd 	bne.w	8009dfe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c84:	f7fe fb86 	bl	8008394 <HAL_RCC_GetPCLK2Freq>
 8009c88:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	461d      	mov	r5, r3
 8009c8e:	f04f 0600 	mov.w	r6, #0
 8009c92:	46a8      	mov	r8, r5
 8009c94:	46b1      	mov	r9, r6
 8009c96:	eb18 0308 	adds.w	r3, r8, r8
 8009c9a:	eb49 0409 	adc.w	r4, r9, r9
 8009c9e:	4698      	mov	r8, r3
 8009ca0:	46a1      	mov	r9, r4
 8009ca2:	eb18 0805 	adds.w	r8, r8, r5
 8009ca6:	eb49 0906 	adc.w	r9, r9, r6
 8009caa:	f04f 0100 	mov.w	r1, #0
 8009cae:	f04f 0200 	mov.w	r2, #0
 8009cb2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009cb6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009cba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009cbe:	4688      	mov	r8, r1
 8009cc0:	4691      	mov	r9, r2
 8009cc2:	eb18 0005 	adds.w	r0, r8, r5
 8009cc6:	eb49 0106 	adc.w	r1, r9, r6
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	461d      	mov	r5, r3
 8009cd0:	f04f 0600 	mov.w	r6, #0
 8009cd4:	196b      	adds	r3, r5, r5
 8009cd6:	eb46 0406 	adc.w	r4, r6, r6
 8009cda:	461a      	mov	r2, r3
 8009cdc:	4623      	mov	r3, r4
 8009cde:	f7f6 ff8b 	bl	8000bf8 <__aeabi_uldivmod>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	4ba5      	ldr	r3, [pc, #660]	; (8009f80 <UART_SetConfig+0x384>)
 8009cea:	fba3 2302 	umull	r2, r3, r3, r2
 8009cee:	095b      	lsrs	r3, r3, #5
 8009cf0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	461d      	mov	r5, r3
 8009cf8:	f04f 0600 	mov.w	r6, #0
 8009cfc:	46a9      	mov	r9, r5
 8009cfe:	46b2      	mov	sl, r6
 8009d00:	eb19 0309 	adds.w	r3, r9, r9
 8009d04:	eb4a 040a 	adc.w	r4, sl, sl
 8009d08:	4699      	mov	r9, r3
 8009d0a:	46a2      	mov	sl, r4
 8009d0c:	eb19 0905 	adds.w	r9, r9, r5
 8009d10:	eb4a 0a06 	adc.w	sl, sl, r6
 8009d14:	f04f 0100 	mov.w	r1, #0
 8009d18:	f04f 0200 	mov.w	r2, #0
 8009d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d28:	4689      	mov	r9, r1
 8009d2a:	4692      	mov	sl, r2
 8009d2c:	eb19 0005 	adds.w	r0, r9, r5
 8009d30:	eb4a 0106 	adc.w	r1, sl, r6
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	461d      	mov	r5, r3
 8009d3a:	f04f 0600 	mov.w	r6, #0
 8009d3e:	196b      	adds	r3, r5, r5
 8009d40:	eb46 0406 	adc.w	r4, r6, r6
 8009d44:	461a      	mov	r2, r3
 8009d46:	4623      	mov	r3, r4
 8009d48:	f7f6 ff56 	bl	8000bf8 <__aeabi_uldivmod>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	460c      	mov	r4, r1
 8009d50:	461a      	mov	r2, r3
 8009d52:	4b8b      	ldr	r3, [pc, #556]	; (8009f80 <UART_SetConfig+0x384>)
 8009d54:	fba3 1302 	umull	r1, r3, r3, r2
 8009d58:	095b      	lsrs	r3, r3, #5
 8009d5a:	2164      	movs	r1, #100	; 0x64
 8009d5c:	fb01 f303 	mul.w	r3, r1, r3
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	00db      	lsls	r3, r3, #3
 8009d64:	3332      	adds	r3, #50	; 0x32
 8009d66:	4a86      	ldr	r2, [pc, #536]	; (8009f80 <UART_SetConfig+0x384>)
 8009d68:	fba2 2303 	umull	r2, r3, r2, r3
 8009d6c:	095b      	lsrs	r3, r3, #5
 8009d6e:	005b      	lsls	r3, r3, #1
 8009d70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009d74:	4498      	add	r8, r3
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	461d      	mov	r5, r3
 8009d7a:	f04f 0600 	mov.w	r6, #0
 8009d7e:	46a9      	mov	r9, r5
 8009d80:	46b2      	mov	sl, r6
 8009d82:	eb19 0309 	adds.w	r3, r9, r9
 8009d86:	eb4a 040a 	adc.w	r4, sl, sl
 8009d8a:	4699      	mov	r9, r3
 8009d8c:	46a2      	mov	sl, r4
 8009d8e:	eb19 0905 	adds.w	r9, r9, r5
 8009d92:	eb4a 0a06 	adc.w	sl, sl, r6
 8009d96:	f04f 0100 	mov.w	r1, #0
 8009d9a:	f04f 0200 	mov.w	r2, #0
 8009d9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009da2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009da6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009daa:	4689      	mov	r9, r1
 8009dac:	4692      	mov	sl, r2
 8009dae:	eb19 0005 	adds.w	r0, r9, r5
 8009db2:	eb4a 0106 	adc.w	r1, sl, r6
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	461d      	mov	r5, r3
 8009dbc:	f04f 0600 	mov.w	r6, #0
 8009dc0:	196b      	adds	r3, r5, r5
 8009dc2:	eb46 0406 	adc.w	r4, r6, r6
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	4623      	mov	r3, r4
 8009dca:	f7f6 ff15 	bl	8000bf8 <__aeabi_uldivmod>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	460c      	mov	r4, r1
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	4b6a      	ldr	r3, [pc, #424]	; (8009f80 <UART_SetConfig+0x384>)
 8009dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8009dda:	095b      	lsrs	r3, r3, #5
 8009ddc:	2164      	movs	r1, #100	; 0x64
 8009dde:	fb01 f303 	mul.w	r3, r1, r3
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	00db      	lsls	r3, r3, #3
 8009de6:	3332      	adds	r3, #50	; 0x32
 8009de8:	4a65      	ldr	r2, [pc, #404]	; (8009f80 <UART_SetConfig+0x384>)
 8009dea:	fba2 2303 	umull	r2, r3, r2, r3
 8009dee:	095b      	lsrs	r3, r3, #5
 8009df0:	f003 0207 	and.w	r2, r3, #7
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4442      	add	r2, r8
 8009dfa:	609a      	str	r2, [r3, #8]
 8009dfc:	e26f      	b.n	800a2de <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009dfe:	f7fe fab5 	bl	800836c <HAL_RCC_GetPCLK1Freq>
 8009e02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	461d      	mov	r5, r3
 8009e08:	f04f 0600 	mov.w	r6, #0
 8009e0c:	46a8      	mov	r8, r5
 8009e0e:	46b1      	mov	r9, r6
 8009e10:	eb18 0308 	adds.w	r3, r8, r8
 8009e14:	eb49 0409 	adc.w	r4, r9, r9
 8009e18:	4698      	mov	r8, r3
 8009e1a:	46a1      	mov	r9, r4
 8009e1c:	eb18 0805 	adds.w	r8, r8, r5
 8009e20:	eb49 0906 	adc.w	r9, r9, r6
 8009e24:	f04f 0100 	mov.w	r1, #0
 8009e28:	f04f 0200 	mov.w	r2, #0
 8009e2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009e30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009e34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009e38:	4688      	mov	r8, r1
 8009e3a:	4691      	mov	r9, r2
 8009e3c:	eb18 0005 	adds.w	r0, r8, r5
 8009e40:	eb49 0106 	adc.w	r1, r9, r6
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	461d      	mov	r5, r3
 8009e4a:	f04f 0600 	mov.w	r6, #0
 8009e4e:	196b      	adds	r3, r5, r5
 8009e50:	eb46 0406 	adc.w	r4, r6, r6
 8009e54:	461a      	mov	r2, r3
 8009e56:	4623      	mov	r3, r4
 8009e58:	f7f6 fece 	bl	8000bf8 <__aeabi_uldivmod>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	460c      	mov	r4, r1
 8009e60:	461a      	mov	r2, r3
 8009e62:	4b47      	ldr	r3, [pc, #284]	; (8009f80 <UART_SetConfig+0x384>)
 8009e64:	fba3 2302 	umull	r2, r3, r3, r2
 8009e68:	095b      	lsrs	r3, r3, #5
 8009e6a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	461d      	mov	r5, r3
 8009e72:	f04f 0600 	mov.w	r6, #0
 8009e76:	46a9      	mov	r9, r5
 8009e78:	46b2      	mov	sl, r6
 8009e7a:	eb19 0309 	adds.w	r3, r9, r9
 8009e7e:	eb4a 040a 	adc.w	r4, sl, sl
 8009e82:	4699      	mov	r9, r3
 8009e84:	46a2      	mov	sl, r4
 8009e86:	eb19 0905 	adds.w	r9, r9, r5
 8009e8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8009e8e:	f04f 0100 	mov.w	r1, #0
 8009e92:	f04f 0200 	mov.w	r2, #0
 8009e96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009e9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009ea2:	4689      	mov	r9, r1
 8009ea4:	4692      	mov	sl, r2
 8009ea6:	eb19 0005 	adds.w	r0, r9, r5
 8009eaa:	eb4a 0106 	adc.w	r1, sl, r6
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	461d      	mov	r5, r3
 8009eb4:	f04f 0600 	mov.w	r6, #0
 8009eb8:	196b      	adds	r3, r5, r5
 8009eba:	eb46 0406 	adc.w	r4, r6, r6
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	4623      	mov	r3, r4
 8009ec2:	f7f6 fe99 	bl	8000bf8 <__aeabi_uldivmod>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	460c      	mov	r4, r1
 8009eca:	461a      	mov	r2, r3
 8009ecc:	4b2c      	ldr	r3, [pc, #176]	; (8009f80 <UART_SetConfig+0x384>)
 8009ece:	fba3 1302 	umull	r1, r3, r3, r2
 8009ed2:	095b      	lsrs	r3, r3, #5
 8009ed4:	2164      	movs	r1, #100	; 0x64
 8009ed6:	fb01 f303 	mul.w	r3, r1, r3
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	00db      	lsls	r3, r3, #3
 8009ede:	3332      	adds	r3, #50	; 0x32
 8009ee0:	4a27      	ldr	r2, [pc, #156]	; (8009f80 <UART_SetConfig+0x384>)
 8009ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee6:	095b      	lsrs	r3, r3, #5
 8009ee8:	005b      	lsls	r3, r3, #1
 8009eea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009eee:	4498      	add	r8, r3
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	461d      	mov	r5, r3
 8009ef4:	f04f 0600 	mov.w	r6, #0
 8009ef8:	46a9      	mov	r9, r5
 8009efa:	46b2      	mov	sl, r6
 8009efc:	eb19 0309 	adds.w	r3, r9, r9
 8009f00:	eb4a 040a 	adc.w	r4, sl, sl
 8009f04:	4699      	mov	r9, r3
 8009f06:	46a2      	mov	sl, r4
 8009f08:	eb19 0905 	adds.w	r9, r9, r5
 8009f0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8009f10:	f04f 0100 	mov.w	r1, #0
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f24:	4689      	mov	r9, r1
 8009f26:	4692      	mov	sl, r2
 8009f28:	eb19 0005 	adds.w	r0, r9, r5
 8009f2c:	eb4a 0106 	adc.w	r1, sl, r6
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	461d      	mov	r5, r3
 8009f36:	f04f 0600 	mov.w	r6, #0
 8009f3a:	196b      	adds	r3, r5, r5
 8009f3c:	eb46 0406 	adc.w	r4, r6, r6
 8009f40:	461a      	mov	r2, r3
 8009f42:	4623      	mov	r3, r4
 8009f44:	f7f6 fe58 	bl	8000bf8 <__aeabi_uldivmod>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	460c      	mov	r4, r1
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	4b0c      	ldr	r3, [pc, #48]	; (8009f80 <UART_SetConfig+0x384>)
 8009f50:	fba3 1302 	umull	r1, r3, r3, r2
 8009f54:	095b      	lsrs	r3, r3, #5
 8009f56:	2164      	movs	r1, #100	; 0x64
 8009f58:	fb01 f303 	mul.w	r3, r1, r3
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	00db      	lsls	r3, r3, #3
 8009f60:	3332      	adds	r3, #50	; 0x32
 8009f62:	4a07      	ldr	r2, [pc, #28]	; (8009f80 <UART_SetConfig+0x384>)
 8009f64:	fba2 2303 	umull	r2, r3, r2, r3
 8009f68:	095b      	lsrs	r3, r3, #5
 8009f6a:	f003 0207 	and.w	r2, r3, #7
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4442      	add	r2, r8
 8009f74:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009f76:	e1b2      	b.n	800a2de <UART_SetConfig+0x6e2>
 8009f78:	40011000 	.word	0x40011000
 8009f7c:	40011400 	.word	0x40011400
 8009f80:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4ad7      	ldr	r2, [pc, #860]	; (800a2e8 <UART_SetConfig+0x6ec>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d005      	beq.n	8009f9a <UART_SetConfig+0x39e>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4ad6      	ldr	r2, [pc, #856]	; (800a2ec <UART_SetConfig+0x6f0>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	f040 80d1 	bne.w	800a13c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009f9a:	f7fe f9fb 	bl	8008394 <HAL_RCC_GetPCLK2Freq>
 8009f9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	469a      	mov	sl, r3
 8009fa4:	f04f 0b00 	mov.w	fp, #0
 8009fa8:	46d0      	mov	r8, sl
 8009faa:	46d9      	mov	r9, fp
 8009fac:	eb18 0308 	adds.w	r3, r8, r8
 8009fb0:	eb49 0409 	adc.w	r4, r9, r9
 8009fb4:	4698      	mov	r8, r3
 8009fb6:	46a1      	mov	r9, r4
 8009fb8:	eb18 080a 	adds.w	r8, r8, sl
 8009fbc:	eb49 090b 	adc.w	r9, r9, fp
 8009fc0:	f04f 0100 	mov.w	r1, #0
 8009fc4:	f04f 0200 	mov.w	r2, #0
 8009fc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009fcc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009fd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009fd4:	4688      	mov	r8, r1
 8009fd6:	4691      	mov	r9, r2
 8009fd8:	eb1a 0508 	adds.w	r5, sl, r8
 8009fdc:	eb4b 0609 	adc.w	r6, fp, r9
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	f04f 0200 	mov.w	r2, #0
 8009fea:	f04f 0300 	mov.w	r3, #0
 8009fee:	f04f 0400 	mov.w	r4, #0
 8009ff2:	0094      	lsls	r4, r2, #2
 8009ff4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009ff8:	008b      	lsls	r3, r1, #2
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	4623      	mov	r3, r4
 8009ffe:	4628      	mov	r0, r5
 800a000:	4631      	mov	r1, r6
 800a002:	f7f6 fdf9 	bl	8000bf8 <__aeabi_uldivmod>
 800a006:	4603      	mov	r3, r0
 800a008:	460c      	mov	r4, r1
 800a00a:	461a      	mov	r2, r3
 800a00c:	4bb8      	ldr	r3, [pc, #736]	; (800a2f0 <UART_SetConfig+0x6f4>)
 800a00e:	fba3 2302 	umull	r2, r3, r3, r2
 800a012:	095b      	lsrs	r3, r3, #5
 800a014:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	469b      	mov	fp, r3
 800a01c:	f04f 0c00 	mov.w	ip, #0
 800a020:	46d9      	mov	r9, fp
 800a022:	46e2      	mov	sl, ip
 800a024:	eb19 0309 	adds.w	r3, r9, r9
 800a028:	eb4a 040a 	adc.w	r4, sl, sl
 800a02c:	4699      	mov	r9, r3
 800a02e:	46a2      	mov	sl, r4
 800a030:	eb19 090b 	adds.w	r9, r9, fp
 800a034:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a038:	f04f 0100 	mov.w	r1, #0
 800a03c:	f04f 0200 	mov.w	r2, #0
 800a040:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a044:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a048:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a04c:	4689      	mov	r9, r1
 800a04e:	4692      	mov	sl, r2
 800a050:	eb1b 0509 	adds.w	r5, fp, r9
 800a054:	eb4c 060a 	adc.w	r6, ip, sl
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	4619      	mov	r1, r3
 800a05e:	f04f 0200 	mov.w	r2, #0
 800a062:	f04f 0300 	mov.w	r3, #0
 800a066:	f04f 0400 	mov.w	r4, #0
 800a06a:	0094      	lsls	r4, r2, #2
 800a06c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a070:	008b      	lsls	r3, r1, #2
 800a072:	461a      	mov	r2, r3
 800a074:	4623      	mov	r3, r4
 800a076:	4628      	mov	r0, r5
 800a078:	4631      	mov	r1, r6
 800a07a:	f7f6 fdbd 	bl	8000bf8 <__aeabi_uldivmod>
 800a07e:	4603      	mov	r3, r0
 800a080:	460c      	mov	r4, r1
 800a082:	461a      	mov	r2, r3
 800a084:	4b9a      	ldr	r3, [pc, #616]	; (800a2f0 <UART_SetConfig+0x6f4>)
 800a086:	fba3 1302 	umull	r1, r3, r3, r2
 800a08a:	095b      	lsrs	r3, r3, #5
 800a08c:	2164      	movs	r1, #100	; 0x64
 800a08e:	fb01 f303 	mul.w	r3, r1, r3
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	011b      	lsls	r3, r3, #4
 800a096:	3332      	adds	r3, #50	; 0x32
 800a098:	4a95      	ldr	r2, [pc, #596]	; (800a2f0 <UART_SetConfig+0x6f4>)
 800a09a:	fba2 2303 	umull	r2, r3, r2, r3
 800a09e:	095b      	lsrs	r3, r3, #5
 800a0a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0a4:	4498      	add	r8, r3
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	469b      	mov	fp, r3
 800a0aa:	f04f 0c00 	mov.w	ip, #0
 800a0ae:	46d9      	mov	r9, fp
 800a0b0:	46e2      	mov	sl, ip
 800a0b2:	eb19 0309 	adds.w	r3, r9, r9
 800a0b6:	eb4a 040a 	adc.w	r4, sl, sl
 800a0ba:	4699      	mov	r9, r3
 800a0bc:	46a2      	mov	sl, r4
 800a0be:	eb19 090b 	adds.w	r9, r9, fp
 800a0c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a0c6:	f04f 0100 	mov.w	r1, #0
 800a0ca:	f04f 0200 	mov.w	r2, #0
 800a0ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a0d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a0da:	4689      	mov	r9, r1
 800a0dc:	4692      	mov	sl, r2
 800a0de:	eb1b 0509 	adds.w	r5, fp, r9
 800a0e2:	eb4c 060a 	adc.w	r6, ip, sl
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	f04f 0200 	mov.w	r2, #0
 800a0f0:	f04f 0300 	mov.w	r3, #0
 800a0f4:	f04f 0400 	mov.w	r4, #0
 800a0f8:	0094      	lsls	r4, r2, #2
 800a0fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a0fe:	008b      	lsls	r3, r1, #2
 800a100:	461a      	mov	r2, r3
 800a102:	4623      	mov	r3, r4
 800a104:	4628      	mov	r0, r5
 800a106:	4631      	mov	r1, r6
 800a108:	f7f6 fd76 	bl	8000bf8 <__aeabi_uldivmod>
 800a10c:	4603      	mov	r3, r0
 800a10e:	460c      	mov	r4, r1
 800a110:	461a      	mov	r2, r3
 800a112:	4b77      	ldr	r3, [pc, #476]	; (800a2f0 <UART_SetConfig+0x6f4>)
 800a114:	fba3 1302 	umull	r1, r3, r3, r2
 800a118:	095b      	lsrs	r3, r3, #5
 800a11a:	2164      	movs	r1, #100	; 0x64
 800a11c:	fb01 f303 	mul.w	r3, r1, r3
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	011b      	lsls	r3, r3, #4
 800a124:	3332      	adds	r3, #50	; 0x32
 800a126:	4a72      	ldr	r2, [pc, #456]	; (800a2f0 <UART_SetConfig+0x6f4>)
 800a128:	fba2 2303 	umull	r2, r3, r2, r3
 800a12c:	095b      	lsrs	r3, r3, #5
 800a12e:	f003 020f 	and.w	r2, r3, #15
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4442      	add	r2, r8
 800a138:	609a      	str	r2, [r3, #8]
 800a13a:	e0d0      	b.n	800a2de <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a13c:	f7fe f916 	bl	800836c <HAL_RCC_GetPCLK1Freq>
 800a140:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	469a      	mov	sl, r3
 800a146:	f04f 0b00 	mov.w	fp, #0
 800a14a:	46d0      	mov	r8, sl
 800a14c:	46d9      	mov	r9, fp
 800a14e:	eb18 0308 	adds.w	r3, r8, r8
 800a152:	eb49 0409 	adc.w	r4, r9, r9
 800a156:	4698      	mov	r8, r3
 800a158:	46a1      	mov	r9, r4
 800a15a:	eb18 080a 	adds.w	r8, r8, sl
 800a15e:	eb49 090b 	adc.w	r9, r9, fp
 800a162:	f04f 0100 	mov.w	r1, #0
 800a166:	f04f 0200 	mov.w	r2, #0
 800a16a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a16e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a172:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a176:	4688      	mov	r8, r1
 800a178:	4691      	mov	r9, r2
 800a17a:	eb1a 0508 	adds.w	r5, sl, r8
 800a17e:	eb4b 0609 	adc.w	r6, fp, r9
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	4619      	mov	r1, r3
 800a188:	f04f 0200 	mov.w	r2, #0
 800a18c:	f04f 0300 	mov.w	r3, #0
 800a190:	f04f 0400 	mov.w	r4, #0
 800a194:	0094      	lsls	r4, r2, #2
 800a196:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a19a:	008b      	lsls	r3, r1, #2
 800a19c:	461a      	mov	r2, r3
 800a19e:	4623      	mov	r3, r4
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	4631      	mov	r1, r6
 800a1a4:	f7f6 fd28 	bl	8000bf8 <__aeabi_uldivmod>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	4b50      	ldr	r3, [pc, #320]	; (800a2f0 <UART_SetConfig+0x6f4>)
 800a1b0:	fba3 2302 	umull	r2, r3, r3, r2
 800a1b4:	095b      	lsrs	r3, r3, #5
 800a1b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	469b      	mov	fp, r3
 800a1be:	f04f 0c00 	mov.w	ip, #0
 800a1c2:	46d9      	mov	r9, fp
 800a1c4:	46e2      	mov	sl, ip
 800a1c6:	eb19 0309 	adds.w	r3, r9, r9
 800a1ca:	eb4a 040a 	adc.w	r4, sl, sl
 800a1ce:	4699      	mov	r9, r3
 800a1d0:	46a2      	mov	sl, r4
 800a1d2:	eb19 090b 	adds.w	r9, r9, fp
 800a1d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a1da:	f04f 0100 	mov.w	r1, #0
 800a1de:	f04f 0200 	mov.w	r2, #0
 800a1e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a1e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a1ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a1ee:	4689      	mov	r9, r1
 800a1f0:	4692      	mov	sl, r2
 800a1f2:	eb1b 0509 	adds.w	r5, fp, r9
 800a1f6:	eb4c 060a 	adc.w	r6, ip, sl
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	4619      	mov	r1, r3
 800a200:	f04f 0200 	mov.w	r2, #0
 800a204:	f04f 0300 	mov.w	r3, #0
 800a208:	f04f 0400 	mov.w	r4, #0
 800a20c:	0094      	lsls	r4, r2, #2
 800a20e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a212:	008b      	lsls	r3, r1, #2
 800a214:	461a      	mov	r2, r3
 800a216:	4623      	mov	r3, r4
 800a218:	4628      	mov	r0, r5
 800a21a:	4631      	mov	r1, r6
 800a21c:	f7f6 fcec 	bl	8000bf8 <__aeabi_uldivmod>
 800a220:	4603      	mov	r3, r0
 800a222:	460c      	mov	r4, r1
 800a224:	461a      	mov	r2, r3
 800a226:	4b32      	ldr	r3, [pc, #200]	; (800a2f0 <UART_SetConfig+0x6f4>)
 800a228:	fba3 1302 	umull	r1, r3, r3, r2
 800a22c:	095b      	lsrs	r3, r3, #5
 800a22e:	2164      	movs	r1, #100	; 0x64
 800a230:	fb01 f303 	mul.w	r3, r1, r3
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	011b      	lsls	r3, r3, #4
 800a238:	3332      	adds	r3, #50	; 0x32
 800a23a:	4a2d      	ldr	r2, [pc, #180]	; (800a2f0 <UART_SetConfig+0x6f4>)
 800a23c:	fba2 2303 	umull	r2, r3, r2, r3
 800a240:	095b      	lsrs	r3, r3, #5
 800a242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a246:	4498      	add	r8, r3
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	469b      	mov	fp, r3
 800a24c:	f04f 0c00 	mov.w	ip, #0
 800a250:	46d9      	mov	r9, fp
 800a252:	46e2      	mov	sl, ip
 800a254:	eb19 0309 	adds.w	r3, r9, r9
 800a258:	eb4a 040a 	adc.w	r4, sl, sl
 800a25c:	4699      	mov	r9, r3
 800a25e:	46a2      	mov	sl, r4
 800a260:	eb19 090b 	adds.w	r9, r9, fp
 800a264:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a268:	f04f 0100 	mov.w	r1, #0
 800a26c:	f04f 0200 	mov.w	r2, #0
 800a270:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a274:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a278:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a27c:	4689      	mov	r9, r1
 800a27e:	4692      	mov	sl, r2
 800a280:	eb1b 0509 	adds.w	r5, fp, r9
 800a284:	eb4c 060a 	adc.w	r6, ip, sl
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	4619      	mov	r1, r3
 800a28e:	f04f 0200 	mov.w	r2, #0
 800a292:	f04f 0300 	mov.w	r3, #0
 800a296:	f04f 0400 	mov.w	r4, #0
 800a29a:	0094      	lsls	r4, r2, #2
 800a29c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a2a0:	008b      	lsls	r3, r1, #2
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	4623      	mov	r3, r4
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	f7f6 fca5 	bl	8000bf8 <__aeabi_uldivmod>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	4b0e      	ldr	r3, [pc, #56]	; (800a2f0 <UART_SetConfig+0x6f4>)
 800a2b6:	fba3 1302 	umull	r1, r3, r3, r2
 800a2ba:	095b      	lsrs	r3, r3, #5
 800a2bc:	2164      	movs	r1, #100	; 0x64
 800a2be:	fb01 f303 	mul.w	r3, r1, r3
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	011b      	lsls	r3, r3, #4
 800a2c6:	3332      	adds	r3, #50	; 0x32
 800a2c8:	4a09      	ldr	r2, [pc, #36]	; (800a2f0 <UART_SetConfig+0x6f4>)
 800a2ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ce:	095b      	lsrs	r3, r3, #5
 800a2d0:	f003 020f 	and.w	r2, r3, #15
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4442      	add	r2, r8
 800a2da:	609a      	str	r2, [r3, #8]
}
 800a2dc:	e7ff      	b.n	800a2de <UART_SetConfig+0x6e2>
 800a2de:	bf00      	nop
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e8:	40011000 	.word	0x40011000
 800a2ec:	40011400 	.word	0x40011400
 800a2f0:	51eb851f 	.word	0x51eb851f

0800a2f4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800a2fe:	2300      	movs	r3, #0
 800a300:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800a302:	2300      	movs	r3, #0
 800a304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d029      	beq.n	800a362 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a31a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a31e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a328:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800a32e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800a334:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800a33a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800a340:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800a346:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800a34c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800a352:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	4313      	orrs	r3, r2
 800a358:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	601a      	str	r2, [r3, #0]
 800a360:	e034      	b.n	800a3cc <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a36e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a378:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a37e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	4313      	orrs	r3, r2
 800a384:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a392:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a396:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a3a0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800a3a6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800a3ac:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800a3b2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800a3b8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800a3cc:	2300      	movs	r3, #0
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3714      	adds	r7, #20
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b087      	sub	sp, #28
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	60f8      	str	r0, [r7, #12]
 800a3e2:	60b9      	str	r1, [r7, #8]
 800a3e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d02e      	beq.n	800a452 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a400:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	3b01      	subs	r3, #1
 800a40e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a410:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	3b01      	subs	r3, #1
 800a418:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a41a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	3b01      	subs	r3, #1
 800a422:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a424:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a42e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	695b      	ldr	r3, [r3, #20]
 800a434:	3b01      	subs	r3, #1
 800a436:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a438:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	3b01      	subs	r3, #1
 800a440:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a442:	4313      	orrs	r3, r2
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	4313      	orrs	r3, r2
 800a448:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	609a      	str	r2, [r3, #8]
 800a450:	e03b      	b.n	800a4ca <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a45e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a462:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	3b01      	subs	r3, #1
 800a46a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	695b      	ldr	r3, [r3, #20]
 800a470:	3b01      	subs	r3, #1
 800a472:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a474:	4313      	orrs	r3, r2
 800a476:	697a      	ldr	r2, [r7, #20]
 800a478:	4313      	orrs	r3, r2
 800a47a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a488:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	3b01      	subs	r3, #1
 800a496:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a498:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a4a2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a4ac:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	371c      	adds	r7, #28
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a4f4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a4fe:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a506:	4313      	orrs	r3, r2
 800a508:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800a50a:	693a      	ldr	r2, [r7, #16]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800a510:	f7fa ff68 	bl	80053e4 <HAL_GetTick>
 800a514:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a516:	e010      	b.n	800a53a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51e:	d00c      	beq.n	800a53a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d007      	beq.n	800a536 <FMC_SDRAM_SendCommand+0x5e>
 800a526:	f7fa ff5d 	bl	80053e4 <HAL_GetTick>
 800a52a:	4602      	mov	r2, r0
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	429a      	cmp	r2, r3
 800a534:	d201      	bcs.n	800a53a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	e006      	b.n	800a548 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	f003 0320 	and.w	r3, r3, #32
 800a542:	2b20      	cmp	r3, #32
 800a544:	d0e8      	beq.n	800a518 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3718      	adds	r7, #24
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	695a      	ldr	r2, [r3, #20]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	005b      	lsls	r3, r3, #1
 800a562:	431a      	orrs	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
	...

0800a578 <__errno>:
 800a578:	4b01      	ldr	r3, [pc, #4]	; (800a580 <__errno+0x8>)
 800a57a:	6818      	ldr	r0, [r3, #0]
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	20000068 	.word	0x20000068

0800a584 <__libc_init_array>:
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	4e0d      	ldr	r6, [pc, #52]	; (800a5bc <__libc_init_array+0x38>)
 800a588:	4c0d      	ldr	r4, [pc, #52]	; (800a5c0 <__libc_init_array+0x3c>)
 800a58a:	1ba4      	subs	r4, r4, r6
 800a58c:	10a4      	asrs	r4, r4, #2
 800a58e:	2500      	movs	r5, #0
 800a590:	42a5      	cmp	r5, r4
 800a592:	d109      	bne.n	800a5a8 <__libc_init_array+0x24>
 800a594:	4e0b      	ldr	r6, [pc, #44]	; (800a5c4 <__libc_init_array+0x40>)
 800a596:	4c0c      	ldr	r4, [pc, #48]	; (800a5c8 <__libc_init_array+0x44>)
 800a598:	f004 f912 	bl	800e7c0 <_init>
 800a59c:	1ba4      	subs	r4, r4, r6
 800a59e:	10a4      	asrs	r4, r4, #2
 800a5a0:	2500      	movs	r5, #0
 800a5a2:	42a5      	cmp	r5, r4
 800a5a4:	d105      	bne.n	800a5b2 <__libc_init_array+0x2e>
 800a5a6:	bd70      	pop	{r4, r5, r6, pc}
 800a5a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5ac:	4798      	blx	r3
 800a5ae:	3501      	adds	r5, #1
 800a5b0:	e7ee      	b.n	800a590 <__libc_init_array+0xc>
 800a5b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5b6:	4798      	blx	r3
 800a5b8:	3501      	adds	r5, #1
 800a5ba:	e7f2      	b.n	800a5a2 <__libc_init_array+0x1e>
 800a5bc:	08011050 	.word	0x08011050
 800a5c0:	08011050 	.word	0x08011050
 800a5c4:	08011050 	.word	0x08011050
 800a5c8:	08011054 	.word	0x08011054

0800a5cc <malloc>:
 800a5cc:	4b02      	ldr	r3, [pc, #8]	; (800a5d8 <malloc+0xc>)
 800a5ce:	4601      	mov	r1, r0
 800a5d0:	6818      	ldr	r0, [r3, #0]
 800a5d2:	f000 b861 	b.w	800a698 <_malloc_r>
 800a5d6:	bf00      	nop
 800a5d8:	20000068 	.word	0x20000068

0800a5dc <free>:
 800a5dc:	4b02      	ldr	r3, [pc, #8]	; (800a5e8 <free+0xc>)
 800a5de:	4601      	mov	r1, r0
 800a5e0:	6818      	ldr	r0, [r3, #0]
 800a5e2:	f000 b80b 	b.w	800a5fc <_free_r>
 800a5e6:	bf00      	nop
 800a5e8:	20000068 	.word	0x20000068

0800a5ec <memset>:
 800a5ec:	4402      	add	r2, r0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d100      	bne.n	800a5f6 <memset+0xa>
 800a5f4:	4770      	bx	lr
 800a5f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5fa:	e7f9      	b.n	800a5f0 <memset+0x4>

0800a5fc <_free_r>:
 800a5fc:	b538      	push	{r3, r4, r5, lr}
 800a5fe:	4605      	mov	r5, r0
 800a600:	2900      	cmp	r1, #0
 800a602:	d045      	beq.n	800a690 <_free_r+0x94>
 800a604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a608:	1f0c      	subs	r4, r1, #4
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	bfb8      	it	lt
 800a60e:	18e4      	addlt	r4, r4, r3
 800a610:	f000 f930 	bl	800a874 <__malloc_lock>
 800a614:	4a1f      	ldr	r2, [pc, #124]	; (800a694 <_free_r+0x98>)
 800a616:	6813      	ldr	r3, [r2, #0]
 800a618:	4610      	mov	r0, r2
 800a61a:	b933      	cbnz	r3, 800a62a <_free_r+0x2e>
 800a61c:	6063      	str	r3, [r4, #4]
 800a61e:	6014      	str	r4, [r2, #0]
 800a620:	4628      	mov	r0, r5
 800a622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a626:	f000 b926 	b.w	800a876 <__malloc_unlock>
 800a62a:	42a3      	cmp	r3, r4
 800a62c:	d90c      	bls.n	800a648 <_free_r+0x4c>
 800a62e:	6821      	ldr	r1, [r4, #0]
 800a630:	1862      	adds	r2, r4, r1
 800a632:	4293      	cmp	r3, r2
 800a634:	bf04      	itt	eq
 800a636:	681a      	ldreq	r2, [r3, #0]
 800a638:	685b      	ldreq	r3, [r3, #4]
 800a63a:	6063      	str	r3, [r4, #4]
 800a63c:	bf04      	itt	eq
 800a63e:	1852      	addeq	r2, r2, r1
 800a640:	6022      	streq	r2, [r4, #0]
 800a642:	6004      	str	r4, [r0, #0]
 800a644:	e7ec      	b.n	800a620 <_free_r+0x24>
 800a646:	4613      	mov	r3, r2
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	b10a      	cbz	r2, 800a650 <_free_r+0x54>
 800a64c:	42a2      	cmp	r2, r4
 800a64e:	d9fa      	bls.n	800a646 <_free_r+0x4a>
 800a650:	6819      	ldr	r1, [r3, #0]
 800a652:	1858      	adds	r0, r3, r1
 800a654:	42a0      	cmp	r0, r4
 800a656:	d10b      	bne.n	800a670 <_free_r+0x74>
 800a658:	6820      	ldr	r0, [r4, #0]
 800a65a:	4401      	add	r1, r0
 800a65c:	1858      	adds	r0, r3, r1
 800a65e:	4282      	cmp	r2, r0
 800a660:	6019      	str	r1, [r3, #0]
 800a662:	d1dd      	bne.n	800a620 <_free_r+0x24>
 800a664:	6810      	ldr	r0, [r2, #0]
 800a666:	6852      	ldr	r2, [r2, #4]
 800a668:	605a      	str	r2, [r3, #4]
 800a66a:	4401      	add	r1, r0
 800a66c:	6019      	str	r1, [r3, #0]
 800a66e:	e7d7      	b.n	800a620 <_free_r+0x24>
 800a670:	d902      	bls.n	800a678 <_free_r+0x7c>
 800a672:	230c      	movs	r3, #12
 800a674:	602b      	str	r3, [r5, #0]
 800a676:	e7d3      	b.n	800a620 <_free_r+0x24>
 800a678:	6820      	ldr	r0, [r4, #0]
 800a67a:	1821      	adds	r1, r4, r0
 800a67c:	428a      	cmp	r2, r1
 800a67e:	bf04      	itt	eq
 800a680:	6811      	ldreq	r1, [r2, #0]
 800a682:	6852      	ldreq	r2, [r2, #4]
 800a684:	6062      	str	r2, [r4, #4]
 800a686:	bf04      	itt	eq
 800a688:	1809      	addeq	r1, r1, r0
 800a68a:	6021      	streq	r1, [r4, #0]
 800a68c:	605c      	str	r4, [r3, #4]
 800a68e:	e7c7      	b.n	800a620 <_free_r+0x24>
 800a690:	bd38      	pop	{r3, r4, r5, pc}
 800a692:	bf00      	nop
 800a694:	200002a4 	.word	0x200002a4

0800a698 <_malloc_r>:
 800a698:	b570      	push	{r4, r5, r6, lr}
 800a69a:	1ccd      	adds	r5, r1, #3
 800a69c:	f025 0503 	bic.w	r5, r5, #3
 800a6a0:	3508      	adds	r5, #8
 800a6a2:	2d0c      	cmp	r5, #12
 800a6a4:	bf38      	it	cc
 800a6a6:	250c      	movcc	r5, #12
 800a6a8:	2d00      	cmp	r5, #0
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	db01      	blt.n	800a6b2 <_malloc_r+0x1a>
 800a6ae:	42a9      	cmp	r1, r5
 800a6b0:	d903      	bls.n	800a6ba <_malloc_r+0x22>
 800a6b2:	230c      	movs	r3, #12
 800a6b4:	6033      	str	r3, [r6, #0]
 800a6b6:	2000      	movs	r0, #0
 800a6b8:	bd70      	pop	{r4, r5, r6, pc}
 800a6ba:	f000 f8db 	bl	800a874 <__malloc_lock>
 800a6be:	4a21      	ldr	r2, [pc, #132]	; (800a744 <_malloc_r+0xac>)
 800a6c0:	6814      	ldr	r4, [r2, #0]
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	b991      	cbnz	r1, 800a6ec <_malloc_r+0x54>
 800a6c6:	4c20      	ldr	r4, [pc, #128]	; (800a748 <_malloc_r+0xb0>)
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	b91b      	cbnz	r3, 800a6d4 <_malloc_r+0x3c>
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f000 f895 	bl	800a7fc <_sbrk_r>
 800a6d2:	6020      	str	r0, [r4, #0]
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f000 f890 	bl	800a7fc <_sbrk_r>
 800a6dc:	1c43      	adds	r3, r0, #1
 800a6de:	d124      	bne.n	800a72a <_malloc_r+0x92>
 800a6e0:	230c      	movs	r3, #12
 800a6e2:	6033      	str	r3, [r6, #0]
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f000 f8c6 	bl	800a876 <__malloc_unlock>
 800a6ea:	e7e4      	b.n	800a6b6 <_malloc_r+0x1e>
 800a6ec:	680b      	ldr	r3, [r1, #0]
 800a6ee:	1b5b      	subs	r3, r3, r5
 800a6f0:	d418      	bmi.n	800a724 <_malloc_r+0x8c>
 800a6f2:	2b0b      	cmp	r3, #11
 800a6f4:	d90f      	bls.n	800a716 <_malloc_r+0x7e>
 800a6f6:	600b      	str	r3, [r1, #0]
 800a6f8:	50cd      	str	r5, [r1, r3]
 800a6fa:	18cc      	adds	r4, r1, r3
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f000 f8ba 	bl	800a876 <__malloc_unlock>
 800a702:	f104 000b 	add.w	r0, r4, #11
 800a706:	1d23      	adds	r3, r4, #4
 800a708:	f020 0007 	bic.w	r0, r0, #7
 800a70c:	1ac3      	subs	r3, r0, r3
 800a70e:	d0d3      	beq.n	800a6b8 <_malloc_r+0x20>
 800a710:	425a      	negs	r2, r3
 800a712:	50e2      	str	r2, [r4, r3]
 800a714:	e7d0      	b.n	800a6b8 <_malloc_r+0x20>
 800a716:	428c      	cmp	r4, r1
 800a718:	684b      	ldr	r3, [r1, #4]
 800a71a:	bf16      	itet	ne
 800a71c:	6063      	strne	r3, [r4, #4]
 800a71e:	6013      	streq	r3, [r2, #0]
 800a720:	460c      	movne	r4, r1
 800a722:	e7eb      	b.n	800a6fc <_malloc_r+0x64>
 800a724:	460c      	mov	r4, r1
 800a726:	6849      	ldr	r1, [r1, #4]
 800a728:	e7cc      	b.n	800a6c4 <_malloc_r+0x2c>
 800a72a:	1cc4      	adds	r4, r0, #3
 800a72c:	f024 0403 	bic.w	r4, r4, #3
 800a730:	42a0      	cmp	r0, r4
 800a732:	d005      	beq.n	800a740 <_malloc_r+0xa8>
 800a734:	1a21      	subs	r1, r4, r0
 800a736:	4630      	mov	r0, r6
 800a738:	f000 f860 	bl	800a7fc <_sbrk_r>
 800a73c:	3001      	adds	r0, #1
 800a73e:	d0cf      	beq.n	800a6e0 <_malloc_r+0x48>
 800a740:	6025      	str	r5, [r4, #0]
 800a742:	e7db      	b.n	800a6fc <_malloc_r+0x64>
 800a744:	200002a4 	.word	0x200002a4
 800a748:	200002a8 	.word	0x200002a8

0800a74c <srand>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4b0d      	ldr	r3, [pc, #52]	; (800a784 <srand+0x38>)
 800a750:	681c      	ldr	r4, [r3, #0]
 800a752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a754:	4605      	mov	r5, r0
 800a756:	b97b      	cbnz	r3, 800a778 <srand+0x2c>
 800a758:	2018      	movs	r0, #24
 800a75a:	f7ff ff37 	bl	800a5cc <malloc>
 800a75e:	4a0a      	ldr	r2, [pc, #40]	; (800a788 <srand+0x3c>)
 800a760:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <srand+0x40>)
 800a762:	63a0      	str	r0, [r4, #56]	; 0x38
 800a764:	e9c0 2300 	strd	r2, r3, [r0]
 800a768:	4b09      	ldr	r3, [pc, #36]	; (800a790 <srand+0x44>)
 800a76a:	6083      	str	r3, [r0, #8]
 800a76c:	230b      	movs	r3, #11
 800a76e:	8183      	strh	r3, [r0, #12]
 800a770:	2201      	movs	r2, #1
 800a772:	2300      	movs	r3, #0
 800a774:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a778:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a77a:	2200      	movs	r2, #0
 800a77c:	611d      	str	r5, [r3, #16]
 800a77e:	615a      	str	r2, [r3, #20]
 800a780:	bd38      	pop	{r3, r4, r5, pc}
 800a782:	bf00      	nop
 800a784:	20000068 	.word	0x20000068
 800a788:	abcd330e 	.word	0xabcd330e
 800a78c:	e66d1234 	.word	0xe66d1234
 800a790:	0005deec 	.word	0x0005deec

0800a794 <rand>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	4b13      	ldr	r3, [pc, #76]	; (800a7e4 <rand+0x50>)
 800a798:	681c      	ldr	r4, [r3, #0]
 800a79a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a79c:	b97b      	cbnz	r3, 800a7be <rand+0x2a>
 800a79e:	2018      	movs	r0, #24
 800a7a0:	f7ff ff14 	bl	800a5cc <malloc>
 800a7a4:	4a10      	ldr	r2, [pc, #64]	; (800a7e8 <rand+0x54>)
 800a7a6:	4b11      	ldr	r3, [pc, #68]	; (800a7ec <rand+0x58>)
 800a7a8:	63a0      	str	r0, [r4, #56]	; 0x38
 800a7aa:	e9c0 2300 	strd	r2, r3, [r0]
 800a7ae:	4b10      	ldr	r3, [pc, #64]	; (800a7f0 <rand+0x5c>)
 800a7b0:	6083      	str	r3, [r0, #8]
 800a7b2:	230b      	movs	r3, #11
 800a7b4:	8183      	strh	r3, [r0, #12]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a7be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a7c0:	480c      	ldr	r0, [pc, #48]	; (800a7f4 <rand+0x60>)
 800a7c2:	690a      	ldr	r2, [r1, #16]
 800a7c4:	694b      	ldr	r3, [r1, #20]
 800a7c6:	4c0c      	ldr	r4, [pc, #48]	; (800a7f8 <rand+0x64>)
 800a7c8:	4350      	muls	r0, r2
 800a7ca:	fb04 0003 	mla	r0, r4, r3, r0
 800a7ce:	fba2 2304 	umull	r2, r3, r2, r4
 800a7d2:	4403      	add	r3, r0
 800a7d4:	1c54      	adds	r4, r2, #1
 800a7d6:	f143 0500 	adc.w	r5, r3, #0
 800a7da:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800a7de:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800a7e2:	bd38      	pop	{r3, r4, r5, pc}
 800a7e4:	20000068 	.word	0x20000068
 800a7e8:	abcd330e 	.word	0xabcd330e
 800a7ec:	e66d1234 	.word	0xe66d1234
 800a7f0:	0005deec 	.word	0x0005deec
 800a7f4:	5851f42d 	.word	0x5851f42d
 800a7f8:	4c957f2d 	.word	0x4c957f2d

0800a7fc <_sbrk_r>:
 800a7fc:	b538      	push	{r3, r4, r5, lr}
 800a7fe:	4c06      	ldr	r4, [pc, #24]	; (800a818 <_sbrk_r+0x1c>)
 800a800:	2300      	movs	r3, #0
 800a802:	4605      	mov	r5, r0
 800a804:	4608      	mov	r0, r1
 800a806:	6023      	str	r3, [r4, #0]
 800a808:	f7f9 f9ec 	bl	8003be4 <_sbrk>
 800a80c:	1c43      	adds	r3, r0, #1
 800a80e:	d102      	bne.n	800a816 <_sbrk_r+0x1a>
 800a810:	6823      	ldr	r3, [r4, #0]
 800a812:	b103      	cbz	r3, 800a816 <_sbrk_r+0x1a>
 800a814:	602b      	str	r3, [r5, #0]
 800a816:	bd38      	pop	{r3, r4, r5, pc}
 800a818:	20001660 	.word	0x20001660

0800a81c <time>:
 800a81c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a81e:	4b0b      	ldr	r3, [pc, #44]	; (800a84c <time+0x30>)
 800a820:	4604      	mov	r4, r0
 800a822:	2200      	movs	r2, #0
 800a824:	4669      	mov	r1, sp
 800a826:	6818      	ldr	r0, [r3, #0]
 800a828:	f000 f812 	bl	800a850 <_gettimeofday_r>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	da05      	bge.n	800a83c <time+0x20>
 800a830:	f04f 32ff 	mov.w	r2, #4294967295
 800a834:	f04f 33ff 	mov.w	r3, #4294967295
 800a838:	e9cd 2300 	strd	r2, r3, [sp]
 800a83c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a840:	b10c      	cbz	r4, 800a846 <time+0x2a>
 800a842:	e9c4 0100 	strd	r0, r1, [r4]
 800a846:	b004      	add	sp, #16
 800a848:	bd10      	pop	{r4, pc}
 800a84a:	bf00      	nop
 800a84c:	20000068 	.word	0x20000068

0800a850 <_gettimeofday_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4c07      	ldr	r4, [pc, #28]	; (800a870 <_gettimeofday_r+0x20>)
 800a854:	2300      	movs	r3, #0
 800a856:	4605      	mov	r5, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	4611      	mov	r1, r2
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	f003 ffa7 	bl	800e7b0 <_gettimeofday>
 800a862:	1c43      	adds	r3, r0, #1
 800a864:	d102      	bne.n	800a86c <_gettimeofday_r+0x1c>
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	b103      	cbz	r3, 800a86c <_gettimeofday_r+0x1c>
 800a86a:	602b      	str	r3, [r5, #0]
 800a86c:	bd38      	pop	{r3, r4, r5, pc}
 800a86e:	bf00      	nop
 800a870:	20001660 	.word	0x20001660

0800a874 <__malloc_lock>:
 800a874:	4770      	bx	lr

0800a876 <__malloc_unlock>:
 800a876:	4770      	bx	lr

0800a878 <cabs>:
 800a878:	b508      	push	{r3, lr}
 800a87a:	ed2d 8b06 	vpush	{d8-d10}
 800a87e:	eeb0 aa40 	vmov.f32	s20, s0
 800a882:	eef0 aa60 	vmov.f32	s21, s1
 800a886:	eeb0 9a41 	vmov.f32	s18, s2
 800a88a:	eef0 9a61 	vmov.f32	s19, s3
 800a88e:	f000 f997 	bl	800abc0 <creal>
 800a892:	eeb0 1a49 	vmov.f32	s2, s18
 800a896:	eef0 1a69 	vmov.f32	s3, s19
 800a89a:	eeb0 8a40 	vmov.f32	s16, s0
 800a89e:	eef0 8a60 	vmov.f32	s17, s1
 800a8a2:	eeb0 0a4a 	vmov.f32	s0, s20
 800a8a6:	eef0 0a6a 	vmov.f32	s1, s21
 800a8aa:	f000 f8ad 	bl	800aa08 <cimag>
 800a8ae:	eeb0 1a40 	vmov.f32	s2, s0
 800a8b2:	eef0 1a60 	vmov.f32	s3, s1
 800a8b6:	eeb0 0a48 	vmov.f32	s0, s16
 800a8ba:	eef0 0a68 	vmov.f32	s1, s17
 800a8be:	ecbd 8b06 	vpop	{d8-d10}
 800a8c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a8c6:	f000 bbc3 	b.w	800b050 <hypot>

0800a8ca <ccos>:
 800a8ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8cc:	ed2d 8b04 	vpush	{d8-d9}
 800a8d0:	eeb0 8a41 	vmov.f32	s16, s2
 800a8d4:	eef0 8a61 	vmov.f32	s17, s3
 800a8d8:	eeb0 9a40 	vmov.f32	s18, s0
 800a8dc:	eef0 9a60 	vmov.f32	s19, s1
 800a8e0:	b085      	sub	sp, #20
 800a8e2:	f000 f891 	bl	800aa08 <cimag>
 800a8e6:	a902      	add	r1, sp, #8
 800a8e8:	4668      	mov	r0, sp
 800a8ea:	f000 f83f 	bl	800a96c <_cchsh>
 800a8ee:	eeb0 1a48 	vmov.f32	s2, s16
 800a8f2:	eef0 1a68 	vmov.f32	s3, s17
 800a8f6:	eeb0 0a49 	vmov.f32	s0, s18
 800a8fa:	eef0 0a69 	vmov.f32	s1, s19
 800a8fe:	f000 f95f 	bl	800abc0 <creal>
 800a902:	f000 fa7d 	bl	800ae00 <sin>
 800a906:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a90a:	ec51 0b10 	vmov	r0, r1, d0
 800a90e:	f7f5 fe2b 	bl	8000568 <__aeabi_dmul>
 800a912:	eeb0 1a48 	vmov.f32	s2, s16
 800a916:	eef0 1a68 	vmov.f32	s3, s17
 800a91a:	eeb0 0a49 	vmov.f32	s0, s18
 800a91e:	eef0 0a69 	vmov.f32	s1, s19
 800a922:	4604      	mov	r4, r0
 800a924:	460d      	mov	r5, r1
 800a926:	f000 f94b 	bl	800abc0 <creal>
 800a92a:	f000 fa19 	bl	800ad60 <cos>
 800a92e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a932:	ec51 0b10 	vmov	r0, r1, d0
 800a936:	f7f5 fe17 	bl	8000568 <__aeabi_dmul>
 800a93a:	2200      	movs	r2, #0
 800a93c:	4606      	mov	r6, r0
 800a93e:	460f      	mov	r7, r1
 800a940:	2300      	movs	r3, #0
 800a942:	4620      	mov	r0, r4
 800a944:	4629      	mov	r1, r5
 800a946:	f7f5 fe0f 	bl	8000568 <__aeabi_dmul>
 800a94a:	4602      	mov	r2, r0
 800a94c:	460b      	mov	r3, r1
 800a94e:	4630      	mov	r0, r6
 800a950:	4639      	mov	r1, r7
 800a952:	f7f5 fc51 	bl	80001f8 <__aeabi_dsub>
 800a956:	4622      	mov	r2, r4
 800a958:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a95c:	ec41 0b10 	vmov	d0, r0, r1
 800a960:	ec43 2b11 	vmov	d1, r2, r3
 800a964:	b005      	add	sp, #20
 800a966:	ecbd 8b04 	vpop	{d8-d9}
 800a96a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a96c <_cchsh>:
 800a96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a970:	ed2d 8b02 	vpush	{d8}
 800a974:	eeb0 8a40 	vmov.f32	s16, s0
 800a978:	eef0 8a60 	vmov.f32	s17, s1
 800a97c:	4604      	mov	r4, r0
 800a97e:	460d      	mov	r5, r1
 800a980:	f000 fa32 	bl	800ade8 <fabs>
 800a984:	2200      	movs	r2, #0
 800a986:	ec51 0b10 	vmov	r0, r1, d0
 800a98a:	4b1e      	ldr	r3, [pc, #120]	; (800aa04 <_cchsh+0x98>)
 800a98c:	f7f6 f868 	bl	8000a60 <__aeabi_dcmple>
 800a990:	eeb0 0a48 	vmov.f32	s0, s16
 800a994:	eef0 0a68 	vmov.f32	s1, s17
 800a998:	b178      	cbz	r0, 800a9ba <_cchsh+0x4e>
 800a99a:	f000 fa79 	bl	800ae90 <cosh>
 800a99e:	ed84 0b00 	vstr	d0, [r4]
 800a9a2:	eeb0 0a48 	vmov.f32	s0, s16
 800a9a6:	eef0 0a68 	vmov.f32	s1, s17
 800a9aa:	f000 fda3 	bl	800b4f4 <sinh>
 800a9ae:	ed85 0b00 	vstr	d0, [r5]
 800a9b2:	ecbd 8b02 	vpop	{d8}
 800a9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ba:	f000 facd 	bl	800af58 <exp>
 800a9be:	ec59 8b10 	vmov	r8, r9, d0
 800a9c2:	ee10 2a10 	vmov	r2, s0
 800a9c6:	464b      	mov	r3, r9
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	490e      	ldr	r1, [pc, #56]	; (800aa04 <_cchsh+0x98>)
 800a9cc:	f7f5 fef6 	bl	80007bc <__aeabi_ddiv>
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	460f      	mov	r7, r1
 800a9d6:	4b0b      	ldr	r3, [pc, #44]	; (800aa04 <_cchsh+0x98>)
 800a9d8:	4640      	mov	r0, r8
 800a9da:	4649      	mov	r1, r9
 800a9dc:	f7f5 fdc4 	bl	8000568 <__aeabi_dmul>
 800a9e0:	4632      	mov	r2, r6
 800a9e2:	463b      	mov	r3, r7
 800a9e4:	4680      	mov	r8, r0
 800a9e6:	4689      	mov	r9, r1
 800a9e8:	f7f5 fc06 	bl	80001f8 <__aeabi_dsub>
 800a9ec:	4642      	mov	r2, r8
 800a9ee:	e9c5 0100 	strd	r0, r1, [r5]
 800a9f2:	464b      	mov	r3, r9
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	4639      	mov	r1, r7
 800a9f8:	f7f5 fc00 	bl	80001fc <__adddf3>
 800a9fc:	e9c4 0100 	strd	r0, r1, [r4]
 800aa00:	e7d7      	b.n	800a9b2 <_cchsh+0x46>
 800aa02:	bf00      	nop
 800aa04:	3fe00000 	.word	0x3fe00000

0800aa08 <cimag>:
 800aa08:	eeb0 0a41 	vmov.f32	s0, s2
 800aa0c:	eef0 0a61 	vmov.f32	s1, s3
 800aa10:	4770      	bx	lr
 800aa12:	0000      	movs	r0, r0
 800aa14:	0000      	movs	r0, r0
	...

0800aa18 <cpow>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	ed2d 8b0a 	vpush	{d8-d12}
 800aa20:	eeb0 ba40 	vmov.f32	s22, s0
 800aa24:	eef0 ba60 	vmov.f32	s23, s1
 800aa28:	eeb0 aa41 	vmov.f32	s20, s2
 800aa2c:	eef0 aa61 	vmov.f32	s21, s3
 800aa30:	b081      	sub	sp, #4
 800aa32:	eeb0 1a43 	vmov.f32	s2, s6
 800aa36:	eef0 1a63 	vmov.f32	s3, s7
 800aa3a:	eeb0 0a42 	vmov.f32	s0, s4
 800aa3e:	eef0 0a62 	vmov.f32	s1, s5
 800aa42:	eeb0 8a43 	vmov.f32	s16, s6
 800aa46:	eef0 8a63 	vmov.f32	s17, s7
 800aa4a:	eeb0 ca42 	vmov.f32	s24, s4
 800aa4e:	eef0 ca62 	vmov.f32	s25, s5
 800aa52:	f000 f8b5 	bl	800abc0 <creal>
 800aa56:	eeb0 1a48 	vmov.f32	s2, s16
 800aa5a:	eef0 1a68 	vmov.f32	s3, s17
 800aa5e:	eeb0 9a40 	vmov.f32	s18, s0
 800aa62:	eef0 9a60 	vmov.f32	s19, s1
 800aa66:	eeb0 0a4c 	vmov.f32	s0, s24
 800aa6a:	eef0 0a6c 	vmov.f32	s1, s25
 800aa6e:	f7ff ffcb 	bl	800aa08 <cimag>
 800aa72:	eeb0 1a4a 	vmov.f32	s2, s20
 800aa76:	eef0 1a6a 	vmov.f32	s3, s21
 800aa7a:	ec59 8b10 	vmov	r8, r9, d0
 800aa7e:	eeb0 0a4b 	vmov.f32	s0, s22
 800aa82:	eef0 0a6b 	vmov.f32	s1, s23
 800aa86:	f7ff fef7 	bl	800a878 <cabs>
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	ec51 0b10 	vmov	r0, r1, d0
 800aa92:	eeb0 8a40 	vmov.f32	s16, s0
 800aa96:	eef0 8a60 	vmov.f32	s17, s1
 800aa9a:	f7f5 ffcd 	bl	8000a38 <__aeabi_dcmpeq>
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	f040 8083 	bne.w	800abaa <cpow+0x192>
 800aaa4:	eeb0 1a4a 	vmov.f32	s2, s20
 800aaa8:	eef0 1a6a 	vmov.f32	s3, s21
 800aaac:	eeb0 0a4b 	vmov.f32	s0, s22
 800aab0:	eef0 0a6b 	vmov.f32	s1, s23
 800aab4:	f000 fdd2 	bl	800b65c <carg>
 800aab8:	eeb0 1a49 	vmov.f32	s2, s18
 800aabc:	eef0 1a69 	vmov.f32	s3, s19
 800aac0:	ec5b ab10 	vmov	sl, fp, d0
 800aac4:	eeb0 0a48 	vmov.f32	s0, s16
 800aac8:	eef0 0a68 	vmov.f32	s1, s17
 800aacc:	f000 fba2 	bl	800b214 <pow>
 800aad0:	4652      	mov	r2, sl
 800aad2:	465b      	mov	r3, fp
 800aad4:	ec51 0b19 	vmov	r0, r1, d9
 800aad8:	ec55 4b10 	vmov	r4, r5, d0
 800aadc:	f7f5 fd44 	bl	8000568 <__aeabi_dmul>
 800aae0:	2200      	movs	r2, #0
 800aae2:	4606      	mov	r6, r0
 800aae4:	460f      	mov	r7, r1
 800aae6:	2300      	movs	r3, #0
 800aae8:	4640      	mov	r0, r8
 800aaea:	4649      	mov	r1, r9
 800aaec:	f7f5 ffa4 	bl	8000a38 <__aeabi_dcmpeq>
 800aaf0:	bb30      	cbnz	r0, 800ab40 <cpow+0x128>
 800aaf2:	4652      	mov	r2, sl
 800aaf4:	465b      	mov	r3, fp
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 800aafc:	f7f5 fd34 	bl	8000568 <__aeabi_dmul>
 800ab00:	ec41 0b10 	vmov	d0, r0, r1
 800ab04:	f000 fa28 	bl	800af58 <exp>
 800ab08:	4620      	mov	r0, r4
 800ab0a:	ec53 2b10 	vmov	r2, r3, d0
 800ab0e:	4629      	mov	r1, r5
 800ab10:	f7f5 fd2a 	bl	8000568 <__aeabi_dmul>
 800ab14:	eeb0 0a48 	vmov.f32	s0, s16
 800ab18:	eef0 0a68 	vmov.f32	s1, s17
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	460d      	mov	r5, r1
 800ab20:	f000 faf8 	bl	800b114 <log>
 800ab24:	4642      	mov	r2, r8
 800ab26:	464b      	mov	r3, r9
 800ab28:	ec51 0b10 	vmov	r0, r1, d0
 800ab2c:	f7f5 fd1c 	bl	8000568 <__aeabi_dmul>
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	4630      	mov	r0, r6
 800ab36:	4639      	mov	r1, r7
 800ab38:	f7f5 fb60 	bl	80001fc <__adddf3>
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	460f      	mov	r7, r1
 800ab40:	ec47 6b10 	vmov	d0, r6, r7
 800ab44:	f000 f95c 	bl	800ae00 <sin>
 800ab48:	4622      	mov	r2, r4
 800ab4a:	462b      	mov	r3, r5
 800ab4c:	ec51 0b10 	vmov	r0, r1, d0
 800ab50:	f7f5 fd0a 	bl	8000568 <__aeabi_dmul>
 800ab54:	ec47 6b10 	vmov	d0, r6, r7
 800ab58:	4680      	mov	r8, r0
 800ab5a:	4689      	mov	r9, r1
 800ab5c:	f000 f900 	bl	800ad60 <cos>
 800ab60:	4622      	mov	r2, r4
 800ab62:	462b      	mov	r3, r5
 800ab64:	ec51 0b10 	vmov	r0, r1, d0
 800ab68:	f7f5 fcfe 	bl	8000568 <__aeabi_dmul>
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	4604      	mov	r4, r0
 800ab70:	460d      	mov	r5, r1
 800ab72:	2300      	movs	r3, #0
 800ab74:	4640      	mov	r0, r8
 800ab76:	4649      	mov	r1, r9
 800ab78:	f7f5 fcf6 	bl	8000568 <__aeabi_dmul>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4620      	mov	r0, r4
 800ab82:	4629      	mov	r1, r5
 800ab84:	f7f5 fb3a 	bl	80001fc <__adddf3>
 800ab88:	ec49 8b17 	vmov	d7, r8, r9
 800ab8c:	ec41 0b16 	vmov	d6, r0, r1
 800ab90:	eeb0 0a46 	vmov.f32	s0, s12
 800ab94:	eef0 0a66 	vmov.f32	s1, s13
 800ab98:	eeb0 1a47 	vmov.f32	s2, s14
 800ab9c:	eef0 1a67 	vmov.f32	s3, s15
 800aba0:	b001      	add	sp, #4
 800aba2:	ecbd 8b0a 	vpop	{d8-d12}
 800aba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abaa:	ed9f 6b03 	vldr	d6, [pc, #12]	; 800abb8 <cpow+0x1a0>
 800abae:	eeb0 7a46 	vmov.f32	s14, s12
 800abb2:	eef0 7a66 	vmov.f32	s15, s13
 800abb6:	e7eb      	b.n	800ab90 <cpow+0x178>
	...

0800abc0 <creal>:
 800abc0:	4770      	bx	lr

0800abc2 <csin>:
 800abc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abc4:	ed2d 8b04 	vpush	{d8-d9}
 800abc8:	eeb0 8a41 	vmov.f32	s16, s2
 800abcc:	eef0 8a61 	vmov.f32	s17, s3
 800abd0:	eeb0 9a40 	vmov.f32	s18, s0
 800abd4:	eef0 9a60 	vmov.f32	s19, s1
 800abd8:	b085      	sub	sp, #20
 800abda:	f7ff ff15 	bl	800aa08 <cimag>
 800abde:	a902      	add	r1, sp, #8
 800abe0:	4668      	mov	r0, sp
 800abe2:	f7ff fec3 	bl	800a96c <_cchsh>
 800abe6:	eeb0 1a48 	vmov.f32	s2, s16
 800abea:	eef0 1a68 	vmov.f32	s3, s17
 800abee:	eeb0 0a49 	vmov.f32	s0, s18
 800abf2:	eef0 0a69 	vmov.f32	s1, s19
 800abf6:	f7ff ffe3 	bl	800abc0 <creal>
 800abfa:	f000 f8b1 	bl	800ad60 <cos>
 800abfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac02:	ec51 0b10 	vmov	r0, r1, d0
 800ac06:	f7f5 fcaf 	bl	8000568 <__aeabi_dmul>
 800ac0a:	eeb0 1a48 	vmov.f32	s2, s16
 800ac0e:	eef0 1a68 	vmov.f32	s3, s17
 800ac12:	eeb0 0a49 	vmov.f32	s0, s18
 800ac16:	eef0 0a69 	vmov.f32	s1, s19
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	460d      	mov	r5, r1
 800ac1e:	f7ff ffcf 	bl	800abc0 <creal>
 800ac22:	f000 f8ed 	bl	800ae00 <sin>
 800ac26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac2a:	ec51 0b10 	vmov	r0, r1, d0
 800ac2e:	f7f5 fc9b 	bl	8000568 <__aeabi_dmul>
 800ac32:	2200      	movs	r2, #0
 800ac34:	4606      	mov	r6, r0
 800ac36:	460f      	mov	r7, r1
 800ac38:	2300      	movs	r3, #0
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	4629      	mov	r1, r5
 800ac3e:	f7f5 fc93 	bl	8000568 <__aeabi_dmul>
 800ac42:	4602      	mov	r2, r0
 800ac44:	460b      	mov	r3, r1
 800ac46:	4630      	mov	r0, r6
 800ac48:	4639      	mov	r1, r7
 800ac4a:	f7f5 fad7 	bl	80001fc <__adddf3>
 800ac4e:	ec45 4b11 	vmov	d1, r4, r5
 800ac52:	ec41 0b10 	vmov	d0, r0, r1
 800ac56:	b005      	add	sp, #20
 800ac58:	ecbd 8b04 	vpop	{d8-d9}
 800ac5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ac60 <ceil>:
 800ac60:	ec51 0b10 	vmov	r0, r1, d0
 800ac64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ac6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ac70:	2e13      	cmp	r6, #19
 800ac72:	460c      	mov	r4, r1
 800ac74:	ee10 5a10 	vmov	r5, s0
 800ac78:	4680      	mov	r8, r0
 800ac7a:	dc30      	bgt.n	800acde <ceil+0x7e>
 800ac7c:	2e00      	cmp	r6, #0
 800ac7e:	da12      	bge.n	800aca6 <ceil+0x46>
 800ac80:	a333      	add	r3, pc, #204	; (adr r3, 800ad50 <ceil+0xf0>)
 800ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac86:	f7f5 fab9 	bl	80001fc <__adddf3>
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f7f5 fefb 	bl	8000a88 <__aeabi_dcmpgt>
 800ac92:	b128      	cbz	r0, 800aca0 <ceil+0x40>
 800ac94:	2c00      	cmp	r4, #0
 800ac96:	db55      	blt.n	800ad44 <ceil+0xe4>
 800ac98:	432c      	orrs	r4, r5
 800ac9a:	d057      	beq.n	800ad4c <ceil+0xec>
 800ac9c:	4c2e      	ldr	r4, [pc, #184]	; (800ad58 <ceil+0xf8>)
 800ac9e:	2500      	movs	r5, #0
 800aca0:	4621      	mov	r1, r4
 800aca2:	4628      	mov	r0, r5
 800aca4:	e025      	b.n	800acf2 <ceil+0x92>
 800aca6:	4f2d      	ldr	r7, [pc, #180]	; (800ad5c <ceil+0xfc>)
 800aca8:	4137      	asrs	r7, r6
 800acaa:	ea01 0307 	and.w	r3, r1, r7
 800acae:	4303      	orrs	r3, r0
 800acb0:	d01f      	beq.n	800acf2 <ceil+0x92>
 800acb2:	a327      	add	r3, pc, #156	; (adr r3, 800ad50 <ceil+0xf0>)
 800acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb8:	f7f5 faa0 	bl	80001fc <__adddf3>
 800acbc:	2200      	movs	r2, #0
 800acbe:	2300      	movs	r3, #0
 800acc0:	f7f5 fee2 	bl	8000a88 <__aeabi_dcmpgt>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d0eb      	beq.n	800aca0 <ceil+0x40>
 800acc8:	2c00      	cmp	r4, #0
 800acca:	bfc2      	ittt	gt
 800accc:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800acd0:	fa43 f606 	asrgt.w	r6, r3, r6
 800acd4:	19a4      	addgt	r4, r4, r6
 800acd6:	ea24 0407 	bic.w	r4, r4, r7
 800acda:	2500      	movs	r5, #0
 800acdc:	e7e0      	b.n	800aca0 <ceil+0x40>
 800acde:	2e33      	cmp	r6, #51	; 0x33
 800ace0:	dd0b      	ble.n	800acfa <ceil+0x9a>
 800ace2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ace6:	d104      	bne.n	800acf2 <ceil+0x92>
 800ace8:	ee10 2a10 	vmov	r2, s0
 800acec:	460b      	mov	r3, r1
 800acee:	f7f5 fa85 	bl	80001fc <__adddf3>
 800acf2:	ec41 0b10 	vmov	d0, r0, r1
 800acf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acfa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800acfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ad02:	fa23 f707 	lsr.w	r7, r3, r7
 800ad06:	4207      	tst	r7, r0
 800ad08:	d0f3      	beq.n	800acf2 <ceil+0x92>
 800ad0a:	a311      	add	r3, pc, #68	; (adr r3, 800ad50 <ceil+0xf0>)
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	f7f5 fa74 	bl	80001fc <__adddf3>
 800ad14:	2200      	movs	r2, #0
 800ad16:	2300      	movs	r3, #0
 800ad18:	f7f5 feb6 	bl	8000a88 <__aeabi_dcmpgt>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d0bf      	beq.n	800aca0 <ceil+0x40>
 800ad20:	2c00      	cmp	r4, #0
 800ad22:	dd02      	ble.n	800ad2a <ceil+0xca>
 800ad24:	2e14      	cmp	r6, #20
 800ad26:	d103      	bne.n	800ad30 <ceil+0xd0>
 800ad28:	3401      	adds	r4, #1
 800ad2a:	ea25 0507 	bic.w	r5, r5, r7
 800ad2e:	e7b7      	b.n	800aca0 <ceil+0x40>
 800ad30:	2301      	movs	r3, #1
 800ad32:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ad36:	fa03 f606 	lsl.w	r6, r3, r6
 800ad3a:	4435      	add	r5, r6
 800ad3c:	4545      	cmp	r5, r8
 800ad3e:	bf38      	it	cc
 800ad40:	18e4      	addcc	r4, r4, r3
 800ad42:	e7f2      	b.n	800ad2a <ceil+0xca>
 800ad44:	2500      	movs	r5, #0
 800ad46:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ad4a:	e7a9      	b.n	800aca0 <ceil+0x40>
 800ad4c:	4625      	mov	r5, r4
 800ad4e:	e7a7      	b.n	800aca0 <ceil+0x40>
 800ad50:	8800759c 	.word	0x8800759c
 800ad54:	7e37e43c 	.word	0x7e37e43c
 800ad58:	3ff00000 	.word	0x3ff00000
 800ad5c:	000fffff 	.word	0x000fffff

0800ad60 <cos>:
 800ad60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad62:	ec51 0b10 	vmov	r0, r1, d0
 800ad66:	4a1e      	ldr	r2, [pc, #120]	; (800ade0 <cos+0x80>)
 800ad68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	dc06      	bgt.n	800ad7e <cos+0x1e>
 800ad70:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800add8 <cos+0x78>
 800ad74:	f002 fa04 	bl	800d180 <__kernel_cos>
 800ad78:	ec51 0b10 	vmov	r0, r1, d0
 800ad7c:	e007      	b.n	800ad8e <cos+0x2e>
 800ad7e:	4a19      	ldr	r2, [pc, #100]	; (800ade4 <cos+0x84>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	dd09      	ble.n	800ad98 <cos+0x38>
 800ad84:	ee10 2a10 	vmov	r2, s0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	f7f5 fa35 	bl	80001f8 <__aeabi_dsub>
 800ad8e:	ec41 0b10 	vmov	d0, r0, r1
 800ad92:	b005      	add	sp, #20
 800ad94:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad98:	4668      	mov	r0, sp
 800ad9a:	f001 fe85 	bl	800caa8 <__ieee754_rem_pio2>
 800ad9e:	f000 0003 	and.w	r0, r0, #3
 800ada2:	2801      	cmp	r0, #1
 800ada4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ada8:	ed9d 0b00 	vldr	d0, [sp]
 800adac:	d007      	beq.n	800adbe <cos+0x5e>
 800adae:	2802      	cmp	r0, #2
 800adb0:	d00e      	beq.n	800add0 <cos+0x70>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d0de      	beq.n	800ad74 <cos+0x14>
 800adb6:	2001      	movs	r0, #1
 800adb8:	f002 fdea 	bl	800d990 <__kernel_sin>
 800adbc:	e7dc      	b.n	800ad78 <cos+0x18>
 800adbe:	f002 fde7 	bl	800d990 <__kernel_sin>
 800adc2:	ec53 2b10 	vmov	r2, r3, d0
 800adc6:	ee10 0a10 	vmov	r0, s0
 800adca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800adce:	e7de      	b.n	800ad8e <cos+0x2e>
 800add0:	f002 f9d6 	bl	800d180 <__kernel_cos>
 800add4:	e7f5      	b.n	800adc2 <cos+0x62>
 800add6:	bf00      	nop
	...
 800ade0:	3fe921fb 	.word	0x3fe921fb
 800ade4:	7fefffff 	.word	0x7fefffff

0800ade8 <fabs>:
 800ade8:	ec51 0b10 	vmov	r0, r1, d0
 800adec:	ee10 2a10 	vmov	r2, s0
 800adf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800adf4:	ec43 2b10 	vmov	d0, r2, r3
 800adf8:	4770      	bx	lr
 800adfa:	0000      	movs	r0, r0
 800adfc:	0000      	movs	r0, r0
	...

0800ae00 <sin>:
 800ae00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae02:	ec51 0b10 	vmov	r0, r1, d0
 800ae06:	4a20      	ldr	r2, [pc, #128]	; (800ae88 <sin+0x88>)
 800ae08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	dc07      	bgt.n	800ae20 <sin+0x20>
 800ae10:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800ae80 <sin+0x80>
 800ae14:	2000      	movs	r0, #0
 800ae16:	f002 fdbb 	bl	800d990 <__kernel_sin>
 800ae1a:	ec51 0b10 	vmov	r0, r1, d0
 800ae1e:	e007      	b.n	800ae30 <sin+0x30>
 800ae20:	4a1a      	ldr	r2, [pc, #104]	; (800ae8c <sin+0x8c>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	dd09      	ble.n	800ae3a <sin+0x3a>
 800ae26:	ee10 2a10 	vmov	r2, s0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	f7f5 f9e4 	bl	80001f8 <__aeabi_dsub>
 800ae30:	ec41 0b10 	vmov	d0, r0, r1
 800ae34:	b005      	add	sp, #20
 800ae36:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae3a:	4668      	mov	r0, sp
 800ae3c:	f001 fe34 	bl	800caa8 <__ieee754_rem_pio2>
 800ae40:	f000 0003 	and.w	r0, r0, #3
 800ae44:	2801      	cmp	r0, #1
 800ae46:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae4a:	ed9d 0b00 	vldr	d0, [sp]
 800ae4e:	d004      	beq.n	800ae5a <sin+0x5a>
 800ae50:	2802      	cmp	r0, #2
 800ae52:	d005      	beq.n	800ae60 <sin+0x60>
 800ae54:	b970      	cbnz	r0, 800ae74 <sin+0x74>
 800ae56:	2001      	movs	r0, #1
 800ae58:	e7dd      	b.n	800ae16 <sin+0x16>
 800ae5a:	f002 f991 	bl	800d180 <__kernel_cos>
 800ae5e:	e7dc      	b.n	800ae1a <sin+0x1a>
 800ae60:	2001      	movs	r0, #1
 800ae62:	f002 fd95 	bl	800d990 <__kernel_sin>
 800ae66:	ec53 2b10 	vmov	r2, r3, d0
 800ae6a:	ee10 0a10 	vmov	r0, s0
 800ae6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ae72:	e7dd      	b.n	800ae30 <sin+0x30>
 800ae74:	f002 f984 	bl	800d180 <__kernel_cos>
 800ae78:	e7f5      	b.n	800ae66 <sin+0x66>
 800ae7a:	bf00      	nop
 800ae7c:	f3af 8000 	nop.w
	...
 800ae88:	3fe921fb 	.word	0x3fe921fb
 800ae8c:	7fefffff 	.word	0x7fefffff

0800ae90 <cosh>:
 800ae90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae92:	ed2d 8b02 	vpush	{d8}
 800ae96:	4e2c      	ldr	r6, [pc, #176]	; (800af48 <cosh+0xb8>)
 800ae98:	b08b      	sub	sp, #44	; 0x2c
 800ae9a:	ec55 4b10 	vmov	r4, r5, d0
 800ae9e:	f000 fc07 	bl	800b6b0 <__ieee754_cosh>
 800aea2:	f996 3000 	ldrsb.w	r3, [r6]
 800aea6:	eeb0 8a40 	vmov.f32	s16, s0
 800aeaa:	eef0 8a60 	vmov.f32	s17, s1
 800aeae:	3301      	adds	r3, #1
 800aeb0:	d030      	beq.n	800af14 <cosh+0x84>
 800aeb2:	4622      	mov	r2, r4
 800aeb4:	462b      	mov	r3, r5
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	4629      	mov	r1, r5
 800aeba:	f7f5 fdef 	bl	8000a9c <__aeabi_dcmpun>
 800aebe:	4607      	mov	r7, r0
 800aec0:	bb40      	cbnz	r0, 800af14 <cosh+0x84>
 800aec2:	ec45 4b10 	vmov	d0, r4, r5
 800aec6:	f7ff ff8f 	bl	800ade8 <fabs>
 800aeca:	a31d      	add	r3, pc, #116	; (adr r3, 800af40 <cosh+0xb0>)
 800aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed0:	ec51 0b10 	vmov	r0, r1, d0
 800aed4:	f7f5 fdd8 	bl	8000a88 <__aeabi_dcmpgt>
 800aed8:	b1e0      	cbz	r0, 800af14 <cosh+0x84>
 800aeda:	2303      	movs	r3, #3
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	4b1b      	ldr	r3, [pc, #108]	; (800af4c <cosh+0xbc>)
 800aee0:	9301      	str	r3, [sp, #4]
 800aee2:	f996 3000 	ldrsb.w	r3, [r6]
 800aee6:	9708      	str	r7, [sp, #32]
 800aee8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800aeec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800aef0:	b9c3      	cbnz	r3, 800af24 <cosh+0x94>
 800aef2:	4b17      	ldr	r3, [pc, #92]	; (800af50 <cosh+0xc0>)
 800aef4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800aef8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aefc:	4668      	mov	r0, sp
 800aefe:	f003 f8bf 	bl	800e080 <matherr>
 800af02:	b1a8      	cbz	r0, 800af30 <cosh+0xa0>
 800af04:	9b08      	ldr	r3, [sp, #32]
 800af06:	b11b      	cbz	r3, 800af10 <cosh+0x80>
 800af08:	f7ff fb36 	bl	800a578 <__errno>
 800af0c:	9b08      	ldr	r3, [sp, #32]
 800af0e:	6003      	str	r3, [r0, #0]
 800af10:	ed9d 8b06 	vldr	d8, [sp, #24]
 800af14:	eeb0 0a48 	vmov.f32	s0, s16
 800af18:	eef0 0a68 	vmov.f32	s1, s17
 800af1c:	b00b      	add	sp, #44	; 0x2c
 800af1e:	ecbd 8b02 	vpop	{d8}
 800af22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af24:	490b      	ldr	r1, [pc, #44]	; (800af54 <cosh+0xc4>)
 800af26:	2000      	movs	r0, #0
 800af28:	2b02      	cmp	r3, #2
 800af2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af2e:	d1e5      	bne.n	800aefc <cosh+0x6c>
 800af30:	f7ff fb22 	bl	800a578 <__errno>
 800af34:	2322      	movs	r3, #34	; 0x22
 800af36:	6003      	str	r3, [r0, #0]
 800af38:	e7e4      	b.n	800af04 <cosh+0x74>
 800af3a:	bf00      	nop
 800af3c:	f3af 8000 	nop.w
 800af40:	8fb9f87d 	.word	0x8fb9f87d
 800af44:	408633ce 	.word	0x408633ce
 800af48:	200000cc 	.word	0x200000cc
 800af4c:	08010d98 	.word	0x08010d98
 800af50:	47efffff 	.word	0x47efffff
 800af54:	7ff00000 	.word	0x7ff00000

0800af58 <exp>:
 800af58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af5a:	ed2d 8b02 	vpush	{d8}
 800af5e:	4e38      	ldr	r6, [pc, #224]	; (800b040 <exp+0xe8>)
 800af60:	b08b      	sub	sp, #44	; 0x2c
 800af62:	ec55 4b10 	vmov	r4, r5, d0
 800af66:	f000 fc4b 	bl	800b800 <__ieee754_exp>
 800af6a:	f996 3000 	ldrsb.w	r3, [r6]
 800af6e:	eeb0 8a40 	vmov.f32	s16, s0
 800af72:	eef0 8a60 	vmov.f32	s17, s1
 800af76:	3301      	adds	r3, #1
 800af78:	d02c      	beq.n	800afd4 <exp+0x7c>
 800af7a:	ec45 4b10 	vmov	d0, r4, r5
 800af7e:	f002 fff1 	bl	800df64 <finite>
 800af82:	b338      	cbz	r0, 800afd4 <exp+0x7c>
 800af84:	a32a      	add	r3, pc, #168	; (adr r3, 800b030 <exp+0xd8>)
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	4620      	mov	r0, r4
 800af8c:	4629      	mov	r1, r5
 800af8e:	f7f5 fd7b 	bl	8000a88 <__aeabi_dcmpgt>
 800af92:	4607      	mov	r7, r0
 800af94:	2800      	cmp	r0, #0
 800af96:	d030      	beq.n	800affa <exp+0xa2>
 800af98:	2303      	movs	r3, #3
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	4b29      	ldr	r3, [pc, #164]	; (800b044 <exp+0xec>)
 800af9e:	9301      	str	r3, [sp, #4]
 800afa0:	2300      	movs	r3, #0
 800afa2:	9308      	str	r3, [sp, #32]
 800afa4:	f996 3000 	ldrsb.w	r3, [r6]
 800afa8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800afac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800afb0:	b9c3      	cbnz	r3, 800afe4 <exp+0x8c>
 800afb2:	4b25      	ldr	r3, [pc, #148]	; (800b048 <exp+0xf0>)
 800afb4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800afb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800afbc:	4668      	mov	r0, sp
 800afbe:	f003 f85f 	bl	800e080 <matherr>
 800afc2:	b1a8      	cbz	r0, 800aff0 <exp+0x98>
 800afc4:	9b08      	ldr	r3, [sp, #32]
 800afc6:	b11b      	cbz	r3, 800afd0 <exp+0x78>
 800afc8:	f7ff fad6 	bl	800a578 <__errno>
 800afcc:	9b08      	ldr	r3, [sp, #32]
 800afce:	6003      	str	r3, [r0, #0]
 800afd0:	ed9d 8b06 	vldr	d8, [sp, #24]
 800afd4:	eeb0 0a48 	vmov.f32	s0, s16
 800afd8:	eef0 0a68 	vmov.f32	s1, s17
 800afdc:	b00b      	add	sp, #44	; 0x2c
 800afde:	ecbd 8b02 	vpop	{d8}
 800afe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afe4:	4919      	ldr	r1, [pc, #100]	; (800b04c <exp+0xf4>)
 800afe6:	2000      	movs	r0, #0
 800afe8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800afec:	2b02      	cmp	r3, #2
 800afee:	d1e5      	bne.n	800afbc <exp+0x64>
 800aff0:	f7ff fac2 	bl	800a578 <__errno>
 800aff4:	2322      	movs	r3, #34	; 0x22
 800aff6:	6003      	str	r3, [r0, #0]
 800aff8:	e7e4      	b.n	800afc4 <exp+0x6c>
 800affa:	a30f      	add	r3, pc, #60	; (adr r3, 800b038 <exp+0xe0>)
 800affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b000:	4620      	mov	r0, r4
 800b002:	4629      	mov	r1, r5
 800b004:	f7f5 fd22 	bl	8000a4c <__aeabi_dcmplt>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d0e3      	beq.n	800afd4 <exp+0x7c>
 800b00c:	2304      	movs	r3, #4
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	4b0c      	ldr	r3, [pc, #48]	; (800b044 <exp+0xec>)
 800b012:	9301      	str	r3, [sp, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	2300      	movs	r3, #0
 800b018:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b01c:	9708      	str	r7, [sp, #32]
 800b01e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b022:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b026:	f996 3000 	ldrsb.w	r3, [r6]
 800b02a:	e7df      	b.n	800afec <exp+0x94>
 800b02c:	f3af 8000 	nop.w
 800b030:	fefa39ef 	.word	0xfefa39ef
 800b034:	40862e42 	.word	0x40862e42
 800b038:	d52d3051 	.word	0xd52d3051
 800b03c:	c0874910 	.word	0xc0874910
 800b040:	200000cc 	.word	0x200000cc
 800b044:	08010d9d 	.word	0x08010d9d
 800b048:	47efffff 	.word	0x47efffff
 800b04c:	7ff00000 	.word	0x7ff00000

0800b050 <hypot>:
 800b050:	b530      	push	{r4, r5, lr}
 800b052:	ed2d 8b06 	vpush	{d8-d10}
 800b056:	eeb0 aa40 	vmov.f32	s20, s0
 800b05a:	eef0 aa60 	vmov.f32	s21, s1
 800b05e:	eeb0 9a41 	vmov.f32	s18, s2
 800b062:	eef0 9a61 	vmov.f32	s19, s3
 800b066:	4c27      	ldr	r4, [pc, #156]	; (800b104 <hypot+0xb4>)
 800b068:	b08b      	sub	sp, #44	; 0x2c
 800b06a:	f000 fd37 	bl	800badc <__ieee754_hypot>
 800b06e:	f994 3000 	ldrsb.w	r3, [r4]
 800b072:	eeb0 8a40 	vmov.f32	s16, s0
 800b076:	eef0 8a60 	vmov.f32	s17, s1
 800b07a:	3301      	adds	r3, #1
 800b07c:	d02e      	beq.n	800b0dc <hypot+0x8c>
 800b07e:	f002 ff71 	bl	800df64 <finite>
 800b082:	4605      	mov	r5, r0
 800b084:	bb50      	cbnz	r0, 800b0dc <hypot+0x8c>
 800b086:	eeb0 0a4a 	vmov.f32	s0, s20
 800b08a:	eef0 0a6a 	vmov.f32	s1, s21
 800b08e:	f002 ff69 	bl	800df64 <finite>
 800b092:	b318      	cbz	r0, 800b0dc <hypot+0x8c>
 800b094:	eeb0 0a49 	vmov.f32	s0, s18
 800b098:	eef0 0a69 	vmov.f32	s1, s19
 800b09c:	f002 ff62 	bl	800df64 <finite>
 800b0a0:	b1e0      	cbz	r0, 800b0dc <hypot+0x8c>
 800b0a2:	2303      	movs	r3, #3
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	4b18      	ldr	r3, [pc, #96]	; (800b108 <hypot+0xb8>)
 800b0a8:	9301      	str	r3, [sp, #4]
 800b0aa:	f994 3000 	ldrsb.w	r3, [r4]
 800b0ae:	9508      	str	r5, [sp, #32]
 800b0b0:	ed8d ab02 	vstr	d10, [sp, #8]
 800b0b4:	ed8d 9b04 	vstr	d9, [sp, #16]
 800b0b8:	b9c3      	cbnz	r3, 800b0ec <hypot+0x9c>
 800b0ba:	4b14      	ldr	r3, [pc, #80]	; (800b10c <hypot+0xbc>)
 800b0bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b0c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b0c4:	4668      	mov	r0, sp
 800b0c6:	f002 ffdb 	bl	800e080 <matherr>
 800b0ca:	b1a8      	cbz	r0, 800b0f8 <hypot+0xa8>
 800b0cc:	9b08      	ldr	r3, [sp, #32]
 800b0ce:	b11b      	cbz	r3, 800b0d8 <hypot+0x88>
 800b0d0:	f7ff fa52 	bl	800a578 <__errno>
 800b0d4:	9b08      	ldr	r3, [sp, #32]
 800b0d6:	6003      	str	r3, [r0, #0]
 800b0d8:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b0dc:	eeb0 0a48 	vmov.f32	s0, s16
 800b0e0:	eef0 0a68 	vmov.f32	s1, s17
 800b0e4:	b00b      	add	sp, #44	; 0x2c
 800b0e6:	ecbd 8b06 	vpop	{d8-d10}
 800b0ea:	bd30      	pop	{r4, r5, pc}
 800b0ec:	4908      	ldr	r1, [pc, #32]	; (800b110 <hypot+0xc0>)
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b0f6:	d1e5      	bne.n	800b0c4 <hypot+0x74>
 800b0f8:	f7ff fa3e 	bl	800a578 <__errno>
 800b0fc:	2322      	movs	r3, #34	; 0x22
 800b0fe:	6003      	str	r3, [r0, #0]
 800b100:	e7e4      	b.n	800b0cc <hypot+0x7c>
 800b102:	bf00      	nop
 800b104:	200000cc 	.word	0x200000cc
 800b108:	08010da1 	.word	0x08010da1
 800b10c:	47efffff 	.word	0x47efffff
 800b110:	7ff00000 	.word	0x7ff00000

0800b114 <log>:
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	ed2d 8b02 	vpush	{d8}
 800b11a:	b08a      	sub	sp, #40	; 0x28
 800b11c:	ec55 4b10 	vmov	r4, r5, d0
 800b120:	f000 fdfe 	bl	800bd20 <__ieee754_log>
 800b124:	4b36      	ldr	r3, [pc, #216]	; (800b200 <log+0xec>)
 800b126:	eeb0 8a40 	vmov.f32	s16, s0
 800b12a:	eef0 8a60 	vmov.f32	s17, s1
 800b12e:	f993 6000 	ldrsb.w	r6, [r3]
 800b132:	1c73      	adds	r3, r6, #1
 800b134:	d05b      	beq.n	800b1ee <log+0xda>
 800b136:	4622      	mov	r2, r4
 800b138:	462b      	mov	r3, r5
 800b13a:	4620      	mov	r0, r4
 800b13c:	4629      	mov	r1, r5
 800b13e:	f7f5 fcad 	bl	8000a9c <__aeabi_dcmpun>
 800b142:	2800      	cmp	r0, #0
 800b144:	d153      	bne.n	800b1ee <log+0xda>
 800b146:	2200      	movs	r2, #0
 800b148:	2300      	movs	r3, #0
 800b14a:	4620      	mov	r0, r4
 800b14c:	4629      	mov	r1, r5
 800b14e:	f7f5 fc9b 	bl	8000a88 <__aeabi_dcmpgt>
 800b152:	2800      	cmp	r0, #0
 800b154:	d14b      	bne.n	800b1ee <log+0xda>
 800b156:	4b2b      	ldr	r3, [pc, #172]	; (800b204 <log+0xf0>)
 800b158:	9301      	str	r3, [sp, #4]
 800b15a:	9008      	str	r0, [sp, #32]
 800b15c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b160:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b164:	b9a6      	cbnz	r6, 800b190 <log+0x7c>
 800b166:	4b28      	ldr	r3, [pc, #160]	; (800b208 <log+0xf4>)
 800b168:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b16c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b170:	4620      	mov	r0, r4
 800b172:	2200      	movs	r2, #0
 800b174:	2300      	movs	r3, #0
 800b176:	4629      	mov	r1, r5
 800b178:	f7f5 fc5e 	bl	8000a38 <__aeabi_dcmpeq>
 800b17c:	bb40      	cbnz	r0, 800b1d0 <log+0xbc>
 800b17e:	2301      	movs	r3, #1
 800b180:	2e02      	cmp	r6, #2
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	d119      	bne.n	800b1ba <log+0xa6>
 800b186:	f7ff f9f7 	bl	800a578 <__errno>
 800b18a:	2321      	movs	r3, #33	; 0x21
 800b18c:	6003      	str	r3, [r0, #0]
 800b18e:	e019      	b.n	800b1c4 <log+0xb0>
 800b190:	4b1e      	ldr	r3, [pc, #120]	; (800b20c <log+0xf8>)
 800b192:	2200      	movs	r2, #0
 800b194:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b198:	4620      	mov	r0, r4
 800b19a:	2200      	movs	r2, #0
 800b19c:	2300      	movs	r3, #0
 800b19e:	4629      	mov	r1, r5
 800b1a0:	f7f5 fc4a 	bl	8000a38 <__aeabi_dcmpeq>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d0ea      	beq.n	800b17e <log+0x6a>
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	429e      	cmp	r6, r3
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	d111      	bne.n	800b1d4 <log+0xc0>
 800b1b0:	f7ff f9e2 	bl	800a578 <__errno>
 800b1b4:	2322      	movs	r3, #34	; 0x22
 800b1b6:	6003      	str	r3, [r0, #0]
 800b1b8:	e011      	b.n	800b1de <log+0xca>
 800b1ba:	4668      	mov	r0, sp
 800b1bc:	f002 ff60 	bl	800e080 <matherr>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	d0e0      	beq.n	800b186 <log+0x72>
 800b1c4:	4812      	ldr	r0, [pc, #72]	; (800b210 <log+0xfc>)
 800b1c6:	f002 ff5f 	bl	800e088 <nan>
 800b1ca:	ed8d 0b06 	vstr	d0, [sp, #24]
 800b1ce:	e006      	b.n	800b1de <log+0xca>
 800b1d0:	2302      	movs	r3, #2
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	4668      	mov	r0, sp
 800b1d6:	f002 ff53 	bl	800e080 <matherr>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d0e8      	beq.n	800b1b0 <log+0x9c>
 800b1de:	9b08      	ldr	r3, [sp, #32]
 800b1e0:	b11b      	cbz	r3, 800b1ea <log+0xd6>
 800b1e2:	f7ff f9c9 	bl	800a578 <__errno>
 800b1e6:	9b08      	ldr	r3, [sp, #32]
 800b1e8:	6003      	str	r3, [r0, #0]
 800b1ea:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b1ee:	eeb0 0a48 	vmov.f32	s0, s16
 800b1f2:	eef0 0a68 	vmov.f32	s1, s17
 800b1f6:	b00a      	add	sp, #40	; 0x28
 800b1f8:	ecbd 8b02 	vpop	{d8}
 800b1fc:	bd70      	pop	{r4, r5, r6, pc}
 800b1fe:	bf00      	nop
 800b200:	200000cc 	.word	0x200000cc
 800b204:	08010da7 	.word	0x08010da7
 800b208:	c7efffff 	.word	0xc7efffff
 800b20c:	fff00000 	.word	0xfff00000
 800b210:	08010db9 	.word	0x08010db9

0800b214 <pow>:
 800b214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b218:	ed2d 8b04 	vpush	{d8-d9}
 800b21c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b4f0 <pow+0x2dc>
 800b220:	b08d      	sub	sp, #52	; 0x34
 800b222:	ec57 6b10 	vmov	r6, r7, d0
 800b226:	ec55 4b11 	vmov	r4, r5, d1
 800b22a:	f000 ff2d 	bl	800c088 <__ieee754_pow>
 800b22e:	f999 3000 	ldrsb.w	r3, [r9]
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	3301      	adds	r3, #1
 800b236:	eeb0 8a40 	vmov.f32	s16, s0
 800b23a:	eef0 8a60 	vmov.f32	s17, s1
 800b23e:	46c8      	mov	r8, r9
 800b240:	d05f      	beq.n	800b302 <pow+0xee>
 800b242:	4622      	mov	r2, r4
 800b244:	462b      	mov	r3, r5
 800b246:	4620      	mov	r0, r4
 800b248:	4629      	mov	r1, r5
 800b24a:	f7f5 fc27 	bl	8000a9c <__aeabi_dcmpun>
 800b24e:	4683      	mov	fp, r0
 800b250:	2800      	cmp	r0, #0
 800b252:	d156      	bne.n	800b302 <pow+0xee>
 800b254:	4632      	mov	r2, r6
 800b256:	463b      	mov	r3, r7
 800b258:	4630      	mov	r0, r6
 800b25a:	4639      	mov	r1, r7
 800b25c:	f7f5 fc1e 	bl	8000a9c <__aeabi_dcmpun>
 800b260:	9001      	str	r0, [sp, #4]
 800b262:	b1e8      	cbz	r0, 800b2a0 <pow+0x8c>
 800b264:	2200      	movs	r2, #0
 800b266:	2300      	movs	r3, #0
 800b268:	4620      	mov	r0, r4
 800b26a:	4629      	mov	r1, r5
 800b26c:	f7f5 fbe4 	bl	8000a38 <__aeabi_dcmpeq>
 800b270:	2800      	cmp	r0, #0
 800b272:	d046      	beq.n	800b302 <pow+0xee>
 800b274:	2301      	movs	r3, #1
 800b276:	9302      	str	r3, [sp, #8]
 800b278:	4b96      	ldr	r3, [pc, #600]	; (800b4d4 <pow+0x2c0>)
 800b27a:	9303      	str	r3, [sp, #12]
 800b27c:	4b96      	ldr	r3, [pc, #600]	; (800b4d8 <pow+0x2c4>)
 800b27e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b282:	2200      	movs	r2, #0
 800b284:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b288:	9b00      	ldr	r3, [sp, #0]
 800b28a:	2b02      	cmp	r3, #2
 800b28c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b290:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b294:	d033      	beq.n	800b2fe <pow+0xea>
 800b296:	a802      	add	r0, sp, #8
 800b298:	f002 fef2 	bl	800e080 <matherr>
 800b29c:	bb48      	cbnz	r0, 800b2f2 <pow+0xde>
 800b29e:	e05d      	b.n	800b35c <pow+0x148>
 800b2a0:	f04f 0a00 	mov.w	sl, #0
 800b2a4:	f04f 0b00 	mov.w	fp, #0
 800b2a8:	4652      	mov	r2, sl
 800b2aa:	465b      	mov	r3, fp
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	4639      	mov	r1, r7
 800b2b0:	f7f5 fbc2 	bl	8000a38 <__aeabi_dcmpeq>
 800b2b4:	ec4b ab19 	vmov	d9, sl, fp
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d054      	beq.n	800b366 <pow+0x152>
 800b2bc:	4652      	mov	r2, sl
 800b2be:	465b      	mov	r3, fp
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	f7f5 fbb8 	bl	8000a38 <__aeabi_dcmpeq>
 800b2c8:	4680      	mov	r8, r0
 800b2ca:	b318      	cbz	r0, 800b314 <pow+0x100>
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	9302      	str	r3, [sp, #8]
 800b2d0:	4b80      	ldr	r3, [pc, #512]	; (800b4d4 <pow+0x2c0>)
 800b2d2:	9303      	str	r3, [sp, #12]
 800b2d4:	9b01      	ldr	r3, [sp, #4]
 800b2d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b2d8:	9b00      	ldr	r3, [sp, #0]
 800b2da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b2de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b2e2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d0d5      	beq.n	800b296 <pow+0x82>
 800b2ea:	4b7b      	ldr	r3, [pc, #492]	; (800b4d8 <pow+0x2c4>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b2f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2f4:	b11b      	cbz	r3, 800b2fe <pow+0xea>
 800b2f6:	f7ff f93f 	bl	800a578 <__errno>
 800b2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2fc:	6003      	str	r3, [r0, #0]
 800b2fe:	ed9d 8b08 	vldr	d8, [sp, #32]
 800b302:	eeb0 0a48 	vmov.f32	s0, s16
 800b306:	eef0 0a68 	vmov.f32	s1, s17
 800b30a:	b00d      	add	sp, #52	; 0x34
 800b30c:	ecbd 8b04 	vpop	{d8-d9}
 800b310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b314:	ec45 4b10 	vmov	d0, r4, r5
 800b318:	f002 fe24 	bl	800df64 <finite>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d0f0      	beq.n	800b302 <pow+0xee>
 800b320:	4652      	mov	r2, sl
 800b322:	465b      	mov	r3, fp
 800b324:	4620      	mov	r0, r4
 800b326:	4629      	mov	r1, r5
 800b328:	f7f5 fb90 	bl	8000a4c <__aeabi_dcmplt>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d0e8      	beq.n	800b302 <pow+0xee>
 800b330:	2301      	movs	r3, #1
 800b332:	9302      	str	r3, [sp, #8]
 800b334:	4b67      	ldr	r3, [pc, #412]	; (800b4d4 <pow+0x2c0>)
 800b336:	9303      	str	r3, [sp, #12]
 800b338:	f999 3000 	ldrsb.w	r3, [r9]
 800b33c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b340:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b344:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b348:	b913      	cbnz	r3, 800b350 <pow+0x13c>
 800b34a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b34e:	e7a2      	b.n	800b296 <pow+0x82>
 800b350:	4962      	ldr	r1, [pc, #392]	; (800b4dc <pow+0x2c8>)
 800b352:	2000      	movs	r0, #0
 800b354:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b358:	2b02      	cmp	r3, #2
 800b35a:	d19c      	bne.n	800b296 <pow+0x82>
 800b35c:	f7ff f90c 	bl	800a578 <__errno>
 800b360:	2321      	movs	r3, #33	; 0x21
 800b362:	6003      	str	r3, [r0, #0]
 800b364:	e7c5      	b.n	800b2f2 <pow+0xde>
 800b366:	eeb0 0a48 	vmov.f32	s0, s16
 800b36a:	eef0 0a68 	vmov.f32	s1, s17
 800b36e:	f002 fdf9 	bl	800df64 <finite>
 800b372:	9000      	str	r0, [sp, #0]
 800b374:	2800      	cmp	r0, #0
 800b376:	f040 8081 	bne.w	800b47c <pow+0x268>
 800b37a:	ec47 6b10 	vmov	d0, r6, r7
 800b37e:	f002 fdf1 	bl	800df64 <finite>
 800b382:	2800      	cmp	r0, #0
 800b384:	d07a      	beq.n	800b47c <pow+0x268>
 800b386:	ec45 4b10 	vmov	d0, r4, r5
 800b38a:	f002 fdeb 	bl	800df64 <finite>
 800b38e:	2800      	cmp	r0, #0
 800b390:	d074      	beq.n	800b47c <pow+0x268>
 800b392:	ec53 2b18 	vmov	r2, r3, d8
 800b396:	ee18 0a10 	vmov	r0, s16
 800b39a:	4619      	mov	r1, r3
 800b39c:	f7f5 fb7e 	bl	8000a9c <__aeabi_dcmpun>
 800b3a0:	f999 9000 	ldrsb.w	r9, [r9]
 800b3a4:	4b4b      	ldr	r3, [pc, #300]	; (800b4d4 <pow+0x2c0>)
 800b3a6:	b1b0      	cbz	r0, 800b3d6 <pow+0x1c2>
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3ae:	9b00      	ldr	r3, [sp, #0]
 800b3b0:	930a      	str	r3, [sp, #40]	; 0x28
 800b3b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b3b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b3ba:	f1b9 0f00 	cmp.w	r9, #0
 800b3be:	d0c4      	beq.n	800b34a <pow+0x136>
 800b3c0:	4652      	mov	r2, sl
 800b3c2:	465b      	mov	r3, fp
 800b3c4:	4650      	mov	r0, sl
 800b3c6:	4659      	mov	r1, fp
 800b3c8:	f7f5 f9f8 	bl	80007bc <__aeabi_ddiv>
 800b3cc:	f1b9 0f02 	cmp.w	r9, #2
 800b3d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b3d4:	e7c1      	b.n	800b35a <pow+0x146>
 800b3d6:	2203      	movs	r2, #3
 800b3d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3dc:	900a      	str	r0, [sp, #40]	; 0x28
 800b3de:	4629      	mov	r1, r5
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	4b3e      	ldr	r3, [pc, #248]	; (800b4e0 <pow+0x2cc>)
 800b3e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b3ea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b3ee:	f7f5 f8bb 	bl	8000568 <__aeabi_dmul>
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	460d      	mov	r5, r1
 800b3f6:	f1b9 0f00 	cmp.w	r9, #0
 800b3fa:	d124      	bne.n	800b446 <pow+0x232>
 800b3fc:	4b39      	ldr	r3, [pc, #228]	; (800b4e4 <pow+0x2d0>)
 800b3fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b402:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b406:	4630      	mov	r0, r6
 800b408:	4652      	mov	r2, sl
 800b40a:	465b      	mov	r3, fp
 800b40c:	4639      	mov	r1, r7
 800b40e:	f7f5 fb1d 	bl	8000a4c <__aeabi_dcmplt>
 800b412:	2800      	cmp	r0, #0
 800b414:	d056      	beq.n	800b4c4 <pow+0x2b0>
 800b416:	ec45 4b10 	vmov	d0, r4, r5
 800b41a:	f002 fe3d 	bl	800e098 <rint>
 800b41e:	4622      	mov	r2, r4
 800b420:	462b      	mov	r3, r5
 800b422:	ec51 0b10 	vmov	r0, r1, d0
 800b426:	f7f5 fb07 	bl	8000a38 <__aeabi_dcmpeq>
 800b42a:	b920      	cbnz	r0, 800b436 <pow+0x222>
 800b42c:	4b2e      	ldr	r3, [pc, #184]	; (800b4e8 <pow+0x2d4>)
 800b42e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b432:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b436:	f998 3000 	ldrsb.w	r3, [r8]
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d142      	bne.n	800b4c4 <pow+0x2b0>
 800b43e:	f7ff f89b 	bl	800a578 <__errno>
 800b442:	2322      	movs	r3, #34	; 0x22
 800b444:	e78d      	b.n	800b362 <pow+0x14e>
 800b446:	4b29      	ldr	r3, [pc, #164]	; (800b4ec <pow+0x2d8>)
 800b448:	2200      	movs	r2, #0
 800b44a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b44e:	4630      	mov	r0, r6
 800b450:	4652      	mov	r2, sl
 800b452:	465b      	mov	r3, fp
 800b454:	4639      	mov	r1, r7
 800b456:	f7f5 faf9 	bl	8000a4c <__aeabi_dcmplt>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d0eb      	beq.n	800b436 <pow+0x222>
 800b45e:	ec45 4b10 	vmov	d0, r4, r5
 800b462:	f002 fe19 	bl	800e098 <rint>
 800b466:	4622      	mov	r2, r4
 800b468:	462b      	mov	r3, r5
 800b46a:	ec51 0b10 	vmov	r0, r1, d0
 800b46e:	f7f5 fae3 	bl	8000a38 <__aeabi_dcmpeq>
 800b472:	2800      	cmp	r0, #0
 800b474:	d1df      	bne.n	800b436 <pow+0x222>
 800b476:	2200      	movs	r2, #0
 800b478:	4b18      	ldr	r3, [pc, #96]	; (800b4dc <pow+0x2c8>)
 800b47a:	e7da      	b.n	800b432 <pow+0x21e>
 800b47c:	2200      	movs	r2, #0
 800b47e:	2300      	movs	r3, #0
 800b480:	ec51 0b18 	vmov	r0, r1, d8
 800b484:	f7f5 fad8 	bl	8000a38 <__aeabi_dcmpeq>
 800b488:	2800      	cmp	r0, #0
 800b48a:	f43f af3a 	beq.w	800b302 <pow+0xee>
 800b48e:	ec47 6b10 	vmov	d0, r6, r7
 800b492:	f002 fd67 	bl	800df64 <finite>
 800b496:	2800      	cmp	r0, #0
 800b498:	f43f af33 	beq.w	800b302 <pow+0xee>
 800b49c:	ec45 4b10 	vmov	d0, r4, r5
 800b4a0:	f002 fd60 	bl	800df64 <finite>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	f43f af2c 	beq.w	800b302 <pow+0xee>
 800b4aa:	2304      	movs	r3, #4
 800b4ac:	9302      	str	r3, [sp, #8]
 800b4ae:	4b09      	ldr	r3, [pc, #36]	; (800b4d4 <pow+0x2c0>)
 800b4b0:	9303      	str	r3, [sp, #12]
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	930a      	str	r3, [sp, #40]	; 0x28
 800b4b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b4ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b4be:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b4c2:	e7b8      	b.n	800b436 <pow+0x222>
 800b4c4:	a802      	add	r0, sp, #8
 800b4c6:	f002 fddb 	bl	800e080 <matherr>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	f47f af11 	bne.w	800b2f2 <pow+0xde>
 800b4d0:	e7b5      	b.n	800b43e <pow+0x22a>
 800b4d2:	bf00      	nop
 800b4d4:	08010dab 	.word	0x08010dab
 800b4d8:	3ff00000 	.word	0x3ff00000
 800b4dc:	fff00000 	.word	0xfff00000
 800b4e0:	3fe00000 	.word	0x3fe00000
 800b4e4:	47efffff 	.word	0x47efffff
 800b4e8:	c7efffff 	.word	0xc7efffff
 800b4ec:	7ff00000 	.word	0x7ff00000
 800b4f0:	200000cc 	.word	0x200000cc

0800b4f4 <sinh>:
 800b4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4f6:	ed2d 8b02 	vpush	{d8}
 800b4fa:	4e2a      	ldr	r6, [pc, #168]	; (800b5a4 <sinh+0xb0>)
 800b4fc:	b08b      	sub	sp, #44	; 0x2c
 800b4fe:	ec55 4b10 	vmov	r4, r5, d0
 800b502:	f001 fcc5 	bl	800ce90 <__ieee754_sinh>
 800b506:	f996 3000 	ldrsb.w	r3, [r6]
 800b50a:	eeb0 8a40 	vmov.f32	s16, s0
 800b50e:	eef0 8a60 	vmov.f32	s17, s1
 800b512:	3301      	adds	r3, #1
 800b514:	d02c      	beq.n	800b570 <sinh+0x7c>
 800b516:	f002 fd25 	bl	800df64 <finite>
 800b51a:	4607      	mov	r7, r0
 800b51c:	bb40      	cbnz	r0, 800b570 <sinh+0x7c>
 800b51e:	ec45 4b10 	vmov	d0, r4, r5
 800b522:	f002 fd1f 	bl	800df64 <finite>
 800b526:	b318      	cbz	r0, 800b570 <sinh+0x7c>
 800b528:	2303      	movs	r3, #3
 800b52a:	f996 6000 	ldrsb.w	r6, [r6]
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	4b1d      	ldr	r3, [pc, #116]	; (800b5a8 <sinh+0xb4>)
 800b532:	9301      	str	r3, [sp, #4]
 800b534:	9708      	str	r7, [sp, #32]
 800b536:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b53a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b53e:	2200      	movs	r2, #0
 800b540:	2300      	movs	r3, #0
 800b542:	4620      	mov	r0, r4
 800b544:	4629      	mov	r1, r5
 800b546:	b9ee      	cbnz	r6, 800b584 <sinh+0x90>
 800b548:	f7f5 fa9e 	bl	8000a88 <__aeabi_dcmpgt>
 800b54c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b550:	b9b0      	cbnz	r0, 800b580 <sinh+0x8c>
 800b552:	4b16      	ldr	r3, [pc, #88]	; (800b5ac <sinh+0xb8>)
 800b554:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b558:	4668      	mov	r0, sp
 800b55a:	f002 fd91 	bl	800e080 <matherr>
 800b55e:	b1d0      	cbz	r0, 800b596 <sinh+0xa2>
 800b560:	9b08      	ldr	r3, [sp, #32]
 800b562:	b11b      	cbz	r3, 800b56c <sinh+0x78>
 800b564:	f7ff f808 	bl	800a578 <__errno>
 800b568:	9b08      	ldr	r3, [sp, #32]
 800b56a:	6003      	str	r3, [r0, #0]
 800b56c:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b570:	eeb0 0a48 	vmov.f32	s0, s16
 800b574:	eef0 0a68 	vmov.f32	s1, s17
 800b578:	b00b      	add	sp, #44	; 0x2c
 800b57a:	ecbd 8b02 	vpop	{d8}
 800b57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b580:	4b0b      	ldr	r3, [pc, #44]	; (800b5b0 <sinh+0xbc>)
 800b582:	e7e7      	b.n	800b554 <sinh+0x60>
 800b584:	f7f5 fa80 	bl	8000a88 <__aeabi_dcmpgt>
 800b588:	2200      	movs	r2, #0
 800b58a:	b948      	cbnz	r0, 800b5a0 <sinh+0xac>
 800b58c:	4b09      	ldr	r3, [pc, #36]	; (800b5b4 <sinh+0xc0>)
 800b58e:	2e02      	cmp	r6, #2
 800b590:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b594:	d1e0      	bne.n	800b558 <sinh+0x64>
 800b596:	f7fe ffef 	bl	800a578 <__errno>
 800b59a:	2322      	movs	r3, #34	; 0x22
 800b59c:	6003      	str	r3, [r0, #0]
 800b59e:	e7df      	b.n	800b560 <sinh+0x6c>
 800b5a0:	4b05      	ldr	r3, [pc, #20]	; (800b5b8 <sinh+0xc4>)
 800b5a2:	e7f4      	b.n	800b58e <sinh+0x9a>
 800b5a4:	200000cc 	.word	0x200000cc
 800b5a8:	08010daf 	.word	0x08010daf
 800b5ac:	c7efffff 	.word	0xc7efffff
 800b5b0:	47efffff 	.word	0x47efffff
 800b5b4:	fff00000 	.word	0xfff00000
 800b5b8:	7ff00000 	.word	0x7ff00000

0800b5bc <sqrtf>:
 800b5bc:	b510      	push	{r4, lr}
 800b5be:	ed2d 8b02 	vpush	{d8}
 800b5c2:	b08a      	sub	sp, #40	; 0x28
 800b5c4:	eeb0 8a40 	vmov.f32	s16, s0
 800b5c8:	f001 fdd6 	bl	800d178 <__ieee754_sqrtf>
 800b5cc:	4b21      	ldr	r3, [pc, #132]	; (800b654 <sqrtf+0x98>)
 800b5ce:	f993 4000 	ldrsb.w	r4, [r3]
 800b5d2:	1c63      	adds	r3, r4, #1
 800b5d4:	d02c      	beq.n	800b630 <sqrtf+0x74>
 800b5d6:	eeb4 8a48 	vcmp.f32	s16, s16
 800b5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5de:	d627      	bvs.n	800b630 <sqrtf+0x74>
 800b5e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5e8:	d522      	bpl.n	800b630 <sqrtf+0x74>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	9300      	str	r3, [sp, #0]
 800b5ee:	4b1a      	ldr	r3, [pc, #104]	; (800b658 <sqrtf+0x9c>)
 800b5f0:	9301      	str	r3, [sp, #4]
 800b5f2:	ee18 0a10 	vmov	r0, s16
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	9308      	str	r3, [sp, #32]
 800b5fa:	f7f4 ff5d 	bl	80004b8 <__aeabi_f2d>
 800b5fe:	2200      	movs	r2, #0
 800b600:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b608:	2300      	movs	r3, #0
 800b60a:	b9ac      	cbnz	r4, 800b638 <sqrtf+0x7c>
 800b60c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b610:	4668      	mov	r0, sp
 800b612:	f002 fd35 	bl	800e080 <matherr>
 800b616:	b1b8      	cbz	r0, 800b648 <sqrtf+0x8c>
 800b618:	9b08      	ldr	r3, [sp, #32]
 800b61a:	b11b      	cbz	r3, 800b624 <sqrtf+0x68>
 800b61c:	f7fe ffac 	bl	800a578 <__errno>
 800b620:	9b08      	ldr	r3, [sp, #32]
 800b622:	6003      	str	r3, [r0, #0]
 800b624:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b628:	f7f5 fa96 	bl	8000b58 <__aeabi_d2f>
 800b62c:	ee00 0a10 	vmov	s0, r0
 800b630:	b00a      	add	sp, #40	; 0x28
 800b632:	ecbd 8b02 	vpop	{d8}
 800b636:	bd10      	pop	{r4, pc}
 800b638:	4610      	mov	r0, r2
 800b63a:	4619      	mov	r1, r3
 800b63c:	f7f5 f8be 	bl	80007bc <__aeabi_ddiv>
 800b640:	2c02      	cmp	r4, #2
 800b642:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b646:	d1e3      	bne.n	800b610 <sqrtf+0x54>
 800b648:	f7fe ff96 	bl	800a578 <__errno>
 800b64c:	2321      	movs	r3, #33	; 0x21
 800b64e:	6003      	str	r3, [r0, #0]
 800b650:	e7e2      	b.n	800b618 <sqrtf+0x5c>
 800b652:	bf00      	nop
 800b654:	200000cc 	.word	0x200000cc
 800b658:	08010db4 	.word	0x08010db4

0800b65c <carg>:
 800b65c:	b508      	push	{r3, lr}
 800b65e:	ed2d 8b06 	vpush	{d8-d10}
 800b662:	eeb0 aa40 	vmov.f32	s20, s0
 800b666:	eef0 aa60 	vmov.f32	s21, s1
 800b66a:	eeb0 9a41 	vmov.f32	s18, s2
 800b66e:	eef0 9a61 	vmov.f32	s19, s3
 800b672:	f7ff f9c9 	bl	800aa08 <cimag>
 800b676:	eeb0 1a49 	vmov.f32	s2, s18
 800b67a:	eef0 1a69 	vmov.f32	s3, s19
 800b67e:	eeb0 8a40 	vmov.f32	s16, s0
 800b682:	eef0 8a60 	vmov.f32	s17, s1
 800b686:	eeb0 0a4a 	vmov.f32	s0, s20
 800b68a:	eef0 0a6a 	vmov.f32	s1, s21
 800b68e:	f7ff fa97 	bl	800abc0 <creal>
 800b692:	eeb0 1a40 	vmov.f32	s2, s0
 800b696:	eef0 1a60 	vmov.f32	s3, s1
 800b69a:	eeb0 0a48 	vmov.f32	s0, s16
 800b69e:	eef0 0a68 	vmov.f32	s1, s17
 800b6a2:	ecbd 8b06 	vpop	{d8-d10}
 800b6a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b6aa:	f002 bdef 	b.w	800e28c <atan2>
	...

0800b6b0 <__ieee754_cosh>:
 800b6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6b4:	ec53 2b10 	vmov	r2, r3, d0
 800b6b8:	4949      	ldr	r1, [pc, #292]	; (800b7e0 <__ieee754_cosh+0x130>)
 800b6ba:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b6be:	428c      	cmp	r4, r1
 800b6c0:	dd02      	ble.n	800b6c8 <__ieee754_cosh+0x18>
 800b6c2:	4610      	mov	r0, r2
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	e05a      	b.n	800b77e <__ieee754_cosh+0xce>
 800b6c8:	4946      	ldr	r1, [pc, #280]	; (800b7e4 <__ieee754_cosh+0x134>)
 800b6ca:	428c      	cmp	r4, r1
 800b6cc:	dc2f      	bgt.n	800b72e <__ieee754_cosh+0x7e>
 800b6ce:	f7ff fb8b 	bl	800ade8 <fabs>
 800b6d2:	f002 fa19 	bl	800db08 <expm1>
 800b6d6:	ec59 8b10 	vmov	r8, r9, d0
 800b6da:	2200      	movs	r2, #0
 800b6dc:	4b42      	ldr	r3, [pc, #264]	; (800b7e8 <__ieee754_cosh+0x138>)
 800b6de:	ee10 0a10 	vmov	r0, s0
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	f7f4 fd8a 	bl	80001fc <__adddf3>
 800b6e8:	f1b4 5f72 	cmp.w	r4, #1015021568	; 0x3c800000
 800b6ec:	4606      	mov	r6, r0
 800b6ee:	460f      	mov	r7, r1
 800b6f0:	db19      	blt.n	800b726 <__ieee754_cosh+0x76>
 800b6f2:	4642      	mov	r2, r8
 800b6f4:	464b      	mov	r3, r9
 800b6f6:	4640      	mov	r0, r8
 800b6f8:	4649      	mov	r1, r9
 800b6fa:	f7f4 ff35 	bl	8000568 <__aeabi_dmul>
 800b6fe:	4632      	mov	r2, r6
 800b700:	4604      	mov	r4, r0
 800b702:	460d      	mov	r5, r1
 800b704:	463b      	mov	r3, r7
 800b706:	4630      	mov	r0, r6
 800b708:	4639      	mov	r1, r7
 800b70a:	f7f4 fd77 	bl	80001fc <__adddf3>
 800b70e:	4602      	mov	r2, r0
 800b710:	460b      	mov	r3, r1
 800b712:	4620      	mov	r0, r4
 800b714:	4629      	mov	r1, r5
 800b716:	f7f5 f851 	bl	80007bc <__aeabi_ddiv>
 800b71a:	4b33      	ldr	r3, [pc, #204]	; (800b7e8 <__ieee754_cosh+0x138>)
 800b71c:	2200      	movs	r2, #0
 800b71e:	f7f4 fd6d 	bl	80001fc <__adddf3>
 800b722:	4606      	mov	r6, r0
 800b724:	460f      	mov	r7, r1
 800b726:	ec47 6b10 	vmov	d0, r6, r7
 800b72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b72e:	492f      	ldr	r1, [pc, #188]	; (800b7ec <__ieee754_cosh+0x13c>)
 800b730:	428c      	cmp	r4, r1
 800b732:	dc19      	bgt.n	800b768 <__ieee754_cosh+0xb8>
 800b734:	f7ff fb58 	bl	800ade8 <fabs>
 800b738:	f000 f862 	bl	800b800 <__ieee754_exp>
 800b73c:	ec55 4b10 	vmov	r4, r5, d0
 800b740:	2200      	movs	r2, #0
 800b742:	4b2b      	ldr	r3, [pc, #172]	; (800b7f0 <__ieee754_cosh+0x140>)
 800b744:	ee10 0a10 	vmov	r0, s0
 800b748:	4629      	mov	r1, r5
 800b74a:	f7f4 ff0d 	bl	8000568 <__aeabi_dmul>
 800b74e:	4622      	mov	r2, r4
 800b750:	4606      	mov	r6, r0
 800b752:	460f      	mov	r7, r1
 800b754:	462b      	mov	r3, r5
 800b756:	2000      	movs	r0, #0
 800b758:	4925      	ldr	r1, [pc, #148]	; (800b7f0 <__ieee754_cosh+0x140>)
 800b75a:	f7f5 f82f 	bl	80007bc <__aeabi_ddiv>
 800b75e:	4602      	mov	r2, r0
 800b760:	460b      	mov	r3, r1
 800b762:	4630      	mov	r0, r6
 800b764:	4639      	mov	r1, r7
 800b766:	e7da      	b.n	800b71e <__ieee754_cosh+0x6e>
 800b768:	4922      	ldr	r1, [pc, #136]	; (800b7f4 <__ieee754_cosh+0x144>)
 800b76a:	428c      	cmp	r4, r1
 800b76c:	dc0a      	bgt.n	800b784 <__ieee754_cosh+0xd4>
 800b76e:	f7ff fb3b 	bl	800ade8 <fabs>
 800b772:	f000 f845 	bl	800b800 <__ieee754_exp>
 800b776:	4b1e      	ldr	r3, [pc, #120]	; (800b7f0 <__ieee754_cosh+0x140>)
 800b778:	ec51 0b10 	vmov	r0, r1, d0
 800b77c:	2200      	movs	r2, #0
 800b77e:	f7f4 fef3 	bl	8000568 <__aeabi_dmul>
 800b782:	e7ce      	b.n	800b722 <__ieee754_cosh+0x72>
 800b784:	491c      	ldr	r1, [pc, #112]	; (800b7f8 <__ieee754_cosh+0x148>)
 800b786:	428c      	cmp	r4, r1
 800b788:	dd05      	ble.n	800b796 <__ieee754_cosh+0xe6>
 800b78a:	3101      	adds	r1, #1
 800b78c:	428c      	cmp	r4, r1
 800b78e:	d11c      	bne.n	800b7ca <__ieee754_cosh+0x11a>
 800b790:	481a      	ldr	r0, [pc, #104]	; (800b7fc <__ieee754_cosh+0x14c>)
 800b792:	4282      	cmp	r2, r0
 800b794:	d819      	bhi.n	800b7ca <__ieee754_cosh+0x11a>
 800b796:	ec43 2b10 	vmov	d0, r2, r3
 800b79a:	f7ff fb25 	bl	800ade8 <fabs>
 800b79e:	2200      	movs	r2, #0
 800b7a0:	4b13      	ldr	r3, [pc, #76]	; (800b7f0 <__ieee754_cosh+0x140>)
 800b7a2:	ec51 0b10 	vmov	r0, r1, d0
 800b7a6:	f7f4 fedf 	bl	8000568 <__aeabi_dmul>
 800b7aa:	ec41 0b10 	vmov	d0, r0, r1
 800b7ae:	f000 f827 	bl	800b800 <__ieee754_exp>
 800b7b2:	ec55 4b10 	vmov	r4, r5, d0
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	4b0d      	ldr	r3, [pc, #52]	; (800b7f0 <__ieee754_cosh+0x140>)
 800b7ba:	ee10 0a10 	vmov	r0, s0
 800b7be:	4629      	mov	r1, r5
 800b7c0:	f7f4 fed2 	bl	8000568 <__aeabi_dmul>
 800b7c4:	4622      	mov	r2, r4
 800b7c6:	462b      	mov	r3, r5
 800b7c8:	e7d9      	b.n	800b77e <__ieee754_cosh+0xce>
 800b7ca:	a303      	add	r3, pc, #12	; (adr r3, 800b7d8 <__ieee754_cosh+0x128>)
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	e777      	b.n	800b6c2 <__ieee754_cosh+0x12>
 800b7d2:	bf00      	nop
 800b7d4:	f3af 8000 	nop.w
 800b7d8:	8800759c 	.word	0x8800759c
 800b7dc:	7e37e43c 	.word	0x7e37e43c
 800b7e0:	7fefffff 	.word	0x7fefffff
 800b7e4:	3fd62e42 	.word	0x3fd62e42
 800b7e8:	3ff00000 	.word	0x3ff00000
 800b7ec:	4035ffff 	.word	0x4035ffff
 800b7f0:	3fe00000 	.word	0x3fe00000
 800b7f4:	40862e41 	.word	0x40862e41
 800b7f8:	408633cd 	.word	0x408633cd
 800b7fc:	8fb9f87d 	.word	0x8fb9f87d

0800b800 <__ieee754_exp>:
 800b800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b804:	ec55 4b10 	vmov	r4, r5, d0
 800b808:	4aab      	ldr	r2, [pc, #684]	; (800bab8 <__ieee754_exp+0x2b8>)
 800b80a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b80e:	4296      	cmp	r6, r2
 800b810:	ea4f 77d5 	mov.w	r7, r5, lsr #31
 800b814:	d932      	bls.n	800b87c <__ieee754_exp+0x7c>
 800b816:	4aa9      	ldr	r2, [pc, #676]	; (800babc <__ieee754_exp+0x2bc>)
 800b818:	4296      	cmp	r6, r2
 800b81a:	d913      	bls.n	800b844 <__ieee754_exp+0x44>
 800b81c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b820:	4323      	orrs	r3, r4
 800b822:	ee10 2a10 	vmov	r2, s0
 800b826:	d007      	beq.n	800b838 <__ieee754_exp+0x38>
 800b828:	462b      	mov	r3, r5
 800b82a:	4620      	mov	r0, r4
 800b82c:	4629      	mov	r1, r5
 800b82e:	f7f4 fce5 	bl	80001fc <__adddf3>
 800b832:	4604      	mov	r4, r0
 800b834:	460d      	mov	r5, r1
 800b836:	e000      	b.n	800b83a <__ieee754_exp+0x3a>
 800b838:	b9ef      	cbnz	r7, 800b876 <__ieee754_exp+0x76>
 800b83a:	ec45 4b10 	vmov	d0, r4, r5
 800b83e:	b004      	add	sp, #16
 800b840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b844:	a386      	add	r3, pc, #536	; (adr r3, 800ba60 <__ieee754_exp+0x260>)
 800b846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84a:	ee10 0a10 	vmov	r0, s0
 800b84e:	4629      	mov	r1, r5
 800b850:	f7f5 f91a 	bl	8000a88 <__aeabi_dcmpgt>
 800b854:	b138      	cbz	r0, 800b866 <__ieee754_exp+0x66>
 800b856:	a384      	add	r3, pc, #528	; (adr r3, 800ba68 <__ieee754_exp+0x268>)
 800b858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85c:	4610      	mov	r0, r2
 800b85e:	4619      	mov	r1, r3
 800b860:	f7f4 fe82 	bl	8000568 <__aeabi_dmul>
 800b864:	e7e5      	b.n	800b832 <__ieee754_exp+0x32>
 800b866:	a382      	add	r3, pc, #520	; (adr r3, 800ba70 <__ieee754_exp+0x270>)
 800b868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86c:	4620      	mov	r0, r4
 800b86e:	4629      	mov	r1, r5
 800b870:	f7f5 f8ec 	bl	8000a4c <__aeabi_dcmplt>
 800b874:	b130      	cbz	r0, 800b884 <__ieee754_exp+0x84>
 800b876:	2400      	movs	r4, #0
 800b878:	2500      	movs	r5, #0
 800b87a:	e7de      	b.n	800b83a <__ieee754_exp+0x3a>
 800b87c:	4b90      	ldr	r3, [pc, #576]	; (800bac0 <__ieee754_exp+0x2c0>)
 800b87e:	429e      	cmp	r6, r3
 800b880:	f240 80a6 	bls.w	800b9d0 <__ieee754_exp+0x1d0>
 800b884:	4b8f      	ldr	r3, [pc, #572]	; (800bac4 <__ieee754_exp+0x2c4>)
 800b886:	429e      	cmp	r6, r3
 800b888:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 800b88c:	d875      	bhi.n	800b97a <__ieee754_exp+0x17a>
 800b88e:	4b8e      	ldr	r3, [pc, #568]	; (800bac8 <__ieee754_exp+0x2c8>)
 800b890:	4e8e      	ldr	r6, [pc, #568]	; (800bacc <__ieee754_exp+0x2cc>)
 800b892:	4443      	add	r3, r8
 800b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b898:	4620      	mov	r0, r4
 800b89a:	4629      	mov	r1, r5
 800b89c:	f7f4 fcac 	bl	80001f8 <__aeabi_dsub>
 800b8a0:	4446      	add	r6, r8
 800b8a2:	e9cd 0100 	strd	r0, r1, [sp]
 800b8a6:	e9d6 8900 	ldrd	r8, r9, [r6]
 800b8aa:	f1c7 0a01 	rsb	sl, r7, #1
 800b8ae:	ebaa 0a07 	sub.w	sl, sl, r7
 800b8b2:	4642      	mov	r2, r8
 800b8b4:	464b      	mov	r3, r9
 800b8b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8ba:	f7f4 fc9d 	bl	80001f8 <__aeabi_dsub>
 800b8be:	4604      	mov	r4, r0
 800b8c0:	460d      	mov	r5, r1
 800b8c2:	4622      	mov	r2, r4
 800b8c4:	462b      	mov	r3, r5
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	f7f4 fe4d 	bl	8000568 <__aeabi_dmul>
 800b8ce:	a36a      	add	r3, pc, #424	; (adr r3, 800ba78 <__ieee754_exp+0x278>)
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	4606      	mov	r6, r0
 800b8d6:	460f      	mov	r7, r1
 800b8d8:	f7f4 fe46 	bl	8000568 <__aeabi_dmul>
 800b8dc:	a368      	add	r3, pc, #416	; (adr r3, 800ba80 <__ieee754_exp+0x280>)
 800b8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e2:	f7f4 fc89 	bl	80001f8 <__aeabi_dsub>
 800b8e6:	4632      	mov	r2, r6
 800b8e8:	463b      	mov	r3, r7
 800b8ea:	f7f4 fe3d 	bl	8000568 <__aeabi_dmul>
 800b8ee:	a366      	add	r3, pc, #408	; (adr r3, 800ba88 <__ieee754_exp+0x288>)
 800b8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f4:	f7f4 fc82 	bl	80001fc <__adddf3>
 800b8f8:	4632      	mov	r2, r6
 800b8fa:	463b      	mov	r3, r7
 800b8fc:	f7f4 fe34 	bl	8000568 <__aeabi_dmul>
 800b900:	a363      	add	r3, pc, #396	; (adr r3, 800ba90 <__ieee754_exp+0x290>)
 800b902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b906:	f7f4 fc77 	bl	80001f8 <__aeabi_dsub>
 800b90a:	4632      	mov	r2, r6
 800b90c:	463b      	mov	r3, r7
 800b90e:	f7f4 fe2b 	bl	8000568 <__aeabi_dmul>
 800b912:	a361      	add	r3, pc, #388	; (adr r3, 800ba98 <__ieee754_exp+0x298>)
 800b914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b918:	f7f4 fc70 	bl	80001fc <__adddf3>
 800b91c:	4632      	mov	r2, r6
 800b91e:	463b      	mov	r3, r7
 800b920:	f7f4 fe22 	bl	8000568 <__aeabi_dmul>
 800b924:	4602      	mov	r2, r0
 800b926:	460b      	mov	r3, r1
 800b928:	4620      	mov	r0, r4
 800b92a:	4629      	mov	r1, r5
 800b92c:	f7f4 fc64 	bl	80001f8 <__aeabi_dsub>
 800b930:	4602      	mov	r2, r0
 800b932:	460b      	mov	r3, r1
 800b934:	4606      	mov	r6, r0
 800b936:	460f      	mov	r7, r1
 800b938:	4620      	mov	r0, r4
 800b93a:	4629      	mov	r1, r5
 800b93c:	f7f4 fe14 	bl	8000568 <__aeabi_dmul>
 800b940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b944:	f1ba 0f00 	cmp.w	sl, #0
 800b948:	d15c      	bne.n	800ba04 <__ieee754_exp+0x204>
 800b94a:	2200      	movs	r2, #0
 800b94c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b950:	4630      	mov	r0, r6
 800b952:	4639      	mov	r1, r7
 800b954:	f7f4 fc50 	bl	80001f8 <__aeabi_dsub>
 800b958:	4602      	mov	r2, r0
 800b95a:	460b      	mov	r3, r1
 800b95c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b960:	f7f4 ff2c 	bl	80007bc <__aeabi_ddiv>
 800b964:	4622      	mov	r2, r4
 800b966:	462b      	mov	r3, r5
 800b968:	f7f4 fc46 	bl	80001f8 <__aeabi_dsub>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	2000      	movs	r0, #0
 800b972:	4957      	ldr	r1, [pc, #348]	; (800bad0 <__ieee754_exp+0x2d0>)
 800b974:	f7f4 fc40 	bl	80001f8 <__aeabi_dsub>
 800b978:	e75b      	b.n	800b832 <__ieee754_exp+0x32>
 800b97a:	4e56      	ldr	r6, [pc, #344]	; (800bad4 <__ieee754_exp+0x2d4>)
 800b97c:	a348      	add	r3, pc, #288	; (adr r3, 800baa0 <__ieee754_exp+0x2a0>)
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	4446      	add	r6, r8
 800b984:	4620      	mov	r0, r4
 800b986:	4629      	mov	r1, r5
 800b988:	f7f4 fdee 	bl	8000568 <__aeabi_dmul>
 800b98c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b990:	f7f4 fc34 	bl	80001fc <__adddf3>
 800b994:	f7f5 f898 	bl	8000ac8 <__aeabi_d2iz>
 800b998:	4682      	mov	sl, r0
 800b99a:	f7f4 fd7b 	bl	8000494 <__aeabi_i2d>
 800b99e:	a342      	add	r3, pc, #264	; (adr r3, 800baa8 <__ieee754_exp+0x2a8>)
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	4606      	mov	r6, r0
 800b9a6:	460f      	mov	r7, r1
 800b9a8:	f7f4 fdde 	bl	8000568 <__aeabi_dmul>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	f7f4 fc20 	bl	80001f8 <__aeabi_dsub>
 800b9b8:	a33d      	add	r3, pc, #244	; (adr r3, 800bab0 <__ieee754_exp+0x2b0>)
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	e9cd 0100 	strd	r0, r1, [sp]
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	4639      	mov	r1, r7
 800b9c6:	f7f4 fdcf 	bl	8000568 <__aeabi_dmul>
 800b9ca:	4680      	mov	r8, r0
 800b9cc:	4689      	mov	r9, r1
 800b9ce:	e770      	b.n	800b8b2 <__ieee754_exp+0xb2>
 800b9d0:	4b41      	ldr	r3, [pc, #260]	; (800bad8 <__ieee754_exp+0x2d8>)
 800b9d2:	429e      	cmp	r6, r3
 800b9d4:	d811      	bhi.n	800b9fa <__ieee754_exp+0x1fa>
 800b9d6:	a324      	add	r3, pc, #144	; (adr r3, 800ba68 <__ieee754_exp+0x268>)
 800b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9dc:	ee10 0a10 	vmov	r0, s0
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	f7f4 fc0b 	bl	80001fc <__adddf3>
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	4b39      	ldr	r3, [pc, #228]	; (800bad0 <__ieee754_exp+0x2d0>)
 800b9ea:	f7f5 f84d 	bl	8000a88 <__aeabi_dcmpgt>
 800b9ee:	b138      	cbz	r0, 800ba00 <__ieee754_exp+0x200>
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	4b37      	ldr	r3, [pc, #220]	; (800bad0 <__ieee754_exp+0x2d0>)
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	e719      	b.n	800b82e <__ieee754_exp+0x2e>
 800b9fa:	f04f 0a00 	mov.w	sl, #0
 800b9fe:	e760      	b.n	800b8c2 <__ieee754_exp+0xc2>
 800ba00:	4682      	mov	sl, r0
 800ba02:	e75e      	b.n	800b8c2 <__ieee754_exp+0xc2>
 800ba04:	4632      	mov	r2, r6
 800ba06:	463b      	mov	r3, r7
 800ba08:	2000      	movs	r0, #0
 800ba0a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ba0e:	f7f4 fbf3 	bl	80001f8 <__aeabi_dsub>
 800ba12:	4602      	mov	r2, r0
 800ba14:	460b      	mov	r3, r1
 800ba16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba1a:	f7f4 fecf 	bl	80007bc <__aeabi_ddiv>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	460b      	mov	r3, r1
 800ba22:	4640      	mov	r0, r8
 800ba24:	4649      	mov	r1, r9
 800ba26:	f7f4 fbe7 	bl	80001f8 <__aeabi_dsub>
 800ba2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba2e:	f7f4 fbe3 	bl	80001f8 <__aeabi_dsub>
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	2000      	movs	r0, #0
 800ba38:	4925      	ldr	r1, [pc, #148]	; (800bad0 <__ieee754_exp+0x2d0>)
 800ba3a:	f7f4 fbdd 	bl	80001f8 <__aeabi_dsub>
 800ba3e:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800ba42:	4592      	cmp	sl, r2
 800ba44:	db02      	blt.n	800ba4c <__ieee754_exp+0x24c>
 800ba46:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ba4a:	e6f2      	b.n	800b832 <__ieee754_exp+0x32>
 800ba4c:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800ba50:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ba54:	2200      	movs	r2, #0
 800ba56:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800ba5a:	e701      	b.n	800b860 <__ieee754_exp+0x60>
 800ba5c:	f3af 8000 	nop.w
 800ba60:	fefa39ef 	.word	0xfefa39ef
 800ba64:	40862e42 	.word	0x40862e42
 800ba68:	8800759c 	.word	0x8800759c
 800ba6c:	7e37e43c 	.word	0x7e37e43c
 800ba70:	d52d3051 	.word	0xd52d3051
 800ba74:	c0874910 	.word	0xc0874910
 800ba78:	72bea4d0 	.word	0x72bea4d0
 800ba7c:	3e663769 	.word	0x3e663769
 800ba80:	c5d26bf1 	.word	0xc5d26bf1
 800ba84:	3ebbbd41 	.word	0x3ebbbd41
 800ba88:	af25de2c 	.word	0xaf25de2c
 800ba8c:	3f11566a 	.word	0x3f11566a
 800ba90:	16bebd93 	.word	0x16bebd93
 800ba94:	3f66c16c 	.word	0x3f66c16c
 800ba98:	5555553e 	.word	0x5555553e
 800ba9c:	3fc55555 	.word	0x3fc55555
 800baa0:	652b82fe 	.word	0x652b82fe
 800baa4:	3ff71547 	.word	0x3ff71547
 800baa8:	fee00000 	.word	0xfee00000
 800baac:	3fe62e42 	.word	0x3fe62e42
 800bab0:	35793c76 	.word	0x35793c76
 800bab4:	3dea39ef 	.word	0x3dea39ef
 800bab8:	40862e41 	.word	0x40862e41
 800babc:	7fefffff 	.word	0x7fefffff
 800bac0:	3fd62e42 	.word	0x3fd62e42
 800bac4:	3ff0a2b1 	.word	0x3ff0a2b1
 800bac8:	08010dd0 	.word	0x08010dd0
 800bacc:	08010de0 	.word	0x08010de0
 800bad0:	3ff00000 	.word	0x3ff00000
 800bad4:	08010dc0 	.word	0x08010dc0
 800bad8:	3e2fffff 	.word	0x3e2fffff

0800badc <__ieee754_hypot>:
 800badc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae0:	ec53 2b10 	vmov	r2, r3, d0
 800bae4:	ec59 8b11 	vmov	r8, r9, d1
 800bae8:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800baec:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800baf0:	42b7      	cmp	r7, r6
 800baf2:	b089      	sub	sp, #36	; 0x24
 800baf4:	da06      	bge.n	800bb04 <__ieee754_hypot+0x28>
 800baf6:	4639      	mov	r1, r7
 800baf8:	ee11 2a10 	vmov	r2, s2
 800bafc:	ee10 8a10 	vmov	r8, s0
 800bb00:	4637      	mov	r7, r6
 800bb02:	460e      	mov	r6, r1
 800bb04:	1bbb      	subs	r3, r7, r6
 800bb06:	f1b3 7f70 	cmp.w	r3, #62914560	; 0x3c00000
 800bb0a:	4692      	mov	sl, r2
 800bb0c:	46bb      	mov	fp, r7
 800bb0e:	46b1      	mov	r9, r6
 800bb10:	dd08      	ble.n	800bb24 <__ieee754_hypot+0x48>
 800bb12:	4642      	mov	r2, r8
 800bb14:	4633      	mov	r3, r6
 800bb16:	4650      	mov	r0, sl
 800bb18:	4639      	mov	r1, r7
 800bb1a:	f7f4 fb6f 	bl	80001fc <__adddf3>
 800bb1e:	4682      	mov	sl, r0
 800bb20:	468b      	mov	fp, r1
 800bb22:	e01c      	b.n	800bb5e <__ieee754_hypot+0x82>
 800bb24:	4b79      	ldr	r3, [pc, #484]	; (800bd0c <__ieee754_hypot+0x230>)
 800bb26:	429f      	cmp	r7, r3
 800bb28:	f340 80a0 	ble.w	800bc6c <__ieee754_hypot+0x190>
 800bb2c:	4b78      	ldr	r3, [pc, #480]	; (800bd10 <__ieee754_hypot+0x234>)
 800bb2e:	429f      	cmp	r7, r3
 800bb30:	dd1a      	ble.n	800bb68 <__ieee754_hypot+0x8c>
 800bb32:	f3c7 0713 	ubfx	r7, r7, #0, #20
 800bb36:	4613      	mov	r3, r2
 800bb38:	433b      	orrs	r3, r7
 800bb3a:	d007      	beq.n	800bb4c <__ieee754_hypot+0x70>
 800bb3c:	4650      	mov	r0, sl
 800bb3e:	4659      	mov	r1, fp
 800bb40:	4642      	mov	r2, r8
 800bb42:	4633      	mov	r3, r6
 800bb44:	f7f4 fb5a 	bl	80001fc <__adddf3>
 800bb48:	4682      	mov	sl, r0
 800bb4a:	468b      	mov	fp, r1
 800bb4c:	f086 46ff 	eor.w	r6, r6, #2139095040	; 0x7f800000
 800bb50:	f486 06e0 	eor.w	r6, r6, #7340032	; 0x700000
 800bb54:	4643      	mov	r3, r8
 800bb56:	4333      	orrs	r3, r6
 800bb58:	d101      	bne.n	800bb5e <__ieee754_hypot+0x82>
 800bb5a:	46c2      	mov	sl, r8
 800bb5c:	46cb      	mov	fp, r9
 800bb5e:	ec4b ab10 	vmov	d0, sl, fp
 800bb62:	b009      	add	sp, #36	; 0x24
 800bb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb68:	f1a7 5716 	sub.w	r7, r7, #629145600	; 0x25800000
 800bb6c:	f1a6 5616 	sub.w	r6, r6, #629145600	; 0x25800000
 800bb70:	46bb      	mov	fp, r7
 800bb72:	46b1      	mov	r9, r6
 800bb74:	f44f 7316 	mov.w	r3, #600	; 0x258
 800bb78:	9301      	str	r3, [sp, #4]
 800bb7a:	4b66      	ldr	r3, [pc, #408]	; (800bd14 <__ieee754_hypot+0x238>)
 800bb7c:	429e      	cmp	r6, r3
 800bb7e:	dc1b      	bgt.n	800bbb8 <__ieee754_hypot+0xdc>
 800bb80:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 800bb84:	da74      	bge.n	800bc70 <__ieee754_hypot+0x194>
 800bb86:	4643      	mov	r3, r8
 800bb88:	4333      	orrs	r3, r6
 800bb8a:	d0e8      	beq.n	800bb5e <__ieee754_hypot+0x82>
 800bb8c:	4d62      	ldr	r5, [pc, #392]	; (800bd18 <__ieee754_hypot+0x23c>)
 800bb8e:	2400      	movs	r4, #0
 800bb90:	4622      	mov	r2, r4
 800bb92:	462b      	mov	r3, r5
 800bb94:	4640      	mov	r0, r8
 800bb96:	4649      	mov	r1, r9
 800bb98:	f7f4 fce6 	bl	8000568 <__aeabi_dmul>
 800bb9c:	462b      	mov	r3, r5
 800bb9e:	4680      	mov	r8, r0
 800bba0:	4689      	mov	r9, r1
 800bba2:	4650      	mov	r0, sl
 800bba4:	4659      	mov	r1, fp
 800bba6:	4622      	mov	r2, r4
 800bba8:	f7f4 fcde 	bl	8000568 <__aeabi_dmul>
 800bbac:	9b01      	ldr	r3, [sp, #4]
 800bbae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bbb2:	4682      	mov	sl, r0
 800bbb4:	468b      	mov	fp, r1
 800bbb6:	9301      	str	r3, [sp, #4]
 800bbb8:	4642      	mov	r2, r8
 800bbba:	464b      	mov	r3, r9
 800bbbc:	4650      	mov	r0, sl
 800bbbe:	4659      	mov	r1, fp
 800bbc0:	f7f4 fb1a 	bl	80001f8 <__aeabi_dsub>
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	460d      	mov	r5, r1
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4640      	mov	r0, r8
 800bbce:	4649      	mov	r1, r9
 800bbd0:	f7f4 ff3c 	bl	8000a4c <__aeabi_dcmplt>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d056      	beq.n	800bc86 <__ieee754_hypot+0x1aa>
 800bbd8:	2400      	movs	r4, #0
 800bbda:	463b      	mov	r3, r7
 800bbdc:	4622      	mov	r2, r4
 800bbde:	4639      	mov	r1, r7
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f7f4 fcc1 	bl	8000568 <__aeabi_dmul>
 800bbe6:	4642      	mov	r2, r8
 800bbe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbec:	464b      	mov	r3, r9
 800bbee:	4640      	mov	r0, r8
 800bbf0:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 800bbf4:	f7f4 fcb8 	bl	8000568 <__aeabi_dmul>
 800bbf8:	463d      	mov	r5, r7
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	460f      	mov	r7, r1
 800bbfe:	4622      	mov	r2, r4
 800bc00:	462b      	mov	r3, r5
 800bc02:	4650      	mov	r0, sl
 800bc04:	4659      	mov	r1, fp
 800bc06:	f7f4 faf9 	bl	80001fc <__adddf3>
 800bc0a:	4622      	mov	r2, r4
 800bc0c:	4680      	mov	r8, r0
 800bc0e:	4689      	mov	r9, r1
 800bc10:	462b      	mov	r3, r5
 800bc12:	4650      	mov	r0, sl
 800bc14:	4659      	mov	r1, fp
 800bc16:	f7f4 faef 	bl	80001f8 <__aeabi_dsub>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	4640      	mov	r0, r8
 800bc20:	4649      	mov	r1, r9
 800bc22:	f7f4 fca1 	bl	8000568 <__aeabi_dmul>
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	4639      	mov	r1, r7
 800bc2e:	f7f4 fae3 	bl	80001f8 <__aeabi_dsub>
 800bc32:	4602      	mov	r2, r0
 800bc34:	460b      	mov	r3, r1
 800bc36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc3a:	f7f4 fadd 	bl	80001f8 <__aeabi_dsub>
 800bc3e:	ec41 0b10 	vmov	d0, r0, r1
 800bc42:	f001 f9e9 	bl	800d018 <__ieee754_sqrt>
 800bc46:	9b01      	ldr	r3, [sp, #4]
 800bc48:	ec5b ab10 	vmov	sl, fp, d0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d086      	beq.n	800bb5e <__ieee754_hypot+0x82>
 800bc50:	051b      	lsls	r3, r3, #20
 800bc52:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800bc56:	2000      	movs	r0, #0
 800bc58:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	460b      	mov	r3, r1
 800bc60:	ee10 0a10 	vmov	r0, s0
 800bc64:	4659      	mov	r1, fp
 800bc66:	f7f4 fc7f 	bl	8000568 <__aeabi_dmul>
 800bc6a:	e758      	b.n	800bb1e <__ieee754_hypot+0x42>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	e783      	b.n	800bb78 <__ieee754_hypot+0x9c>
 800bc70:	9b01      	ldr	r3, [sp, #4]
 800bc72:	f107 5716 	add.w	r7, r7, #629145600	; 0x25800000
 800bc76:	f106 5616 	add.w	r6, r6, #629145600	; 0x25800000
 800bc7a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800bc7e:	9301      	str	r3, [sp, #4]
 800bc80:	46bb      	mov	fp, r7
 800bc82:	46b1      	mov	r9, r6
 800bc84:	e798      	b.n	800bbb8 <__ieee754_hypot+0xdc>
 800bc86:	4633      	mov	r3, r6
 800bc88:	2200      	movs	r2, #0
 800bc8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f507 1380 	add.w	r3, r7, #1048576	; 0x100000
 800bc98:	4616      	mov	r6, r2
 800bc9a:	461f      	mov	r7, r3
 800bc9c:	f7f4 fc64 	bl	8000568 <__aeabi_dmul>
 800bca0:	4622      	mov	r2, r4
 800bca2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bca6:	462b      	mov	r3, r5
 800bca8:	4620      	mov	r0, r4
 800bcaa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 800bcae:	f7f4 fc5b 	bl	8000568 <__aeabi_dmul>
 800bcb2:	4652      	mov	r2, sl
 800bcb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bcb8:	465b      	mov	r3, fp
 800bcba:	4650      	mov	r0, sl
 800bcbc:	4659      	mov	r1, fp
 800bcbe:	f7f4 fa9d 	bl	80001fc <__adddf3>
 800bcc2:	4632      	mov	r2, r6
 800bcc4:	463b      	mov	r3, r7
 800bcc6:	f7f4 fa97 	bl	80001f8 <__aeabi_dsub>
 800bcca:	4642      	mov	r2, r8
 800bccc:	464b      	mov	r3, r9
 800bcce:	f7f4 fc4b 	bl	8000568 <__aeabi_dmul>
 800bcd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	460d      	mov	r5, r1
 800bcda:	4640      	mov	r0, r8
 800bcdc:	4649      	mov	r1, r9
 800bcde:	f7f4 fa8b 	bl	80001f8 <__aeabi_dsub>
 800bce2:	4632      	mov	r2, r6
 800bce4:	463b      	mov	r3, r7
 800bce6:	f7f4 fc3f 	bl	8000568 <__aeabi_dmul>
 800bcea:	4602      	mov	r2, r0
 800bcec:	460b      	mov	r3, r1
 800bcee:	4620      	mov	r0, r4
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	f7f4 fa83 	bl	80001fc <__adddf3>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcfe:	f7f4 fa7b 	bl	80001f8 <__aeabi_dsub>
 800bd02:	4602      	mov	r2, r0
 800bd04:	460b      	mov	r3, r1
 800bd06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd0a:	e796      	b.n	800bc3a <__ieee754_hypot+0x15e>
 800bd0c:	5f300000 	.word	0x5f300000
 800bd10:	7fefffff 	.word	0x7fefffff
 800bd14:	20afffff 	.word	0x20afffff
 800bd18:	7fd00000 	.word	0x7fd00000
 800bd1c:	00000000 	.word	0x00000000

0800bd20 <__ieee754_log>:
 800bd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	ec51 0b10 	vmov	r0, r1, d0
 800bd28:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bd2c:	b087      	sub	sp, #28
 800bd2e:	460d      	mov	r5, r1
 800bd30:	da27      	bge.n	800bd82 <__ieee754_log+0x62>
 800bd32:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd36:	4303      	orrs	r3, r0
 800bd38:	ee10 2a10 	vmov	r2, s0
 800bd3c:	d10a      	bne.n	800bd54 <__ieee754_log+0x34>
 800bd3e:	49cc      	ldr	r1, [pc, #816]	; (800c070 <__ieee754_log+0x350>)
 800bd40:	2200      	movs	r2, #0
 800bd42:	2300      	movs	r3, #0
 800bd44:	2000      	movs	r0, #0
 800bd46:	f7f4 fd39 	bl	80007bc <__aeabi_ddiv>
 800bd4a:	ec41 0b10 	vmov	d0, r0, r1
 800bd4e:	b007      	add	sp, #28
 800bd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd54:	2900      	cmp	r1, #0
 800bd56:	da05      	bge.n	800bd64 <__ieee754_log+0x44>
 800bd58:	460b      	mov	r3, r1
 800bd5a:	f7f4 fa4d 	bl	80001f8 <__aeabi_dsub>
 800bd5e:	2200      	movs	r2, #0
 800bd60:	2300      	movs	r3, #0
 800bd62:	e7f0      	b.n	800bd46 <__ieee754_log+0x26>
 800bd64:	4bc3      	ldr	r3, [pc, #780]	; (800c074 <__ieee754_log+0x354>)
 800bd66:	2200      	movs	r2, #0
 800bd68:	f7f4 fbfe 	bl	8000568 <__aeabi_dmul>
 800bd6c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800bd70:	460d      	mov	r5, r1
 800bd72:	4ac1      	ldr	r2, [pc, #772]	; (800c078 <__ieee754_log+0x358>)
 800bd74:	4295      	cmp	r5, r2
 800bd76:	dd06      	ble.n	800bd86 <__ieee754_log+0x66>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	f7f4 fa3e 	bl	80001fc <__adddf3>
 800bd80:	e7e3      	b.n	800bd4a <__ieee754_log+0x2a>
 800bd82:	2300      	movs	r3, #0
 800bd84:	e7f5      	b.n	800bd72 <__ieee754_log+0x52>
 800bd86:	152c      	asrs	r4, r5, #20
 800bd88:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bd8c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bd90:	441c      	add	r4, r3
 800bd92:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800bd96:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800bd9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd9e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800bda2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800bda6:	ea42 0105 	orr.w	r1, r2, r5
 800bdaa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800bdae:	2200      	movs	r2, #0
 800bdb0:	4bb2      	ldr	r3, [pc, #712]	; (800c07c <__ieee754_log+0x35c>)
 800bdb2:	f7f4 fa21 	bl	80001f8 <__aeabi_dsub>
 800bdb6:	1cab      	adds	r3, r5, #2
 800bdb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdbc:	2b02      	cmp	r3, #2
 800bdbe:	4682      	mov	sl, r0
 800bdc0:	468b      	mov	fp, r1
 800bdc2:	f04f 0200 	mov.w	r2, #0
 800bdc6:	dc53      	bgt.n	800be70 <__ieee754_log+0x150>
 800bdc8:	2300      	movs	r3, #0
 800bdca:	f7f4 fe35 	bl	8000a38 <__aeabi_dcmpeq>
 800bdce:	b1d0      	cbz	r0, 800be06 <__ieee754_log+0xe6>
 800bdd0:	2c00      	cmp	r4, #0
 800bdd2:	f000 8120 	beq.w	800c016 <__ieee754_log+0x2f6>
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f7f4 fb5c 	bl	8000494 <__aeabi_i2d>
 800bddc:	a390      	add	r3, pc, #576	; (adr r3, 800c020 <__ieee754_log+0x300>)
 800bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde2:	4606      	mov	r6, r0
 800bde4:	460f      	mov	r7, r1
 800bde6:	f7f4 fbbf 	bl	8000568 <__aeabi_dmul>
 800bdea:	a38f      	add	r3, pc, #572	; (adr r3, 800c028 <__ieee754_log+0x308>)
 800bdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	460d      	mov	r5, r1
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	4639      	mov	r1, r7
 800bdf8:	f7f4 fbb6 	bl	8000568 <__aeabi_dmul>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4620      	mov	r0, r4
 800be02:	4629      	mov	r1, r5
 800be04:	e7ba      	b.n	800bd7c <__ieee754_log+0x5c>
 800be06:	a38a      	add	r3, pc, #552	; (adr r3, 800c030 <__ieee754_log+0x310>)
 800be08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0c:	4650      	mov	r0, sl
 800be0e:	4659      	mov	r1, fp
 800be10:	f7f4 fbaa 	bl	8000568 <__aeabi_dmul>
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	2000      	movs	r0, #0
 800be1a:	4999      	ldr	r1, [pc, #612]	; (800c080 <__ieee754_log+0x360>)
 800be1c:	f7f4 f9ec 	bl	80001f8 <__aeabi_dsub>
 800be20:	4652      	mov	r2, sl
 800be22:	4606      	mov	r6, r0
 800be24:	460f      	mov	r7, r1
 800be26:	465b      	mov	r3, fp
 800be28:	4650      	mov	r0, sl
 800be2a:	4659      	mov	r1, fp
 800be2c:	f7f4 fb9c 	bl	8000568 <__aeabi_dmul>
 800be30:	4602      	mov	r2, r0
 800be32:	460b      	mov	r3, r1
 800be34:	4630      	mov	r0, r6
 800be36:	4639      	mov	r1, r7
 800be38:	f7f4 fb96 	bl	8000568 <__aeabi_dmul>
 800be3c:	4606      	mov	r6, r0
 800be3e:	460f      	mov	r7, r1
 800be40:	b914      	cbnz	r4, 800be48 <__ieee754_log+0x128>
 800be42:	4632      	mov	r2, r6
 800be44:	463b      	mov	r3, r7
 800be46:	e0a0      	b.n	800bf8a <__ieee754_log+0x26a>
 800be48:	4620      	mov	r0, r4
 800be4a:	f7f4 fb23 	bl	8000494 <__aeabi_i2d>
 800be4e:	a374      	add	r3, pc, #464	; (adr r3, 800c020 <__ieee754_log+0x300>)
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	4680      	mov	r8, r0
 800be56:	4689      	mov	r9, r1
 800be58:	f7f4 fb86 	bl	8000568 <__aeabi_dmul>
 800be5c:	a372      	add	r3, pc, #456	; (adr r3, 800c028 <__ieee754_log+0x308>)
 800be5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be62:	4604      	mov	r4, r0
 800be64:	460d      	mov	r5, r1
 800be66:	4640      	mov	r0, r8
 800be68:	4649      	mov	r1, r9
 800be6a:	f7f4 fb7d 	bl	8000568 <__aeabi_dmul>
 800be6e:	e0a5      	b.n	800bfbc <__ieee754_log+0x29c>
 800be70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be74:	f7f4 f9c2 	bl	80001fc <__adddf3>
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	4650      	mov	r0, sl
 800be7e:	4659      	mov	r1, fp
 800be80:	f7f4 fc9c 	bl	80007bc <__aeabi_ddiv>
 800be84:	e9cd 0100 	strd	r0, r1, [sp]
 800be88:	4620      	mov	r0, r4
 800be8a:	f7f4 fb03 	bl	8000494 <__aeabi_i2d>
 800be8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be96:	4610      	mov	r0, r2
 800be98:	4619      	mov	r1, r3
 800be9a:	f7f4 fb65 	bl	8000568 <__aeabi_dmul>
 800be9e:	4602      	mov	r2, r0
 800bea0:	460b      	mov	r3, r1
 800bea2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bea6:	f7f4 fb5f 	bl	8000568 <__aeabi_dmul>
 800beaa:	a363      	add	r3, pc, #396	; (adr r3, 800c038 <__ieee754_log+0x318>)
 800beac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb0:	4680      	mov	r8, r0
 800beb2:	4689      	mov	r9, r1
 800beb4:	f7f4 fb58 	bl	8000568 <__aeabi_dmul>
 800beb8:	a361      	add	r3, pc, #388	; (adr r3, 800c040 <__ieee754_log+0x320>)
 800beba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebe:	f7f4 f99d 	bl	80001fc <__adddf3>
 800bec2:	4642      	mov	r2, r8
 800bec4:	464b      	mov	r3, r9
 800bec6:	f7f4 fb4f 	bl	8000568 <__aeabi_dmul>
 800beca:	a35f      	add	r3, pc, #380	; (adr r3, 800c048 <__ieee754_log+0x328>)
 800becc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed0:	f7f4 f994 	bl	80001fc <__adddf3>
 800bed4:	4642      	mov	r2, r8
 800bed6:	464b      	mov	r3, r9
 800bed8:	f7f4 fb46 	bl	8000568 <__aeabi_dmul>
 800bedc:	a35c      	add	r3, pc, #368	; (adr r3, 800c050 <__ieee754_log+0x330>)
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	f7f4 f98b 	bl	80001fc <__adddf3>
 800bee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800beea:	f7f4 fb3d 	bl	8000568 <__aeabi_dmul>
 800beee:	a35a      	add	r3, pc, #360	; (adr r3, 800c058 <__ieee754_log+0x338>)
 800bef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bef8:	4640      	mov	r0, r8
 800befa:	4649      	mov	r1, r9
 800befc:	f7f4 fb34 	bl	8000568 <__aeabi_dmul>
 800bf00:	a357      	add	r3, pc, #348	; (adr r3, 800c060 <__ieee754_log+0x340>)
 800bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf06:	f7f4 f979 	bl	80001fc <__adddf3>
 800bf0a:	4642      	mov	r2, r8
 800bf0c:	464b      	mov	r3, r9
 800bf0e:	f7f4 fb2b 	bl	8000568 <__aeabi_dmul>
 800bf12:	a355      	add	r3, pc, #340	; (adr r3, 800c068 <__ieee754_log+0x348>)
 800bf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf18:	f7f4 f970 	bl	80001fc <__adddf3>
 800bf1c:	4642      	mov	r2, r8
 800bf1e:	464b      	mov	r3, r9
 800bf20:	f7f4 fb22 	bl	8000568 <__aeabi_dmul>
 800bf24:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800bf28:	4602      	mov	r2, r0
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800bf30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf34:	f7f4 f962 	bl	80001fc <__adddf3>
 800bf38:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800bf3c:	3551      	adds	r5, #81	; 0x51
 800bf3e:	4335      	orrs	r5, r6
 800bf40:	2d00      	cmp	r5, #0
 800bf42:	4680      	mov	r8, r0
 800bf44:	4689      	mov	r9, r1
 800bf46:	dd48      	ble.n	800bfda <__ieee754_log+0x2ba>
 800bf48:	2200      	movs	r2, #0
 800bf4a:	4b4d      	ldr	r3, [pc, #308]	; (800c080 <__ieee754_log+0x360>)
 800bf4c:	4650      	mov	r0, sl
 800bf4e:	4659      	mov	r1, fp
 800bf50:	f7f4 fb0a 	bl	8000568 <__aeabi_dmul>
 800bf54:	4652      	mov	r2, sl
 800bf56:	465b      	mov	r3, fp
 800bf58:	f7f4 fb06 	bl	8000568 <__aeabi_dmul>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	4606      	mov	r6, r0
 800bf62:	460f      	mov	r7, r1
 800bf64:	4640      	mov	r0, r8
 800bf66:	4649      	mov	r1, r9
 800bf68:	f7f4 f948 	bl	80001fc <__adddf3>
 800bf6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf70:	f7f4 fafa 	bl	8000568 <__aeabi_dmul>
 800bf74:	4680      	mov	r8, r0
 800bf76:	4689      	mov	r9, r1
 800bf78:	b964      	cbnz	r4, 800bf94 <__ieee754_log+0x274>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	4630      	mov	r0, r6
 800bf80:	4639      	mov	r1, r7
 800bf82:	f7f4 f939 	bl	80001f8 <__aeabi_dsub>
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	4650      	mov	r0, sl
 800bf8c:	4659      	mov	r1, fp
 800bf8e:	f7f4 f933 	bl	80001f8 <__aeabi_dsub>
 800bf92:	e6da      	b.n	800bd4a <__ieee754_log+0x2a>
 800bf94:	a322      	add	r3, pc, #136	; (adr r3, 800c020 <__ieee754_log+0x300>)
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf9e:	f7f4 fae3 	bl	8000568 <__aeabi_dmul>
 800bfa2:	a321      	add	r3, pc, #132	; (adr r3, 800c028 <__ieee754_log+0x308>)
 800bfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	460d      	mov	r5, r1
 800bfac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfb0:	f7f4 fada 	bl	8000568 <__aeabi_dmul>
 800bfb4:	4642      	mov	r2, r8
 800bfb6:	464b      	mov	r3, r9
 800bfb8:	f7f4 f920 	bl	80001fc <__adddf3>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	4639      	mov	r1, r7
 800bfc4:	f7f4 f918 	bl	80001f8 <__aeabi_dsub>
 800bfc8:	4652      	mov	r2, sl
 800bfca:	465b      	mov	r3, fp
 800bfcc:	f7f4 f914 	bl	80001f8 <__aeabi_dsub>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	e7d9      	b.n	800bf8e <__ieee754_log+0x26e>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	460b      	mov	r3, r1
 800bfde:	4650      	mov	r0, sl
 800bfe0:	4659      	mov	r1, fp
 800bfe2:	f7f4 f909 	bl	80001f8 <__aeabi_dsub>
 800bfe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfea:	f7f4 fabd 	bl	8000568 <__aeabi_dmul>
 800bfee:	4606      	mov	r6, r0
 800bff0:	460f      	mov	r7, r1
 800bff2:	2c00      	cmp	r4, #0
 800bff4:	f43f af25 	beq.w	800be42 <__ieee754_log+0x122>
 800bff8:	a309      	add	r3, pc, #36	; (adr r3, 800c020 <__ieee754_log+0x300>)
 800bffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c002:	f7f4 fab1 	bl	8000568 <__aeabi_dmul>
 800c006:	a308      	add	r3, pc, #32	; (adr r3, 800c028 <__ieee754_log+0x308>)
 800c008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00c:	4604      	mov	r4, r0
 800c00e:	460d      	mov	r5, r1
 800c010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c014:	e729      	b.n	800be6a <__ieee754_log+0x14a>
 800c016:	2000      	movs	r0, #0
 800c018:	2100      	movs	r1, #0
 800c01a:	e696      	b.n	800bd4a <__ieee754_log+0x2a>
 800c01c:	f3af 8000 	nop.w
 800c020:	fee00000 	.word	0xfee00000
 800c024:	3fe62e42 	.word	0x3fe62e42
 800c028:	35793c76 	.word	0x35793c76
 800c02c:	3dea39ef 	.word	0x3dea39ef
 800c030:	55555555 	.word	0x55555555
 800c034:	3fd55555 	.word	0x3fd55555
 800c038:	df3e5244 	.word	0xdf3e5244
 800c03c:	3fc2f112 	.word	0x3fc2f112
 800c040:	96cb03de 	.word	0x96cb03de
 800c044:	3fc74664 	.word	0x3fc74664
 800c048:	94229359 	.word	0x94229359
 800c04c:	3fd24924 	.word	0x3fd24924
 800c050:	55555593 	.word	0x55555593
 800c054:	3fe55555 	.word	0x3fe55555
 800c058:	d078c69f 	.word	0xd078c69f
 800c05c:	3fc39a09 	.word	0x3fc39a09
 800c060:	1d8e78af 	.word	0x1d8e78af
 800c064:	3fcc71c5 	.word	0x3fcc71c5
 800c068:	9997fa04 	.word	0x9997fa04
 800c06c:	3fd99999 	.word	0x3fd99999
 800c070:	c3500000 	.word	0xc3500000
 800c074:	43500000 	.word	0x43500000
 800c078:	7fefffff 	.word	0x7fefffff
 800c07c:	3ff00000 	.word	0x3ff00000
 800c080:	3fe00000 	.word	0x3fe00000
 800c084:	00000000 	.word	0x00000000

0800c088 <__ieee754_pow>:
 800c088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08c:	b091      	sub	sp, #68	; 0x44
 800c08e:	ed8d 1b00 	vstr	d1, [sp]
 800c092:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c096:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c09a:	ea58 0302 	orrs.w	r3, r8, r2
 800c09e:	ec57 6b10 	vmov	r6, r7, d0
 800c0a2:	f000 84be 	beq.w	800ca22 <__ieee754_pow+0x99a>
 800c0a6:	4b7a      	ldr	r3, [pc, #488]	; (800c290 <__ieee754_pow+0x208>)
 800c0a8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c0ac:	429c      	cmp	r4, r3
 800c0ae:	463d      	mov	r5, r7
 800c0b0:	ee10 aa10 	vmov	sl, s0
 800c0b4:	dc09      	bgt.n	800c0ca <__ieee754_pow+0x42>
 800c0b6:	d103      	bne.n	800c0c0 <__ieee754_pow+0x38>
 800c0b8:	b93e      	cbnz	r6, 800c0ca <__ieee754_pow+0x42>
 800c0ba:	45a0      	cmp	r8, r4
 800c0bc:	dc0d      	bgt.n	800c0da <__ieee754_pow+0x52>
 800c0be:	e001      	b.n	800c0c4 <__ieee754_pow+0x3c>
 800c0c0:	4598      	cmp	r8, r3
 800c0c2:	dc02      	bgt.n	800c0ca <__ieee754_pow+0x42>
 800c0c4:	4598      	cmp	r8, r3
 800c0c6:	d10e      	bne.n	800c0e6 <__ieee754_pow+0x5e>
 800c0c8:	b16a      	cbz	r2, 800c0e6 <__ieee754_pow+0x5e>
 800c0ca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c0ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c0d2:	ea54 030a 	orrs.w	r3, r4, sl
 800c0d6:	f000 84a4 	beq.w	800ca22 <__ieee754_pow+0x99a>
 800c0da:	486e      	ldr	r0, [pc, #440]	; (800c294 <__ieee754_pow+0x20c>)
 800c0dc:	b011      	add	sp, #68	; 0x44
 800c0de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e2:	f001 bfd1 	b.w	800e088 <nan>
 800c0e6:	2d00      	cmp	r5, #0
 800c0e8:	da53      	bge.n	800c192 <__ieee754_pow+0x10a>
 800c0ea:	4b6b      	ldr	r3, [pc, #428]	; (800c298 <__ieee754_pow+0x210>)
 800c0ec:	4598      	cmp	r8, r3
 800c0ee:	dc4d      	bgt.n	800c18c <__ieee754_pow+0x104>
 800c0f0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c0f4:	4598      	cmp	r8, r3
 800c0f6:	dd4c      	ble.n	800c192 <__ieee754_pow+0x10a>
 800c0f8:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c0fc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c100:	2b14      	cmp	r3, #20
 800c102:	dd26      	ble.n	800c152 <__ieee754_pow+0xca>
 800c104:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c108:	fa22 f103 	lsr.w	r1, r2, r3
 800c10c:	fa01 f303 	lsl.w	r3, r1, r3
 800c110:	4293      	cmp	r3, r2
 800c112:	d13e      	bne.n	800c192 <__ieee754_pow+0x10a>
 800c114:	f001 0101 	and.w	r1, r1, #1
 800c118:	f1c1 0b02 	rsb	fp, r1, #2
 800c11c:	2a00      	cmp	r2, #0
 800c11e:	d15b      	bne.n	800c1d8 <__ieee754_pow+0x150>
 800c120:	4b5b      	ldr	r3, [pc, #364]	; (800c290 <__ieee754_pow+0x208>)
 800c122:	4598      	cmp	r8, r3
 800c124:	d124      	bne.n	800c170 <__ieee754_pow+0xe8>
 800c126:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c12a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c12e:	ea53 030a 	orrs.w	r3, r3, sl
 800c132:	f000 8476 	beq.w	800ca22 <__ieee754_pow+0x99a>
 800c136:	4b59      	ldr	r3, [pc, #356]	; (800c29c <__ieee754_pow+0x214>)
 800c138:	429c      	cmp	r4, r3
 800c13a:	dd2d      	ble.n	800c198 <__ieee754_pow+0x110>
 800c13c:	f1b9 0f00 	cmp.w	r9, #0
 800c140:	f280 8473 	bge.w	800ca2a <__ieee754_pow+0x9a2>
 800c144:	2000      	movs	r0, #0
 800c146:	2100      	movs	r1, #0
 800c148:	ec41 0b10 	vmov	d0, r0, r1
 800c14c:	b011      	add	sp, #68	; 0x44
 800c14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c152:	2a00      	cmp	r2, #0
 800c154:	d13e      	bne.n	800c1d4 <__ieee754_pow+0x14c>
 800c156:	f1c3 0314 	rsb	r3, r3, #20
 800c15a:	fa48 f103 	asr.w	r1, r8, r3
 800c15e:	fa01 f303 	lsl.w	r3, r1, r3
 800c162:	4543      	cmp	r3, r8
 800c164:	f040 8469 	bne.w	800ca3a <__ieee754_pow+0x9b2>
 800c168:	f001 0101 	and.w	r1, r1, #1
 800c16c:	f1c1 0b02 	rsb	fp, r1, #2
 800c170:	4b4b      	ldr	r3, [pc, #300]	; (800c2a0 <__ieee754_pow+0x218>)
 800c172:	4598      	cmp	r8, r3
 800c174:	d118      	bne.n	800c1a8 <__ieee754_pow+0x120>
 800c176:	f1b9 0f00 	cmp.w	r9, #0
 800c17a:	f280 845a 	bge.w	800ca32 <__ieee754_pow+0x9aa>
 800c17e:	4948      	ldr	r1, [pc, #288]	; (800c2a0 <__ieee754_pow+0x218>)
 800c180:	4632      	mov	r2, r6
 800c182:	463b      	mov	r3, r7
 800c184:	2000      	movs	r0, #0
 800c186:	f7f4 fb19 	bl	80007bc <__aeabi_ddiv>
 800c18a:	e7dd      	b.n	800c148 <__ieee754_pow+0xc0>
 800c18c:	f04f 0b02 	mov.w	fp, #2
 800c190:	e7c4      	b.n	800c11c <__ieee754_pow+0x94>
 800c192:	f04f 0b00 	mov.w	fp, #0
 800c196:	e7c1      	b.n	800c11c <__ieee754_pow+0x94>
 800c198:	f1b9 0f00 	cmp.w	r9, #0
 800c19c:	dad2      	bge.n	800c144 <__ieee754_pow+0xbc>
 800c19e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c1a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c1a6:	e7cf      	b.n	800c148 <__ieee754_pow+0xc0>
 800c1a8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c1ac:	d106      	bne.n	800c1bc <__ieee754_pow+0x134>
 800c1ae:	4632      	mov	r2, r6
 800c1b0:	463b      	mov	r3, r7
 800c1b2:	4610      	mov	r0, r2
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	f7f4 f9d7 	bl	8000568 <__aeabi_dmul>
 800c1ba:	e7c5      	b.n	800c148 <__ieee754_pow+0xc0>
 800c1bc:	4b39      	ldr	r3, [pc, #228]	; (800c2a4 <__ieee754_pow+0x21c>)
 800c1be:	4599      	cmp	r9, r3
 800c1c0:	d10a      	bne.n	800c1d8 <__ieee754_pow+0x150>
 800c1c2:	2d00      	cmp	r5, #0
 800c1c4:	db08      	blt.n	800c1d8 <__ieee754_pow+0x150>
 800c1c6:	ec47 6b10 	vmov	d0, r6, r7
 800c1ca:	b011      	add	sp, #68	; 0x44
 800c1cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d0:	f000 bf22 	b.w	800d018 <__ieee754_sqrt>
 800c1d4:	f04f 0b00 	mov.w	fp, #0
 800c1d8:	ec47 6b10 	vmov	d0, r6, r7
 800c1dc:	f7fe fe04 	bl	800ade8 <fabs>
 800c1e0:	ec51 0b10 	vmov	r0, r1, d0
 800c1e4:	f1ba 0f00 	cmp.w	sl, #0
 800c1e8:	d127      	bne.n	800c23a <__ieee754_pow+0x1b2>
 800c1ea:	b124      	cbz	r4, 800c1f6 <__ieee754_pow+0x16e>
 800c1ec:	4b2c      	ldr	r3, [pc, #176]	; (800c2a0 <__ieee754_pow+0x218>)
 800c1ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d121      	bne.n	800c23a <__ieee754_pow+0x1b2>
 800c1f6:	f1b9 0f00 	cmp.w	r9, #0
 800c1fa:	da05      	bge.n	800c208 <__ieee754_pow+0x180>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	460b      	mov	r3, r1
 800c200:	2000      	movs	r0, #0
 800c202:	4927      	ldr	r1, [pc, #156]	; (800c2a0 <__ieee754_pow+0x218>)
 800c204:	f7f4 fada 	bl	80007bc <__aeabi_ddiv>
 800c208:	2d00      	cmp	r5, #0
 800c20a:	da9d      	bge.n	800c148 <__ieee754_pow+0xc0>
 800c20c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c210:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c214:	ea54 030b 	orrs.w	r3, r4, fp
 800c218:	d108      	bne.n	800c22c <__ieee754_pow+0x1a4>
 800c21a:	4602      	mov	r2, r0
 800c21c:	460b      	mov	r3, r1
 800c21e:	4610      	mov	r0, r2
 800c220:	4619      	mov	r1, r3
 800c222:	f7f3 ffe9 	bl	80001f8 <__aeabi_dsub>
 800c226:	4602      	mov	r2, r0
 800c228:	460b      	mov	r3, r1
 800c22a:	e7ac      	b.n	800c186 <__ieee754_pow+0xfe>
 800c22c:	f1bb 0f01 	cmp.w	fp, #1
 800c230:	d18a      	bne.n	800c148 <__ieee754_pow+0xc0>
 800c232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c236:	4619      	mov	r1, r3
 800c238:	e786      	b.n	800c148 <__ieee754_pow+0xc0>
 800c23a:	0fed      	lsrs	r5, r5, #31
 800c23c:	1e6b      	subs	r3, r5, #1
 800c23e:	930d      	str	r3, [sp, #52]	; 0x34
 800c240:	ea5b 0303 	orrs.w	r3, fp, r3
 800c244:	d102      	bne.n	800c24c <__ieee754_pow+0x1c4>
 800c246:	4632      	mov	r2, r6
 800c248:	463b      	mov	r3, r7
 800c24a:	e7e8      	b.n	800c21e <__ieee754_pow+0x196>
 800c24c:	4b16      	ldr	r3, [pc, #88]	; (800c2a8 <__ieee754_pow+0x220>)
 800c24e:	4598      	cmp	r8, r3
 800c250:	f340 80fe 	ble.w	800c450 <__ieee754_pow+0x3c8>
 800c254:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c258:	4598      	cmp	r8, r3
 800c25a:	dd0a      	ble.n	800c272 <__ieee754_pow+0x1ea>
 800c25c:	4b0f      	ldr	r3, [pc, #60]	; (800c29c <__ieee754_pow+0x214>)
 800c25e:	429c      	cmp	r4, r3
 800c260:	dc0d      	bgt.n	800c27e <__ieee754_pow+0x1f6>
 800c262:	f1b9 0f00 	cmp.w	r9, #0
 800c266:	f6bf af6d 	bge.w	800c144 <__ieee754_pow+0xbc>
 800c26a:	a307      	add	r3, pc, #28	; (adr r3, 800c288 <__ieee754_pow+0x200>)
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	e79f      	b.n	800c1b2 <__ieee754_pow+0x12a>
 800c272:	4b0e      	ldr	r3, [pc, #56]	; (800c2ac <__ieee754_pow+0x224>)
 800c274:	429c      	cmp	r4, r3
 800c276:	ddf4      	ble.n	800c262 <__ieee754_pow+0x1da>
 800c278:	4b09      	ldr	r3, [pc, #36]	; (800c2a0 <__ieee754_pow+0x218>)
 800c27a:	429c      	cmp	r4, r3
 800c27c:	dd18      	ble.n	800c2b0 <__ieee754_pow+0x228>
 800c27e:	f1b9 0f00 	cmp.w	r9, #0
 800c282:	dcf2      	bgt.n	800c26a <__ieee754_pow+0x1e2>
 800c284:	e75e      	b.n	800c144 <__ieee754_pow+0xbc>
 800c286:	bf00      	nop
 800c288:	8800759c 	.word	0x8800759c
 800c28c:	7e37e43c 	.word	0x7e37e43c
 800c290:	7ff00000 	.word	0x7ff00000
 800c294:	08010db9 	.word	0x08010db9
 800c298:	433fffff 	.word	0x433fffff
 800c29c:	3fefffff 	.word	0x3fefffff
 800c2a0:	3ff00000 	.word	0x3ff00000
 800c2a4:	3fe00000 	.word	0x3fe00000
 800c2a8:	41e00000 	.word	0x41e00000
 800c2ac:	3feffffe 	.word	0x3feffffe
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	4b63      	ldr	r3, [pc, #396]	; (800c440 <__ieee754_pow+0x3b8>)
 800c2b4:	f7f3 ffa0 	bl	80001f8 <__aeabi_dsub>
 800c2b8:	a355      	add	r3, pc, #340	; (adr r3, 800c410 <__ieee754_pow+0x388>)
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	4604      	mov	r4, r0
 800c2c0:	460d      	mov	r5, r1
 800c2c2:	f7f4 f951 	bl	8000568 <__aeabi_dmul>
 800c2c6:	a354      	add	r3, pc, #336	; (adr r3, 800c418 <__ieee754_pow+0x390>)
 800c2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2cc:	4606      	mov	r6, r0
 800c2ce:	460f      	mov	r7, r1
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	f7f4 f948 	bl	8000568 <__aeabi_dmul>
 800c2d8:	2200      	movs	r2, #0
 800c2da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2de:	4b59      	ldr	r3, [pc, #356]	; (800c444 <__ieee754_pow+0x3bc>)
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	f7f4 f940 	bl	8000568 <__aeabi_dmul>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	a14c      	add	r1, pc, #304	; (adr r1, 800c420 <__ieee754_pow+0x398>)
 800c2ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2f2:	f7f3 ff81 	bl	80001f8 <__aeabi_dsub>
 800c2f6:	4622      	mov	r2, r4
 800c2f8:	462b      	mov	r3, r5
 800c2fa:	f7f4 f935 	bl	8000568 <__aeabi_dmul>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	2000      	movs	r0, #0
 800c304:	4950      	ldr	r1, [pc, #320]	; (800c448 <__ieee754_pow+0x3c0>)
 800c306:	f7f3 ff77 	bl	80001f8 <__aeabi_dsub>
 800c30a:	4622      	mov	r2, r4
 800c30c:	462b      	mov	r3, r5
 800c30e:	4680      	mov	r8, r0
 800c310:	4689      	mov	r9, r1
 800c312:	4620      	mov	r0, r4
 800c314:	4629      	mov	r1, r5
 800c316:	f7f4 f927 	bl	8000568 <__aeabi_dmul>
 800c31a:	4602      	mov	r2, r0
 800c31c:	460b      	mov	r3, r1
 800c31e:	4640      	mov	r0, r8
 800c320:	4649      	mov	r1, r9
 800c322:	f7f4 f921 	bl	8000568 <__aeabi_dmul>
 800c326:	a340      	add	r3, pc, #256	; (adr r3, 800c428 <__ieee754_pow+0x3a0>)
 800c328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32c:	f7f4 f91c 	bl	8000568 <__aeabi_dmul>
 800c330:	4602      	mov	r2, r0
 800c332:	460b      	mov	r3, r1
 800c334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c338:	f7f3 ff5e 	bl	80001f8 <__aeabi_dsub>
 800c33c:	4602      	mov	r2, r0
 800c33e:	460b      	mov	r3, r1
 800c340:	4604      	mov	r4, r0
 800c342:	460d      	mov	r5, r1
 800c344:	4630      	mov	r0, r6
 800c346:	4639      	mov	r1, r7
 800c348:	f7f3 ff58 	bl	80001fc <__adddf3>
 800c34c:	2000      	movs	r0, #0
 800c34e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c352:	4632      	mov	r2, r6
 800c354:	463b      	mov	r3, r7
 800c356:	f7f3 ff4f 	bl	80001f8 <__aeabi_dsub>
 800c35a:	4602      	mov	r2, r0
 800c35c:	460b      	mov	r3, r1
 800c35e:	4620      	mov	r0, r4
 800c360:	4629      	mov	r1, r5
 800c362:	f7f3 ff49 	bl	80001f8 <__aeabi_dsub>
 800c366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c368:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c36c:	4313      	orrs	r3, r2
 800c36e:	4606      	mov	r6, r0
 800c370:	460f      	mov	r7, r1
 800c372:	f040 81eb 	bne.w	800c74c <__ieee754_pow+0x6c4>
 800c376:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800c430 <__ieee754_pow+0x3a8>
 800c37a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800c37e:	2400      	movs	r4, #0
 800c380:	4622      	mov	r2, r4
 800c382:	462b      	mov	r3, r5
 800c384:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c388:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c38c:	f7f3 ff34 	bl	80001f8 <__aeabi_dsub>
 800c390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c394:	f7f4 f8e8 	bl	8000568 <__aeabi_dmul>
 800c398:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c39c:	4680      	mov	r8, r0
 800c39e:	4689      	mov	r9, r1
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	4639      	mov	r1, r7
 800c3a4:	f7f4 f8e0 	bl	8000568 <__aeabi_dmul>
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	4640      	mov	r0, r8
 800c3ae:	4649      	mov	r1, r9
 800c3b0:	f7f3 ff24 	bl	80001fc <__adddf3>
 800c3b4:	4622      	mov	r2, r4
 800c3b6:	462b      	mov	r3, r5
 800c3b8:	4680      	mov	r8, r0
 800c3ba:	4689      	mov	r9, r1
 800c3bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3c0:	f7f4 f8d2 	bl	8000568 <__aeabi_dmul>
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	460d      	mov	r5, r1
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	4649      	mov	r1, r9
 800c3ce:	4640      	mov	r0, r8
 800c3d0:	e9cd 4500 	strd	r4, r5, [sp]
 800c3d4:	f7f3 ff12 	bl	80001fc <__adddf3>
 800c3d8:	4b1c      	ldr	r3, [pc, #112]	; (800c44c <__ieee754_pow+0x3c4>)
 800c3da:	4299      	cmp	r1, r3
 800c3dc:	4606      	mov	r6, r0
 800c3de:	460f      	mov	r7, r1
 800c3e0:	468b      	mov	fp, r1
 800c3e2:	f340 82f7 	ble.w	800c9d4 <__ieee754_pow+0x94c>
 800c3e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c3ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c3ee:	4303      	orrs	r3, r0
 800c3f0:	f000 81ea 	beq.w	800c7c8 <__ieee754_pow+0x740>
 800c3f4:	a310      	add	r3, pc, #64	; (adr r3, 800c438 <__ieee754_pow+0x3b0>)
 800c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3fe:	f7f4 f8b3 	bl	8000568 <__aeabi_dmul>
 800c402:	a30d      	add	r3, pc, #52	; (adr r3, 800c438 <__ieee754_pow+0x3b0>)
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	e6d5      	b.n	800c1b6 <__ieee754_pow+0x12e>
 800c40a:	bf00      	nop
 800c40c:	f3af 8000 	nop.w
 800c410:	60000000 	.word	0x60000000
 800c414:	3ff71547 	.word	0x3ff71547
 800c418:	f85ddf44 	.word	0xf85ddf44
 800c41c:	3e54ae0b 	.word	0x3e54ae0b
 800c420:	55555555 	.word	0x55555555
 800c424:	3fd55555 	.word	0x3fd55555
 800c428:	652b82fe 	.word	0x652b82fe
 800c42c:	3ff71547 	.word	0x3ff71547
 800c430:	00000000 	.word	0x00000000
 800c434:	bff00000 	.word	0xbff00000
 800c438:	8800759c 	.word	0x8800759c
 800c43c:	7e37e43c 	.word	0x7e37e43c
 800c440:	3ff00000 	.word	0x3ff00000
 800c444:	3fd00000 	.word	0x3fd00000
 800c448:	3fe00000 	.word	0x3fe00000
 800c44c:	408fffff 	.word	0x408fffff
 800c450:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c454:	f04f 0200 	mov.w	r2, #0
 800c458:	da05      	bge.n	800c466 <__ieee754_pow+0x3de>
 800c45a:	4bd3      	ldr	r3, [pc, #844]	; (800c7a8 <__ieee754_pow+0x720>)
 800c45c:	f7f4 f884 	bl	8000568 <__aeabi_dmul>
 800c460:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c464:	460c      	mov	r4, r1
 800c466:	1523      	asrs	r3, r4, #20
 800c468:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c46c:	4413      	add	r3, r2
 800c46e:	9309      	str	r3, [sp, #36]	; 0x24
 800c470:	4bce      	ldr	r3, [pc, #824]	; (800c7ac <__ieee754_pow+0x724>)
 800c472:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c476:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c47a:	429c      	cmp	r4, r3
 800c47c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c480:	dd08      	ble.n	800c494 <__ieee754_pow+0x40c>
 800c482:	4bcb      	ldr	r3, [pc, #812]	; (800c7b0 <__ieee754_pow+0x728>)
 800c484:	429c      	cmp	r4, r3
 800c486:	f340 815e 	ble.w	800c746 <__ieee754_pow+0x6be>
 800c48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c48c:	3301      	adds	r3, #1
 800c48e:	9309      	str	r3, [sp, #36]	; 0x24
 800c490:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c494:	f04f 0a00 	mov.w	sl, #0
 800c498:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c49c:	930c      	str	r3, [sp, #48]	; 0x30
 800c49e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4a0:	4bc4      	ldr	r3, [pc, #784]	; (800c7b4 <__ieee754_pow+0x72c>)
 800c4a2:	4413      	add	r3, r2
 800c4a4:	ed93 7b00 	vldr	d7, [r3]
 800c4a8:	4629      	mov	r1, r5
 800c4aa:	ec53 2b17 	vmov	r2, r3, d7
 800c4ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c4b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c4b6:	f7f3 fe9f 	bl	80001f8 <__aeabi_dsub>
 800c4ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c4be:	4606      	mov	r6, r0
 800c4c0:	460f      	mov	r7, r1
 800c4c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4c6:	f7f3 fe99 	bl	80001fc <__adddf3>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	49b9      	ldr	r1, [pc, #740]	; (800c7b8 <__ieee754_pow+0x730>)
 800c4d2:	f7f4 f973 	bl	80007bc <__aeabi_ddiv>
 800c4d6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c4da:	4602      	mov	r2, r0
 800c4dc:	460b      	mov	r3, r1
 800c4de:	4630      	mov	r0, r6
 800c4e0:	4639      	mov	r1, r7
 800c4e2:	f7f4 f841 	bl	8000568 <__aeabi_dmul>
 800c4e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4ea:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c4ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	9302      	str	r3, [sp, #8]
 800c4f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c4fa:	106d      	asrs	r5, r5, #1
 800c4fc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c500:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c504:	2200      	movs	r2, #0
 800c506:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c50a:	4640      	mov	r0, r8
 800c50c:	4649      	mov	r1, r9
 800c50e:	4614      	mov	r4, r2
 800c510:	461d      	mov	r5, r3
 800c512:	f7f4 f829 	bl	8000568 <__aeabi_dmul>
 800c516:	4602      	mov	r2, r0
 800c518:	460b      	mov	r3, r1
 800c51a:	4630      	mov	r0, r6
 800c51c:	4639      	mov	r1, r7
 800c51e:	f7f3 fe6b 	bl	80001f8 <__aeabi_dsub>
 800c522:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c526:	4606      	mov	r6, r0
 800c528:	460f      	mov	r7, r1
 800c52a:	4620      	mov	r0, r4
 800c52c:	4629      	mov	r1, r5
 800c52e:	f7f3 fe63 	bl	80001f8 <__aeabi_dsub>
 800c532:	4602      	mov	r2, r0
 800c534:	460b      	mov	r3, r1
 800c536:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c53a:	f7f3 fe5d 	bl	80001f8 <__aeabi_dsub>
 800c53e:	4642      	mov	r2, r8
 800c540:	464b      	mov	r3, r9
 800c542:	f7f4 f811 	bl	8000568 <__aeabi_dmul>
 800c546:	4602      	mov	r2, r0
 800c548:	460b      	mov	r3, r1
 800c54a:	4630      	mov	r0, r6
 800c54c:	4639      	mov	r1, r7
 800c54e:	f7f3 fe53 	bl	80001f8 <__aeabi_dsub>
 800c552:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c556:	f7f4 f807 	bl	8000568 <__aeabi_dmul>
 800c55a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c55e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c562:	4610      	mov	r0, r2
 800c564:	4619      	mov	r1, r3
 800c566:	f7f3 ffff 	bl	8000568 <__aeabi_dmul>
 800c56a:	a37b      	add	r3, pc, #492	; (adr r3, 800c758 <__ieee754_pow+0x6d0>)
 800c56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c570:	4604      	mov	r4, r0
 800c572:	460d      	mov	r5, r1
 800c574:	f7f3 fff8 	bl	8000568 <__aeabi_dmul>
 800c578:	a379      	add	r3, pc, #484	; (adr r3, 800c760 <__ieee754_pow+0x6d8>)
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	f7f3 fe3d 	bl	80001fc <__adddf3>
 800c582:	4622      	mov	r2, r4
 800c584:	462b      	mov	r3, r5
 800c586:	f7f3 ffef 	bl	8000568 <__aeabi_dmul>
 800c58a:	a377      	add	r3, pc, #476	; (adr r3, 800c768 <__ieee754_pow+0x6e0>)
 800c58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c590:	f7f3 fe34 	bl	80001fc <__adddf3>
 800c594:	4622      	mov	r2, r4
 800c596:	462b      	mov	r3, r5
 800c598:	f7f3 ffe6 	bl	8000568 <__aeabi_dmul>
 800c59c:	a374      	add	r3, pc, #464	; (adr r3, 800c770 <__ieee754_pow+0x6e8>)
 800c59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a2:	f7f3 fe2b 	bl	80001fc <__adddf3>
 800c5a6:	4622      	mov	r2, r4
 800c5a8:	462b      	mov	r3, r5
 800c5aa:	f7f3 ffdd 	bl	8000568 <__aeabi_dmul>
 800c5ae:	a372      	add	r3, pc, #456	; (adr r3, 800c778 <__ieee754_pow+0x6f0>)
 800c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b4:	f7f3 fe22 	bl	80001fc <__adddf3>
 800c5b8:	4622      	mov	r2, r4
 800c5ba:	462b      	mov	r3, r5
 800c5bc:	f7f3 ffd4 	bl	8000568 <__aeabi_dmul>
 800c5c0:	a36f      	add	r3, pc, #444	; (adr r3, 800c780 <__ieee754_pow+0x6f8>)
 800c5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c6:	f7f3 fe19 	bl	80001fc <__adddf3>
 800c5ca:	4622      	mov	r2, r4
 800c5cc:	4606      	mov	r6, r0
 800c5ce:	460f      	mov	r7, r1
 800c5d0:	462b      	mov	r3, r5
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	4629      	mov	r1, r5
 800c5d6:	f7f3 ffc7 	bl	8000568 <__aeabi_dmul>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	460b      	mov	r3, r1
 800c5de:	4630      	mov	r0, r6
 800c5e0:	4639      	mov	r1, r7
 800c5e2:	f7f3 ffc1 	bl	8000568 <__aeabi_dmul>
 800c5e6:	4642      	mov	r2, r8
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	460d      	mov	r5, r1
 800c5ec:	464b      	mov	r3, r9
 800c5ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5f2:	f7f3 fe03 	bl	80001fc <__adddf3>
 800c5f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5fa:	f7f3 ffb5 	bl	8000568 <__aeabi_dmul>
 800c5fe:	4622      	mov	r2, r4
 800c600:	462b      	mov	r3, r5
 800c602:	f7f3 fdfb 	bl	80001fc <__adddf3>
 800c606:	4642      	mov	r2, r8
 800c608:	4606      	mov	r6, r0
 800c60a:	460f      	mov	r7, r1
 800c60c:	464b      	mov	r3, r9
 800c60e:	4640      	mov	r0, r8
 800c610:	4649      	mov	r1, r9
 800c612:	f7f3 ffa9 	bl	8000568 <__aeabi_dmul>
 800c616:	2200      	movs	r2, #0
 800c618:	4b68      	ldr	r3, [pc, #416]	; (800c7bc <__ieee754_pow+0x734>)
 800c61a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c61e:	f7f3 fded 	bl	80001fc <__adddf3>
 800c622:	4632      	mov	r2, r6
 800c624:	463b      	mov	r3, r7
 800c626:	f7f3 fde9 	bl	80001fc <__adddf3>
 800c62a:	9802      	ldr	r0, [sp, #8]
 800c62c:	460d      	mov	r5, r1
 800c62e:	4604      	mov	r4, r0
 800c630:	4602      	mov	r2, r0
 800c632:	460b      	mov	r3, r1
 800c634:	4640      	mov	r0, r8
 800c636:	4649      	mov	r1, r9
 800c638:	f7f3 ff96 	bl	8000568 <__aeabi_dmul>
 800c63c:	2200      	movs	r2, #0
 800c63e:	4680      	mov	r8, r0
 800c640:	4689      	mov	r9, r1
 800c642:	4b5e      	ldr	r3, [pc, #376]	; (800c7bc <__ieee754_pow+0x734>)
 800c644:	4620      	mov	r0, r4
 800c646:	4629      	mov	r1, r5
 800c648:	f7f3 fdd6 	bl	80001f8 <__aeabi_dsub>
 800c64c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c650:	f7f3 fdd2 	bl	80001f8 <__aeabi_dsub>
 800c654:	4602      	mov	r2, r0
 800c656:	460b      	mov	r3, r1
 800c658:	4630      	mov	r0, r6
 800c65a:	4639      	mov	r1, r7
 800c65c:	f7f3 fdcc 	bl	80001f8 <__aeabi_dsub>
 800c660:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c664:	f7f3 ff80 	bl	8000568 <__aeabi_dmul>
 800c668:	4622      	mov	r2, r4
 800c66a:	4606      	mov	r6, r0
 800c66c:	460f      	mov	r7, r1
 800c66e:	462b      	mov	r3, r5
 800c670:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c674:	f7f3 ff78 	bl	8000568 <__aeabi_dmul>
 800c678:	4602      	mov	r2, r0
 800c67a:	460b      	mov	r3, r1
 800c67c:	4630      	mov	r0, r6
 800c67e:	4639      	mov	r1, r7
 800c680:	f7f3 fdbc 	bl	80001fc <__adddf3>
 800c684:	4606      	mov	r6, r0
 800c686:	460f      	mov	r7, r1
 800c688:	4602      	mov	r2, r0
 800c68a:	460b      	mov	r3, r1
 800c68c:	4640      	mov	r0, r8
 800c68e:	4649      	mov	r1, r9
 800c690:	f7f3 fdb4 	bl	80001fc <__adddf3>
 800c694:	9802      	ldr	r0, [sp, #8]
 800c696:	a33c      	add	r3, pc, #240	; (adr r3, 800c788 <__ieee754_pow+0x700>)
 800c698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69c:	4604      	mov	r4, r0
 800c69e:	460d      	mov	r5, r1
 800c6a0:	f7f3 ff62 	bl	8000568 <__aeabi_dmul>
 800c6a4:	4642      	mov	r2, r8
 800c6a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c6aa:	464b      	mov	r3, r9
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	f7f3 fda2 	bl	80001f8 <__aeabi_dsub>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	4639      	mov	r1, r7
 800c6bc:	f7f3 fd9c 	bl	80001f8 <__aeabi_dsub>
 800c6c0:	a333      	add	r3, pc, #204	; (adr r3, 800c790 <__ieee754_pow+0x708>)
 800c6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c6:	f7f3 ff4f 	bl	8000568 <__aeabi_dmul>
 800c6ca:	a333      	add	r3, pc, #204	; (adr r3, 800c798 <__ieee754_pow+0x710>)
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	4606      	mov	r6, r0
 800c6d2:	460f      	mov	r7, r1
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	f7f3 ff46 	bl	8000568 <__aeabi_dmul>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	460b      	mov	r3, r1
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	4639      	mov	r1, r7
 800c6e4:	f7f3 fd8a 	bl	80001fc <__adddf3>
 800c6e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6ea:	4b35      	ldr	r3, [pc, #212]	; (800c7c0 <__ieee754_pow+0x738>)
 800c6ec:	4413      	add	r3, r2
 800c6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f2:	f7f3 fd83 	bl	80001fc <__adddf3>
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6fa:	460d      	mov	r5, r1
 800c6fc:	f7f3 feca 	bl	8000494 <__aeabi_i2d>
 800c700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c702:	4b30      	ldr	r3, [pc, #192]	; (800c7c4 <__ieee754_pow+0x73c>)
 800c704:	4413      	add	r3, r2
 800c706:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c70a:	4606      	mov	r6, r0
 800c70c:	460f      	mov	r7, r1
 800c70e:	4622      	mov	r2, r4
 800c710:	462b      	mov	r3, r5
 800c712:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c716:	f7f3 fd71 	bl	80001fc <__adddf3>
 800c71a:	4642      	mov	r2, r8
 800c71c:	464b      	mov	r3, r9
 800c71e:	f7f3 fd6d 	bl	80001fc <__adddf3>
 800c722:	4632      	mov	r2, r6
 800c724:	463b      	mov	r3, r7
 800c726:	f7f3 fd69 	bl	80001fc <__adddf3>
 800c72a:	9802      	ldr	r0, [sp, #8]
 800c72c:	4632      	mov	r2, r6
 800c72e:	463b      	mov	r3, r7
 800c730:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c734:	f7f3 fd60 	bl	80001f8 <__aeabi_dsub>
 800c738:	4642      	mov	r2, r8
 800c73a:	464b      	mov	r3, r9
 800c73c:	f7f3 fd5c 	bl	80001f8 <__aeabi_dsub>
 800c740:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c744:	e607      	b.n	800c356 <__ieee754_pow+0x2ce>
 800c746:	f04f 0a01 	mov.w	sl, #1
 800c74a:	e6a5      	b.n	800c498 <__ieee754_pow+0x410>
 800c74c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c7a0 <__ieee754_pow+0x718>
 800c750:	e613      	b.n	800c37a <__ieee754_pow+0x2f2>
 800c752:	bf00      	nop
 800c754:	f3af 8000 	nop.w
 800c758:	4a454eef 	.word	0x4a454eef
 800c75c:	3fca7e28 	.word	0x3fca7e28
 800c760:	93c9db65 	.word	0x93c9db65
 800c764:	3fcd864a 	.word	0x3fcd864a
 800c768:	a91d4101 	.word	0xa91d4101
 800c76c:	3fd17460 	.word	0x3fd17460
 800c770:	518f264d 	.word	0x518f264d
 800c774:	3fd55555 	.word	0x3fd55555
 800c778:	db6fabff 	.word	0xdb6fabff
 800c77c:	3fdb6db6 	.word	0x3fdb6db6
 800c780:	33333303 	.word	0x33333303
 800c784:	3fe33333 	.word	0x3fe33333
 800c788:	e0000000 	.word	0xe0000000
 800c78c:	3feec709 	.word	0x3feec709
 800c790:	dc3a03fd 	.word	0xdc3a03fd
 800c794:	3feec709 	.word	0x3feec709
 800c798:	145b01f5 	.word	0x145b01f5
 800c79c:	be3e2fe0 	.word	0xbe3e2fe0
 800c7a0:	00000000 	.word	0x00000000
 800c7a4:	3ff00000 	.word	0x3ff00000
 800c7a8:	43400000 	.word	0x43400000
 800c7ac:	0003988e 	.word	0x0003988e
 800c7b0:	000bb679 	.word	0x000bb679
 800c7b4:	08010df0 	.word	0x08010df0
 800c7b8:	3ff00000 	.word	0x3ff00000
 800c7bc:	40080000 	.word	0x40080000
 800c7c0:	08010e10 	.word	0x08010e10
 800c7c4:	08010e00 	.word	0x08010e00
 800c7c8:	a3b4      	add	r3, pc, #720	; (adr r3, 800ca9c <__ieee754_pow+0xa14>)
 800c7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ce:	4640      	mov	r0, r8
 800c7d0:	4649      	mov	r1, r9
 800c7d2:	f7f3 fd13 	bl	80001fc <__adddf3>
 800c7d6:	4622      	mov	r2, r4
 800c7d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c7dc:	462b      	mov	r3, r5
 800c7de:	4630      	mov	r0, r6
 800c7e0:	4639      	mov	r1, r7
 800c7e2:	f7f3 fd09 	bl	80001f8 <__aeabi_dsub>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7ee:	f7f4 f94b 	bl	8000a88 <__aeabi_dcmpgt>
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	f47f adfe 	bne.w	800c3f4 <__ieee754_pow+0x36c>
 800c7f8:	4aa3      	ldr	r2, [pc, #652]	; (800ca88 <__ieee754_pow+0xa00>)
 800c7fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c7fe:	4293      	cmp	r3, r2
 800c800:	f340 810a 	ble.w	800ca18 <__ieee754_pow+0x990>
 800c804:	151b      	asrs	r3, r3, #20
 800c806:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c80a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c80e:	fa4a f303 	asr.w	r3, sl, r3
 800c812:	445b      	add	r3, fp
 800c814:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c818:	4e9c      	ldr	r6, [pc, #624]	; (800ca8c <__ieee754_pow+0xa04>)
 800c81a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c81e:	4116      	asrs	r6, r2
 800c820:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c824:	2000      	movs	r0, #0
 800c826:	ea23 0106 	bic.w	r1, r3, r6
 800c82a:	f1c2 0214 	rsb	r2, r2, #20
 800c82e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c832:	fa4a fa02 	asr.w	sl, sl, r2
 800c836:	f1bb 0f00 	cmp.w	fp, #0
 800c83a:	4602      	mov	r2, r0
 800c83c:	460b      	mov	r3, r1
 800c83e:	4620      	mov	r0, r4
 800c840:	4629      	mov	r1, r5
 800c842:	bfb8      	it	lt
 800c844:	f1ca 0a00 	rsblt	sl, sl, #0
 800c848:	f7f3 fcd6 	bl	80001f8 <__aeabi_dsub>
 800c84c:	e9cd 0100 	strd	r0, r1, [sp]
 800c850:	4642      	mov	r2, r8
 800c852:	464b      	mov	r3, r9
 800c854:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c858:	f7f3 fcd0 	bl	80001fc <__adddf3>
 800c85c:	2000      	movs	r0, #0
 800c85e:	a378      	add	r3, pc, #480	; (adr r3, 800ca40 <__ieee754_pow+0x9b8>)
 800c860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c864:	4604      	mov	r4, r0
 800c866:	460d      	mov	r5, r1
 800c868:	f7f3 fe7e 	bl	8000568 <__aeabi_dmul>
 800c86c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c870:	4606      	mov	r6, r0
 800c872:	460f      	mov	r7, r1
 800c874:	4620      	mov	r0, r4
 800c876:	4629      	mov	r1, r5
 800c878:	f7f3 fcbe 	bl	80001f8 <__aeabi_dsub>
 800c87c:	4602      	mov	r2, r0
 800c87e:	460b      	mov	r3, r1
 800c880:	4640      	mov	r0, r8
 800c882:	4649      	mov	r1, r9
 800c884:	f7f3 fcb8 	bl	80001f8 <__aeabi_dsub>
 800c888:	a36f      	add	r3, pc, #444	; (adr r3, 800ca48 <__ieee754_pow+0x9c0>)
 800c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88e:	f7f3 fe6b 	bl	8000568 <__aeabi_dmul>
 800c892:	a36f      	add	r3, pc, #444	; (adr r3, 800ca50 <__ieee754_pow+0x9c8>)
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	4680      	mov	r8, r0
 800c89a:	4689      	mov	r9, r1
 800c89c:	4620      	mov	r0, r4
 800c89e:	4629      	mov	r1, r5
 800c8a0:	f7f3 fe62 	bl	8000568 <__aeabi_dmul>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	4640      	mov	r0, r8
 800c8aa:	4649      	mov	r1, r9
 800c8ac:	f7f3 fca6 	bl	80001fc <__adddf3>
 800c8b0:	4604      	mov	r4, r0
 800c8b2:	460d      	mov	r5, r1
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	4630      	mov	r0, r6
 800c8ba:	4639      	mov	r1, r7
 800c8bc:	f7f3 fc9e 	bl	80001fc <__adddf3>
 800c8c0:	4632      	mov	r2, r6
 800c8c2:	463b      	mov	r3, r7
 800c8c4:	4680      	mov	r8, r0
 800c8c6:	4689      	mov	r9, r1
 800c8c8:	f7f3 fc96 	bl	80001f8 <__aeabi_dsub>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	4629      	mov	r1, r5
 800c8d4:	f7f3 fc90 	bl	80001f8 <__aeabi_dsub>
 800c8d8:	4642      	mov	r2, r8
 800c8da:	4606      	mov	r6, r0
 800c8dc:	460f      	mov	r7, r1
 800c8de:	464b      	mov	r3, r9
 800c8e0:	4640      	mov	r0, r8
 800c8e2:	4649      	mov	r1, r9
 800c8e4:	f7f3 fe40 	bl	8000568 <__aeabi_dmul>
 800c8e8:	a35b      	add	r3, pc, #364	; (adr r3, 800ca58 <__ieee754_pow+0x9d0>)
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	460d      	mov	r5, r1
 800c8f2:	f7f3 fe39 	bl	8000568 <__aeabi_dmul>
 800c8f6:	a35a      	add	r3, pc, #360	; (adr r3, 800ca60 <__ieee754_pow+0x9d8>)
 800c8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fc:	f7f3 fc7c 	bl	80001f8 <__aeabi_dsub>
 800c900:	4622      	mov	r2, r4
 800c902:	462b      	mov	r3, r5
 800c904:	f7f3 fe30 	bl	8000568 <__aeabi_dmul>
 800c908:	a357      	add	r3, pc, #348	; (adr r3, 800ca68 <__ieee754_pow+0x9e0>)
 800c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90e:	f7f3 fc75 	bl	80001fc <__adddf3>
 800c912:	4622      	mov	r2, r4
 800c914:	462b      	mov	r3, r5
 800c916:	f7f3 fe27 	bl	8000568 <__aeabi_dmul>
 800c91a:	a355      	add	r3, pc, #340	; (adr r3, 800ca70 <__ieee754_pow+0x9e8>)
 800c91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c920:	f7f3 fc6a 	bl	80001f8 <__aeabi_dsub>
 800c924:	4622      	mov	r2, r4
 800c926:	462b      	mov	r3, r5
 800c928:	f7f3 fe1e 	bl	8000568 <__aeabi_dmul>
 800c92c:	a352      	add	r3, pc, #328	; (adr r3, 800ca78 <__ieee754_pow+0x9f0>)
 800c92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c932:	f7f3 fc63 	bl	80001fc <__adddf3>
 800c936:	4622      	mov	r2, r4
 800c938:	462b      	mov	r3, r5
 800c93a:	f7f3 fe15 	bl	8000568 <__aeabi_dmul>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	4640      	mov	r0, r8
 800c944:	4649      	mov	r1, r9
 800c946:	f7f3 fc57 	bl	80001f8 <__aeabi_dsub>
 800c94a:	4604      	mov	r4, r0
 800c94c:	460d      	mov	r5, r1
 800c94e:	4602      	mov	r2, r0
 800c950:	460b      	mov	r3, r1
 800c952:	4640      	mov	r0, r8
 800c954:	4649      	mov	r1, r9
 800c956:	f7f3 fe07 	bl	8000568 <__aeabi_dmul>
 800c95a:	2200      	movs	r2, #0
 800c95c:	e9cd 0100 	strd	r0, r1, [sp]
 800c960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c964:	4620      	mov	r0, r4
 800c966:	4629      	mov	r1, r5
 800c968:	f7f3 fc46 	bl	80001f8 <__aeabi_dsub>
 800c96c:	4602      	mov	r2, r0
 800c96e:	460b      	mov	r3, r1
 800c970:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c974:	f7f3 ff22 	bl	80007bc <__aeabi_ddiv>
 800c978:	4632      	mov	r2, r6
 800c97a:	4604      	mov	r4, r0
 800c97c:	460d      	mov	r5, r1
 800c97e:	463b      	mov	r3, r7
 800c980:	4640      	mov	r0, r8
 800c982:	4649      	mov	r1, r9
 800c984:	f7f3 fdf0 	bl	8000568 <__aeabi_dmul>
 800c988:	4632      	mov	r2, r6
 800c98a:	463b      	mov	r3, r7
 800c98c:	f7f3 fc36 	bl	80001fc <__adddf3>
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	4620      	mov	r0, r4
 800c996:	4629      	mov	r1, r5
 800c998:	f7f3 fc2e 	bl	80001f8 <__aeabi_dsub>
 800c99c:	4642      	mov	r2, r8
 800c99e:	464b      	mov	r3, r9
 800c9a0:	f7f3 fc2a 	bl	80001f8 <__aeabi_dsub>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	4939      	ldr	r1, [pc, #228]	; (800ca90 <__ieee754_pow+0xa08>)
 800c9ac:	f7f3 fc24 	bl	80001f8 <__aeabi_dsub>
 800c9b0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c9b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	da2f      	bge.n	800ca1e <__ieee754_pow+0x996>
 800c9be:	4650      	mov	r0, sl
 800c9c0:	ec43 2b10 	vmov	d0, r2, r3
 800c9c4:	f001 fbec 	bl	800e1a0 <scalbn>
 800c9c8:	ec51 0b10 	vmov	r0, r1, d0
 800c9cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9d0:	f7ff bbf1 	b.w	800c1b6 <__ieee754_pow+0x12e>
 800c9d4:	4b2f      	ldr	r3, [pc, #188]	; (800ca94 <__ieee754_pow+0xa0c>)
 800c9d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c9da:	429e      	cmp	r6, r3
 800c9dc:	f77f af0c 	ble.w	800c7f8 <__ieee754_pow+0x770>
 800c9e0:	4b2d      	ldr	r3, [pc, #180]	; (800ca98 <__ieee754_pow+0xa10>)
 800c9e2:	440b      	add	r3, r1
 800c9e4:	4303      	orrs	r3, r0
 800c9e6:	d00b      	beq.n	800ca00 <__ieee754_pow+0x978>
 800c9e8:	a325      	add	r3, pc, #148	; (adr r3, 800ca80 <__ieee754_pow+0x9f8>)
 800c9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9f2:	f7f3 fdb9 	bl	8000568 <__aeabi_dmul>
 800c9f6:	a322      	add	r3, pc, #136	; (adr r3, 800ca80 <__ieee754_pow+0x9f8>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	f7ff bbdb 	b.w	800c1b6 <__ieee754_pow+0x12e>
 800ca00:	4622      	mov	r2, r4
 800ca02:	462b      	mov	r3, r5
 800ca04:	f7f3 fbf8 	bl	80001f8 <__aeabi_dsub>
 800ca08:	4642      	mov	r2, r8
 800ca0a:	464b      	mov	r3, r9
 800ca0c:	f7f4 f832 	bl	8000a74 <__aeabi_dcmpge>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	f43f aef1 	beq.w	800c7f8 <__ieee754_pow+0x770>
 800ca16:	e7e7      	b.n	800c9e8 <__ieee754_pow+0x960>
 800ca18:	f04f 0a00 	mov.w	sl, #0
 800ca1c:	e718      	b.n	800c850 <__ieee754_pow+0x7c8>
 800ca1e:	4621      	mov	r1, r4
 800ca20:	e7d4      	b.n	800c9cc <__ieee754_pow+0x944>
 800ca22:	2000      	movs	r0, #0
 800ca24:	491a      	ldr	r1, [pc, #104]	; (800ca90 <__ieee754_pow+0xa08>)
 800ca26:	f7ff bb8f 	b.w	800c148 <__ieee754_pow+0xc0>
 800ca2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca2e:	f7ff bb8b 	b.w	800c148 <__ieee754_pow+0xc0>
 800ca32:	4630      	mov	r0, r6
 800ca34:	4639      	mov	r1, r7
 800ca36:	f7ff bb87 	b.w	800c148 <__ieee754_pow+0xc0>
 800ca3a:	4693      	mov	fp, r2
 800ca3c:	f7ff bb98 	b.w	800c170 <__ieee754_pow+0xe8>
 800ca40:	00000000 	.word	0x00000000
 800ca44:	3fe62e43 	.word	0x3fe62e43
 800ca48:	fefa39ef 	.word	0xfefa39ef
 800ca4c:	3fe62e42 	.word	0x3fe62e42
 800ca50:	0ca86c39 	.word	0x0ca86c39
 800ca54:	be205c61 	.word	0xbe205c61
 800ca58:	72bea4d0 	.word	0x72bea4d0
 800ca5c:	3e663769 	.word	0x3e663769
 800ca60:	c5d26bf1 	.word	0xc5d26bf1
 800ca64:	3ebbbd41 	.word	0x3ebbbd41
 800ca68:	af25de2c 	.word	0xaf25de2c
 800ca6c:	3f11566a 	.word	0x3f11566a
 800ca70:	16bebd93 	.word	0x16bebd93
 800ca74:	3f66c16c 	.word	0x3f66c16c
 800ca78:	5555553e 	.word	0x5555553e
 800ca7c:	3fc55555 	.word	0x3fc55555
 800ca80:	c2f8f359 	.word	0xc2f8f359
 800ca84:	01a56e1f 	.word	0x01a56e1f
 800ca88:	3fe00000 	.word	0x3fe00000
 800ca8c:	000fffff 	.word	0x000fffff
 800ca90:	3ff00000 	.word	0x3ff00000
 800ca94:	4090cbff 	.word	0x4090cbff
 800ca98:	3f6f3400 	.word	0x3f6f3400
 800ca9c:	652b82fe 	.word	0x652b82fe
 800caa0:	3c971547 	.word	0x3c971547
 800caa4:	00000000 	.word	0x00000000

0800caa8 <__ieee754_rem_pio2>:
 800caa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caac:	ec57 6b10 	vmov	r6, r7, d0
 800cab0:	4bc3      	ldr	r3, [pc, #780]	; (800cdc0 <__ieee754_rem_pio2+0x318>)
 800cab2:	b08d      	sub	sp, #52	; 0x34
 800cab4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cab8:	4598      	cmp	r8, r3
 800caba:	4604      	mov	r4, r0
 800cabc:	9704      	str	r7, [sp, #16]
 800cabe:	dc07      	bgt.n	800cad0 <__ieee754_rem_pio2+0x28>
 800cac0:	2200      	movs	r2, #0
 800cac2:	2300      	movs	r3, #0
 800cac4:	ed84 0b00 	vstr	d0, [r4]
 800cac8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cacc:	2500      	movs	r5, #0
 800cace:	e027      	b.n	800cb20 <__ieee754_rem_pio2+0x78>
 800cad0:	4bbc      	ldr	r3, [pc, #752]	; (800cdc4 <__ieee754_rem_pio2+0x31c>)
 800cad2:	4598      	cmp	r8, r3
 800cad4:	dc75      	bgt.n	800cbc2 <__ieee754_rem_pio2+0x11a>
 800cad6:	9b04      	ldr	r3, [sp, #16]
 800cad8:	4dbb      	ldr	r5, [pc, #748]	; (800cdc8 <__ieee754_rem_pio2+0x320>)
 800cada:	2b00      	cmp	r3, #0
 800cadc:	ee10 0a10 	vmov	r0, s0
 800cae0:	a3a9      	add	r3, pc, #676	; (adr r3, 800cd88 <__ieee754_rem_pio2+0x2e0>)
 800cae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae6:	4639      	mov	r1, r7
 800cae8:	dd36      	ble.n	800cb58 <__ieee754_rem_pio2+0xb0>
 800caea:	f7f3 fb85 	bl	80001f8 <__aeabi_dsub>
 800caee:	45a8      	cmp	r8, r5
 800caf0:	4606      	mov	r6, r0
 800caf2:	460f      	mov	r7, r1
 800caf4:	d018      	beq.n	800cb28 <__ieee754_rem_pio2+0x80>
 800caf6:	a3a6      	add	r3, pc, #664	; (adr r3, 800cd90 <__ieee754_rem_pio2+0x2e8>)
 800caf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafc:	f7f3 fb7c 	bl	80001f8 <__aeabi_dsub>
 800cb00:	4602      	mov	r2, r0
 800cb02:	460b      	mov	r3, r1
 800cb04:	e9c4 2300 	strd	r2, r3, [r4]
 800cb08:	4630      	mov	r0, r6
 800cb0a:	4639      	mov	r1, r7
 800cb0c:	f7f3 fb74 	bl	80001f8 <__aeabi_dsub>
 800cb10:	a39f      	add	r3, pc, #636	; (adr r3, 800cd90 <__ieee754_rem_pio2+0x2e8>)
 800cb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb16:	f7f3 fb6f 	bl	80001f8 <__aeabi_dsub>
 800cb1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cb1e:	2501      	movs	r5, #1
 800cb20:	4628      	mov	r0, r5
 800cb22:	b00d      	add	sp, #52	; 0x34
 800cb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb28:	a39b      	add	r3, pc, #620	; (adr r3, 800cd98 <__ieee754_rem_pio2+0x2f0>)
 800cb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2e:	f7f3 fb63 	bl	80001f8 <__aeabi_dsub>
 800cb32:	a39b      	add	r3, pc, #620	; (adr r3, 800cda0 <__ieee754_rem_pio2+0x2f8>)
 800cb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb38:	4606      	mov	r6, r0
 800cb3a:	460f      	mov	r7, r1
 800cb3c:	f7f3 fb5c 	bl	80001f8 <__aeabi_dsub>
 800cb40:	4602      	mov	r2, r0
 800cb42:	460b      	mov	r3, r1
 800cb44:	e9c4 2300 	strd	r2, r3, [r4]
 800cb48:	4630      	mov	r0, r6
 800cb4a:	4639      	mov	r1, r7
 800cb4c:	f7f3 fb54 	bl	80001f8 <__aeabi_dsub>
 800cb50:	a393      	add	r3, pc, #588	; (adr r3, 800cda0 <__ieee754_rem_pio2+0x2f8>)
 800cb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb56:	e7de      	b.n	800cb16 <__ieee754_rem_pio2+0x6e>
 800cb58:	f7f3 fb50 	bl	80001fc <__adddf3>
 800cb5c:	45a8      	cmp	r8, r5
 800cb5e:	4606      	mov	r6, r0
 800cb60:	460f      	mov	r7, r1
 800cb62:	d016      	beq.n	800cb92 <__ieee754_rem_pio2+0xea>
 800cb64:	a38a      	add	r3, pc, #552	; (adr r3, 800cd90 <__ieee754_rem_pio2+0x2e8>)
 800cb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6a:	f7f3 fb47 	bl	80001fc <__adddf3>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	e9c4 2300 	strd	r2, r3, [r4]
 800cb76:	4630      	mov	r0, r6
 800cb78:	4639      	mov	r1, r7
 800cb7a:	f7f3 fb3d 	bl	80001f8 <__aeabi_dsub>
 800cb7e:	a384      	add	r3, pc, #528	; (adr r3, 800cd90 <__ieee754_rem_pio2+0x2e8>)
 800cb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb84:	f7f3 fb3a 	bl	80001fc <__adddf3>
 800cb88:	f04f 35ff 	mov.w	r5, #4294967295
 800cb8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cb90:	e7c6      	b.n	800cb20 <__ieee754_rem_pio2+0x78>
 800cb92:	a381      	add	r3, pc, #516	; (adr r3, 800cd98 <__ieee754_rem_pio2+0x2f0>)
 800cb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb98:	f7f3 fb30 	bl	80001fc <__adddf3>
 800cb9c:	a380      	add	r3, pc, #512	; (adr r3, 800cda0 <__ieee754_rem_pio2+0x2f8>)
 800cb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba2:	4606      	mov	r6, r0
 800cba4:	460f      	mov	r7, r1
 800cba6:	f7f3 fb29 	bl	80001fc <__adddf3>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	460b      	mov	r3, r1
 800cbae:	e9c4 2300 	strd	r2, r3, [r4]
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	4639      	mov	r1, r7
 800cbb6:	f7f3 fb1f 	bl	80001f8 <__aeabi_dsub>
 800cbba:	a379      	add	r3, pc, #484	; (adr r3, 800cda0 <__ieee754_rem_pio2+0x2f8>)
 800cbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc0:	e7e0      	b.n	800cb84 <__ieee754_rem_pio2+0xdc>
 800cbc2:	4b82      	ldr	r3, [pc, #520]	; (800cdcc <__ieee754_rem_pio2+0x324>)
 800cbc4:	4598      	cmp	r8, r3
 800cbc6:	f300 80d0 	bgt.w	800cd6a <__ieee754_rem_pio2+0x2c2>
 800cbca:	f7fe f90d 	bl	800ade8 <fabs>
 800cbce:	ec57 6b10 	vmov	r6, r7, d0
 800cbd2:	ee10 0a10 	vmov	r0, s0
 800cbd6:	a374      	add	r3, pc, #464	; (adr r3, 800cda8 <__ieee754_rem_pio2+0x300>)
 800cbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbdc:	4639      	mov	r1, r7
 800cbde:	f7f3 fcc3 	bl	8000568 <__aeabi_dmul>
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	4b7a      	ldr	r3, [pc, #488]	; (800cdd0 <__ieee754_rem_pio2+0x328>)
 800cbe6:	f7f3 fb09 	bl	80001fc <__adddf3>
 800cbea:	f7f3 ff6d 	bl	8000ac8 <__aeabi_d2iz>
 800cbee:	4605      	mov	r5, r0
 800cbf0:	f7f3 fc50 	bl	8000494 <__aeabi_i2d>
 800cbf4:	a364      	add	r3, pc, #400	; (adr r3, 800cd88 <__ieee754_rem_pio2+0x2e0>)
 800cbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbfe:	f7f3 fcb3 	bl	8000568 <__aeabi_dmul>
 800cc02:	4602      	mov	r2, r0
 800cc04:	460b      	mov	r3, r1
 800cc06:	4630      	mov	r0, r6
 800cc08:	4639      	mov	r1, r7
 800cc0a:	f7f3 faf5 	bl	80001f8 <__aeabi_dsub>
 800cc0e:	a360      	add	r3, pc, #384	; (adr r3, 800cd90 <__ieee754_rem_pio2+0x2e8>)
 800cc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc14:	4682      	mov	sl, r0
 800cc16:	468b      	mov	fp, r1
 800cc18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc1c:	f7f3 fca4 	bl	8000568 <__aeabi_dmul>
 800cc20:	2d1f      	cmp	r5, #31
 800cc22:	4606      	mov	r6, r0
 800cc24:	460f      	mov	r7, r1
 800cc26:	dc0c      	bgt.n	800cc42 <__ieee754_rem_pio2+0x19a>
 800cc28:	1e6a      	subs	r2, r5, #1
 800cc2a:	4b6a      	ldr	r3, [pc, #424]	; (800cdd4 <__ieee754_rem_pio2+0x32c>)
 800cc2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc30:	4543      	cmp	r3, r8
 800cc32:	d006      	beq.n	800cc42 <__ieee754_rem_pio2+0x19a>
 800cc34:	4632      	mov	r2, r6
 800cc36:	463b      	mov	r3, r7
 800cc38:	4650      	mov	r0, sl
 800cc3a:	4659      	mov	r1, fp
 800cc3c:	f7f3 fadc 	bl	80001f8 <__aeabi_dsub>
 800cc40:	e00e      	b.n	800cc60 <__ieee754_rem_pio2+0x1b8>
 800cc42:	4632      	mov	r2, r6
 800cc44:	463b      	mov	r3, r7
 800cc46:	4650      	mov	r0, sl
 800cc48:	4659      	mov	r1, fp
 800cc4a:	f7f3 fad5 	bl	80001f8 <__aeabi_dsub>
 800cc4e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cc52:	9305      	str	r3, [sp, #20]
 800cc54:	9a05      	ldr	r2, [sp, #20]
 800cc56:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cc5a:	1ad3      	subs	r3, r2, r3
 800cc5c:	2b10      	cmp	r3, #16
 800cc5e:	dc02      	bgt.n	800cc66 <__ieee754_rem_pio2+0x1be>
 800cc60:	e9c4 0100 	strd	r0, r1, [r4]
 800cc64:	e039      	b.n	800ccda <__ieee754_rem_pio2+0x232>
 800cc66:	a34c      	add	r3, pc, #304	; (adr r3, 800cd98 <__ieee754_rem_pio2+0x2f0>)
 800cc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc70:	f7f3 fc7a 	bl	8000568 <__aeabi_dmul>
 800cc74:	4606      	mov	r6, r0
 800cc76:	460f      	mov	r7, r1
 800cc78:	4602      	mov	r2, r0
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	4650      	mov	r0, sl
 800cc7e:	4659      	mov	r1, fp
 800cc80:	f7f3 faba 	bl	80001f8 <__aeabi_dsub>
 800cc84:	4602      	mov	r2, r0
 800cc86:	460b      	mov	r3, r1
 800cc88:	4680      	mov	r8, r0
 800cc8a:	4689      	mov	r9, r1
 800cc8c:	4650      	mov	r0, sl
 800cc8e:	4659      	mov	r1, fp
 800cc90:	f7f3 fab2 	bl	80001f8 <__aeabi_dsub>
 800cc94:	4632      	mov	r2, r6
 800cc96:	463b      	mov	r3, r7
 800cc98:	f7f3 faae 	bl	80001f8 <__aeabi_dsub>
 800cc9c:	a340      	add	r3, pc, #256	; (adr r3, 800cda0 <__ieee754_rem_pio2+0x2f8>)
 800cc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca2:	4606      	mov	r6, r0
 800cca4:	460f      	mov	r7, r1
 800cca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccaa:	f7f3 fc5d 	bl	8000568 <__aeabi_dmul>
 800ccae:	4632      	mov	r2, r6
 800ccb0:	463b      	mov	r3, r7
 800ccb2:	f7f3 faa1 	bl	80001f8 <__aeabi_dsub>
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	460b      	mov	r3, r1
 800ccba:	4606      	mov	r6, r0
 800ccbc:	460f      	mov	r7, r1
 800ccbe:	4640      	mov	r0, r8
 800ccc0:	4649      	mov	r1, r9
 800ccc2:	f7f3 fa99 	bl	80001f8 <__aeabi_dsub>
 800ccc6:	9a05      	ldr	r2, [sp, #20]
 800ccc8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cccc:	1ad3      	subs	r3, r2, r3
 800ccce:	2b31      	cmp	r3, #49	; 0x31
 800ccd0:	dc20      	bgt.n	800cd14 <__ieee754_rem_pio2+0x26c>
 800ccd2:	e9c4 0100 	strd	r0, r1, [r4]
 800ccd6:	46c2      	mov	sl, r8
 800ccd8:	46cb      	mov	fp, r9
 800ccda:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ccde:	4650      	mov	r0, sl
 800cce0:	4642      	mov	r2, r8
 800cce2:	464b      	mov	r3, r9
 800cce4:	4659      	mov	r1, fp
 800cce6:	f7f3 fa87 	bl	80001f8 <__aeabi_dsub>
 800ccea:	463b      	mov	r3, r7
 800ccec:	4632      	mov	r2, r6
 800ccee:	f7f3 fa83 	bl	80001f8 <__aeabi_dsub>
 800ccf2:	9b04      	ldr	r3, [sp, #16]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ccfa:	f6bf af11 	bge.w	800cb20 <__ieee754_rem_pio2+0x78>
 800ccfe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cd02:	6063      	str	r3, [r4, #4]
 800cd04:	f8c4 8000 	str.w	r8, [r4]
 800cd08:	60a0      	str	r0, [r4, #8]
 800cd0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd0e:	60e3      	str	r3, [r4, #12]
 800cd10:	426d      	negs	r5, r5
 800cd12:	e705      	b.n	800cb20 <__ieee754_rem_pio2+0x78>
 800cd14:	a326      	add	r3, pc, #152	; (adr r3, 800cdb0 <__ieee754_rem_pio2+0x308>)
 800cd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd1e:	f7f3 fc23 	bl	8000568 <__aeabi_dmul>
 800cd22:	4606      	mov	r6, r0
 800cd24:	460f      	mov	r7, r1
 800cd26:	4602      	mov	r2, r0
 800cd28:	460b      	mov	r3, r1
 800cd2a:	4640      	mov	r0, r8
 800cd2c:	4649      	mov	r1, r9
 800cd2e:	f7f3 fa63 	bl	80001f8 <__aeabi_dsub>
 800cd32:	4602      	mov	r2, r0
 800cd34:	460b      	mov	r3, r1
 800cd36:	4682      	mov	sl, r0
 800cd38:	468b      	mov	fp, r1
 800cd3a:	4640      	mov	r0, r8
 800cd3c:	4649      	mov	r1, r9
 800cd3e:	f7f3 fa5b 	bl	80001f8 <__aeabi_dsub>
 800cd42:	4632      	mov	r2, r6
 800cd44:	463b      	mov	r3, r7
 800cd46:	f7f3 fa57 	bl	80001f8 <__aeabi_dsub>
 800cd4a:	a31b      	add	r3, pc, #108	; (adr r3, 800cdb8 <__ieee754_rem_pio2+0x310>)
 800cd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd50:	4606      	mov	r6, r0
 800cd52:	460f      	mov	r7, r1
 800cd54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd58:	f7f3 fc06 	bl	8000568 <__aeabi_dmul>
 800cd5c:	4632      	mov	r2, r6
 800cd5e:	463b      	mov	r3, r7
 800cd60:	f7f3 fa4a 	bl	80001f8 <__aeabi_dsub>
 800cd64:	4606      	mov	r6, r0
 800cd66:	460f      	mov	r7, r1
 800cd68:	e764      	b.n	800cc34 <__ieee754_rem_pio2+0x18c>
 800cd6a:	4b1b      	ldr	r3, [pc, #108]	; (800cdd8 <__ieee754_rem_pio2+0x330>)
 800cd6c:	4598      	cmp	r8, r3
 800cd6e:	dd35      	ble.n	800cddc <__ieee754_rem_pio2+0x334>
 800cd70:	ee10 2a10 	vmov	r2, s0
 800cd74:	463b      	mov	r3, r7
 800cd76:	4630      	mov	r0, r6
 800cd78:	4639      	mov	r1, r7
 800cd7a:	f7f3 fa3d 	bl	80001f8 <__aeabi_dsub>
 800cd7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cd82:	e9c4 0100 	strd	r0, r1, [r4]
 800cd86:	e6a1      	b.n	800cacc <__ieee754_rem_pio2+0x24>
 800cd88:	54400000 	.word	0x54400000
 800cd8c:	3ff921fb 	.word	0x3ff921fb
 800cd90:	1a626331 	.word	0x1a626331
 800cd94:	3dd0b461 	.word	0x3dd0b461
 800cd98:	1a600000 	.word	0x1a600000
 800cd9c:	3dd0b461 	.word	0x3dd0b461
 800cda0:	2e037073 	.word	0x2e037073
 800cda4:	3ba3198a 	.word	0x3ba3198a
 800cda8:	6dc9c883 	.word	0x6dc9c883
 800cdac:	3fe45f30 	.word	0x3fe45f30
 800cdb0:	2e000000 	.word	0x2e000000
 800cdb4:	3ba3198a 	.word	0x3ba3198a
 800cdb8:	252049c1 	.word	0x252049c1
 800cdbc:	397b839a 	.word	0x397b839a
 800cdc0:	3fe921fb 	.word	0x3fe921fb
 800cdc4:	4002d97b 	.word	0x4002d97b
 800cdc8:	3ff921fb 	.word	0x3ff921fb
 800cdcc:	413921fb 	.word	0x413921fb
 800cdd0:	3fe00000 	.word	0x3fe00000
 800cdd4:	08010e20 	.word	0x08010e20
 800cdd8:	7fefffff 	.word	0x7fefffff
 800cddc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800cde0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800cde4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800cde8:	4630      	mov	r0, r6
 800cdea:	460f      	mov	r7, r1
 800cdec:	f7f3 fe6c 	bl	8000ac8 <__aeabi_d2iz>
 800cdf0:	f7f3 fb50 	bl	8000494 <__aeabi_i2d>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	4639      	mov	r1, r7
 800cdfc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ce00:	f7f3 f9fa 	bl	80001f8 <__aeabi_dsub>
 800ce04:	2200      	movs	r2, #0
 800ce06:	4b1f      	ldr	r3, [pc, #124]	; (800ce84 <__ieee754_rem_pio2+0x3dc>)
 800ce08:	f7f3 fbae 	bl	8000568 <__aeabi_dmul>
 800ce0c:	460f      	mov	r7, r1
 800ce0e:	4606      	mov	r6, r0
 800ce10:	f7f3 fe5a 	bl	8000ac8 <__aeabi_d2iz>
 800ce14:	f7f3 fb3e 	bl	8000494 <__aeabi_i2d>
 800ce18:	4602      	mov	r2, r0
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	4639      	mov	r1, r7
 800ce20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ce24:	f7f3 f9e8 	bl	80001f8 <__aeabi_dsub>
 800ce28:	2200      	movs	r2, #0
 800ce2a:	4b16      	ldr	r3, [pc, #88]	; (800ce84 <__ieee754_rem_pio2+0x3dc>)
 800ce2c:	f7f3 fb9c 	bl	8000568 <__aeabi_dmul>
 800ce30:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ce34:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ce38:	f04f 0803 	mov.w	r8, #3
 800ce3c:	2600      	movs	r6, #0
 800ce3e:	2700      	movs	r7, #0
 800ce40:	4632      	mov	r2, r6
 800ce42:	463b      	mov	r3, r7
 800ce44:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ce48:	f108 3aff 	add.w	sl, r8, #4294967295
 800ce4c:	f7f3 fdf4 	bl	8000a38 <__aeabi_dcmpeq>
 800ce50:	b9b0      	cbnz	r0, 800ce80 <__ieee754_rem_pio2+0x3d8>
 800ce52:	4b0d      	ldr	r3, [pc, #52]	; (800ce88 <__ieee754_rem_pio2+0x3e0>)
 800ce54:	9301      	str	r3, [sp, #4]
 800ce56:	2302      	movs	r3, #2
 800ce58:	9300      	str	r3, [sp, #0]
 800ce5a:	462a      	mov	r2, r5
 800ce5c:	4643      	mov	r3, r8
 800ce5e:	4621      	mov	r1, r4
 800ce60:	a806      	add	r0, sp, #24
 800ce62:	f000 fa55 	bl	800d310 <__kernel_rem_pio2>
 800ce66:	9b04      	ldr	r3, [sp, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	4605      	mov	r5, r0
 800ce6c:	f6bf ae58 	bge.w	800cb20 <__ieee754_rem_pio2+0x78>
 800ce70:	6863      	ldr	r3, [r4, #4]
 800ce72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ce76:	6063      	str	r3, [r4, #4]
 800ce78:	68e3      	ldr	r3, [r4, #12]
 800ce7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ce7e:	e746      	b.n	800cd0e <__ieee754_rem_pio2+0x266>
 800ce80:	46d0      	mov	r8, sl
 800ce82:	e7dd      	b.n	800ce40 <__ieee754_rem_pio2+0x398>
 800ce84:	41700000 	.word	0x41700000
 800ce88:	08010ea0 	.word	0x08010ea0
 800ce8c:	00000000 	.word	0x00000000

0800ce90 <__ieee754_sinh>:
 800ce90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce94:	ec55 4b10 	vmov	r4, r5, d0
 800ce98:	4a55      	ldr	r2, [pc, #340]	; (800cff0 <__ieee754_sinh+0x160>)
 800ce9a:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ce9e:	4590      	cmp	r8, r2
 800cea0:	462b      	mov	r3, r5
 800cea2:	dd0b      	ble.n	800cebc <__ieee754_sinh+0x2c>
 800cea4:	ee10 2a10 	vmov	r2, s0
 800cea8:	4620      	mov	r0, r4
 800ceaa:	4629      	mov	r1, r5
 800ceac:	f7f3 f9a6 	bl	80001fc <__adddf3>
 800ceb0:	4604      	mov	r4, r0
 800ceb2:	460d      	mov	r5, r1
 800ceb4:	ec45 4b10 	vmov	d0, r4, r5
 800ceb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cebc:	4b4d      	ldr	r3, [pc, #308]	; (800cff4 <__ieee754_sinh+0x164>)
 800cebe:	2d00      	cmp	r5, #0
 800cec0:	bfb4      	ite	lt
 800cec2:	4f4d      	ldrlt	r7, [pc, #308]	; (800cff8 <__ieee754_sinh+0x168>)
 800cec4:	4f4d      	ldrge	r7, [pc, #308]	; (800cffc <__ieee754_sinh+0x16c>)
 800cec6:	4598      	cmp	r8, r3
 800cec8:	f04f 0600 	mov.w	r6, #0
 800cecc:	dc56      	bgt.n	800cf7c <__ieee754_sinh+0xec>
 800cece:	4b4c      	ldr	r3, [pc, #304]	; (800d000 <__ieee754_sinh+0x170>)
 800ced0:	4598      	cmp	r8, r3
 800ced2:	dc0d      	bgt.n	800cef0 <__ieee754_sinh+0x60>
 800ced4:	a344      	add	r3, pc, #272	; (adr r3, 800cfe8 <__ieee754_sinh+0x158>)
 800ced6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceda:	ee10 0a10 	vmov	r0, s0
 800cede:	4629      	mov	r1, r5
 800cee0:	f7f3 f98c 	bl	80001fc <__adddf3>
 800cee4:	2200      	movs	r2, #0
 800cee6:	4b47      	ldr	r3, [pc, #284]	; (800d004 <__ieee754_sinh+0x174>)
 800cee8:	f7f3 fdce 	bl	8000a88 <__aeabi_dcmpgt>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d1e1      	bne.n	800ceb4 <__ieee754_sinh+0x24>
 800cef0:	ec45 4b10 	vmov	d0, r4, r5
 800cef4:	f7fd ff78 	bl	800ade8 <fabs>
 800cef8:	f000 fe06 	bl	800db08 <expm1>
 800cefc:	4b42      	ldr	r3, [pc, #264]	; (800d008 <__ieee754_sinh+0x178>)
 800cefe:	4598      	cmp	r8, r3
 800cf00:	ec55 4b10 	vmov	r4, r5, d0
 800cf04:	dc28      	bgt.n	800cf58 <__ieee754_sinh+0xc8>
 800cf06:	ee10 2a10 	vmov	r2, s0
 800cf0a:	ee10 0a10 	vmov	r0, s0
 800cf0e:	462b      	mov	r3, r5
 800cf10:	4629      	mov	r1, r5
 800cf12:	f7f3 f973 	bl	80001fc <__adddf3>
 800cf16:	4622      	mov	r2, r4
 800cf18:	4682      	mov	sl, r0
 800cf1a:	468b      	mov	fp, r1
 800cf1c:	462b      	mov	r3, r5
 800cf1e:	4620      	mov	r0, r4
 800cf20:	4629      	mov	r1, r5
 800cf22:	f7f3 fb21 	bl	8000568 <__aeabi_dmul>
 800cf26:	2200      	movs	r2, #0
 800cf28:	4680      	mov	r8, r0
 800cf2a:	4689      	mov	r9, r1
 800cf2c:	4b35      	ldr	r3, [pc, #212]	; (800d004 <__ieee754_sinh+0x174>)
 800cf2e:	4620      	mov	r0, r4
 800cf30:	4629      	mov	r1, r5
 800cf32:	f7f3 f963 	bl	80001fc <__adddf3>
 800cf36:	4602      	mov	r2, r0
 800cf38:	460b      	mov	r3, r1
 800cf3a:	4640      	mov	r0, r8
 800cf3c:	4649      	mov	r1, r9
 800cf3e:	f7f3 fc3d 	bl	80007bc <__aeabi_ddiv>
 800cf42:	4602      	mov	r2, r0
 800cf44:	460b      	mov	r3, r1
 800cf46:	4650      	mov	r0, sl
 800cf48:	4659      	mov	r1, fp
 800cf4a:	f7f3 f955 	bl	80001f8 <__aeabi_dsub>
 800cf4e:	4632      	mov	r2, r6
 800cf50:	463b      	mov	r3, r7
 800cf52:	f7f3 fb09 	bl	8000568 <__aeabi_dmul>
 800cf56:	e7ab      	b.n	800ceb0 <__ieee754_sinh+0x20>
 800cf58:	ee10 0a10 	vmov	r0, s0
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	4b29      	ldr	r3, [pc, #164]	; (800d004 <__ieee754_sinh+0x174>)
 800cf60:	4629      	mov	r1, r5
 800cf62:	f7f3 f94b 	bl	80001fc <__adddf3>
 800cf66:	4602      	mov	r2, r0
 800cf68:	460b      	mov	r3, r1
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	f7f3 fc25 	bl	80007bc <__aeabi_ddiv>
 800cf72:	4622      	mov	r2, r4
 800cf74:	462b      	mov	r3, r5
 800cf76:	f7f3 f941 	bl	80001fc <__adddf3>
 800cf7a:	e7e8      	b.n	800cf4e <__ieee754_sinh+0xbe>
 800cf7c:	4b23      	ldr	r3, [pc, #140]	; (800d00c <__ieee754_sinh+0x17c>)
 800cf7e:	4598      	cmp	r8, r3
 800cf80:	dc08      	bgt.n	800cf94 <__ieee754_sinh+0x104>
 800cf82:	f7fd ff31 	bl	800ade8 <fabs>
 800cf86:	f7fe fc3b 	bl	800b800 <__ieee754_exp>
 800cf8a:	4632      	mov	r2, r6
 800cf8c:	463b      	mov	r3, r7
 800cf8e:	ec51 0b10 	vmov	r0, r1, d0
 800cf92:	e7de      	b.n	800cf52 <__ieee754_sinh+0xc2>
 800cf94:	4b1e      	ldr	r3, [pc, #120]	; (800d010 <__ieee754_sinh+0x180>)
 800cf96:	4598      	cmp	r8, r3
 800cf98:	dd05      	ble.n	800cfa6 <__ieee754_sinh+0x116>
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	4598      	cmp	r8, r3
 800cf9e:	d11c      	bne.n	800cfda <__ieee754_sinh+0x14a>
 800cfa0:	4a1c      	ldr	r2, [pc, #112]	; (800d014 <__ieee754_sinh+0x184>)
 800cfa2:	4294      	cmp	r4, r2
 800cfa4:	d819      	bhi.n	800cfda <__ieee754_sinh+0x14a>
 800cfa6:	ec45 4b10 	vmov	d0, r4, r5
 800cfaa:	f7fd ff1d 	bl	800ade8 <fabs>
 800cfae:	2200      	movs	r2, #0
 800cfb0:	4b12      	ldr	r3, [pc, #72]	; (800cffc <__ieee754_sinh+0x16c>)
 800cfb2:	ec51 0b10 	vmov	r0, r1, d0
 800cfb6:	f7f3 fad7 	bl	8000568 <__aeabi_dmul>
 800cfba:	ec41 0b10 	vmov	d0, r0, r1
 800cfbe:	f7fe fc1f 	bl	800b800 <__ieee754_exp>
 800cfc2:	ec55 4b10 	vmov	r4, r5, d0
 800cfc6:	ee10 2a10 	vmov	r2, s0
 800cfca:	462b      	mov	r3, r5
 800cfcc:	4630      	mov	r0, r6
 800cfce:	4639      	mov	r1, r7
 800cfd0:	f7f3 faca 	bl	8000568 <__aeabi_dmul>
 800cfd4:	4622      	mov	r2, r4
 800cfd6:	462b      	mov	r3, r5
 800cfd8:	e7bb      	b.n	800cf52 <__ieee754_sinh+0xc2>
 800cfda:	a303      	add	r3, pc, #12	; (adr r3, 800cfe8 <__ieee754_sinh+0x158>)
 800cfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	e7b5      	b.n	800cf52 <__ieee754_sinh+0xc2>
 800cfe6:	bf00      	nop
 800cfe8:	3cac7433 	.word	0x3cac7433
 800cfec:	7fac7b1f 	.word	0x7fac7b1f
 800cff0:	7fefffff 	.word	0x7fefffff
 800cff4:	4035ffff 	.word	0x4035ffff
 800cff8:	bfe00000 	.word	0xbfe00000
 800cffc:	3fe00000 	.word	0x3fe00000
 800d000:	3e2fffff 	.word	0x3e2fffff
 800d004:	3ff00000 	.word	0x3ff00000
 800d008:	3fefffff 	.word	0x3fefffff
 800d00c:	40862e41 	.word	0x40862e41
 800d010:	408633cd 	.word	0x408633cd
 800d014:	8fb9f87d 	.word	0x8fb9f87d

0800d018 <__ieee754_sqrt>:
 800d018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d01c:	4955      	ldr	r1, [pc, #340]	; (800d174 <__ieee754_sqrt+0x15c>)
 800d01e:	ec55 4b10 	vmov	r4, r5, d0
 800d022:	43a9      	bics	r1, r5
 800d024:	462b      	mov	r3, r5
 800d026:	462a      	mov	r2, r5
 800d028:	d112      	bne.n	800d050 <__ieee754_sqrt+0x38>
 800d02a:	ee10 2a10 	vmov	r2, s0
 800d02e:	ee10 0a10 	vmov	r0, s0
 800d032:	4629      	mov	r1, r5
 800d034:	f7f3 fa98 	bl	8000568 <__aeabi_dmul>
 800d038:	4602      	mov	r2, r0
 800d03a:	460b      	mov	r3, r1
 800d03c:	4620      	mov	r0, r4
 800d03e:	4629      	mov	r1, r5
 800d040:	f7f3 f8dc 	bl	80001fc <__adddf3>
 800d044:	4604      	mov	r4, r0
 800d046:	460d      	mov	r5, r1
 800d048:	ec45 4b10 	vmov	d0, r4, r5
 800d04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d050:	2d00      	cmp	r5, #0
 800d052:	ee10 0a10 	vmov	r0, s0
 800d056:	4621      	mov	r1, r4
 800d058:	dc0f      	bgt.n	800d07a <__ieee754_sqrt+0x62>
 800d05a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d05e:	4330      	orrs	r0, r6
 800d060:	d0f2      	beq.n	800d048 <__ieee754_sqrt+0x30>
 800d062:	b155      	cbz	r5, 800d07a <__ieee754_sqrt+0x62>
 800d064:	ee10 2a10 	vmov	r2, s0
 800d068:	4620      	mov	r0, r4
 800d06a:	4629      	mov	r1, r5
 800d06c:	f7f3 f8c4 	bl	80001f8 <__aeabi_dsub>
 800d070:	4602      	mov	r2, r0
 800d072:	460b      	mov	r3, r1
 800d074:	f7f3 fba2 	bl	80007bc <__aeabi_ddiv>
 800d078:	e7e4      	b.n	800d044 <__ieee754_sqrt+0x2c>
 800d07a:	151b      	asrs	r3, r3, #20
 800d07c:	d073      	beq.n	800d166 <__ieee754_sqrt+0x14e>
 800d07e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d082:	07dd      	lsls	r5, r3, #31
 800d084:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d088:	bf48      	it	mi
 800d08a:	0fc8      	lsrmi	r0, r1, #31
 800d08c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d090:	bf44      	itt	mi
 800d092:	0049      	lslmi	r1, r1, #1
 800d094:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800d098:	2500      	movs	r5, #0
 800d09a:	1058      	asrs	r0, r3, #1
 800d09c:	0fcb      	lsrs	r3, r1, #31
 800d09e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d0a2:	0049      	lsls	r1, r1, #1
 800d0a4:	2316      	movs	r3, #22
 800d0a6:	462c      	mov	r4, r5
 800d0a8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d0ac:	19a7      	adds	r7, r4, r6
 800d0ae:	4297      	cmp	r7, r2
 800d0b0:	bfde      	ittt	le
 800d0b2:	19bc      	addle	r4, r7, r6
 800d0b4:	1bd2      	suble	r2, r2, r7
 800d0b6:	19ad      	addle	r5, r5, r6
 800d0b8:	0fcf      	lsrs	r7, r1, #31
 800d0ba:	3b01      	subs	r3, #1
 800d0bc:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800d0c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d0c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d0c8:	d1f0      	bne.n	800d0ac <__ieee754_sqrt+0x94>
 800d0ca:	f04f 0c20 	mov.w	ip, #32
 800d0ce:	469e      	mov	lr, r3
 800d0d0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d0d4:	42a2      	cmp	r2, r4
 800d0d6:	eb06 070e 	add.w	r7, r6, lr
 800d0da:	dc02      	bgt.n	800d0e2 <__ieee754_sqrt+0xca>
 800d0dc:	d112      	bne.n	800d104 <__ieee754_sqrt+0xec>
 800d0de:	428f      	cmp	r7, r1
 800d0e0:	d810      	bhi.n	800d104 <__ieee754_sqrt+0xec>
 800d0e2:	2f00      	cmp	r7, #0
 800d0e4:	eb07 0e06 	add.w	lr, r7, r6
 800d0e8:	da42      	bge.n	800d170 <__ieee754_sqrt+0x158>
 800d0ea:	f1be 0f00 	cmp.w	lr, #0
 800d0ee:	db3f      	blt.n	800d170 <__ieee754_sqrt+0x158>
 800d0f0:	f104 0801 	add.w	r8, r4, #1
 800d0f4:	1b12      	subs	r2, r2, r4
 800d0f6:	428f      	cmp	r7, r1
 800d0f8:	bf88      	it	hi
 800d0fa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d0fe:	1bc9      	subs	r1, r1, r7
 800d100:	4433      	add	r3, r6
 800d102:	4644      	mov	r4, r8
 800d104:	0052      	lsls	r2, r2, #1
 800d106:	f1bc 0c01 	subs.w	ip, ip, #1
 800d10a:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800d10e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d112:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d116:	d1dd      	bne.n	800d0d4 <__ieee754_sqrt+0xbc>
 800d118:	430a      	orrs	r2, r1
 800d11a:	d006      	beq.n	800d12a <__ieee754_sqrt+0x112>
 800d11c:	1c5c      	adds	r4, r3, #1
 800d11e:	bf13      	iteet	ne
 800d120:	3301      	addne	r3, #1
 800d122:	3501      	addeq	r5, #1
 800d124:	4663      	moveq	r3, ip
 800d126:	f023 0301 	bicne.w	r3, r3, #1
 800d12a:	106a      	asrs	r2, r5, #1
 800d12c:	085b      	lsrs	r3, r3, #1
 800d12e:	07e9      	lsls	r1, r5, #31
 800d130:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d134:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d138:	bf48      	it	mi
 800d13a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d13e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800d142:	461c      	mov	r4, r3
 800d144:	e780      	b.n	800d048 <__ieee754_sqrt+0x30>
 800d146:	0aca      	lsrs	r2, r1, #11
 800d148:	3815      	subs	r0, #21
 800d14a:	0549      	lsls	r1, r1, #21
 800d14c:	2a00      	cmp	r2, #0
 800d14e:	d0fa      	beq.n	800d146 <__ieee754_sqrt+0x12e>
 800d150:	02d6      	lsls	r6, r2, #11
 800d152:	d50a      	bpl.n	800d16a <__ieee754_sqrt+0x152>
 800d154:	f1c3 0420 	rsb	r4, r3, #32
 800d158:	fa21 f404 	lsr.w	r4, r1, r4
 800d15c:	1e5d      	subs	r5, r3, #1
 800d15e:	4099      	lsls	r1, r3
 800d160:	4322      	orrs	r2, r4
 800d162:	1b43      	subs	r3, r0, r5
 800d164:	e78b      	b.n	800d07e <__ieee754_sqrt+0x66>
 800d166:	4618      	mov	r0, r3
 800d168:	e7f0      	b.n	800d14c <__ieee754_sqrt+0x134>
 800d16a:	0052      	lsls	r2, r2, #1
 800d16c:	3301      	adds	r3, #1
 800d16e:	e7ef      	b.n	800d150 <__ieee754_sqrt+0x138>
 800d170:	46a0      	mov	r8, r4
 800d172:	e7bf      	b.n	800d0f4 <__ieee754_sqrt+0xdc>
 800d174:	7ff00000 	.word	0x7ff00000

0800d178 <__ieee754_sqrtf>:
 800d178:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d17c:	4770      	bx	lr
	...

0800d180 <__kernel_cos>:
 800d180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d184:	ec59 8b10 	vmov	r8, r9, d0
 800d188:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800d18c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d190:	ed2d 8b02 	vpush	{d8}
 800d194:	eeb0 8a41 	vmov.f32	s16, s2
 800d198:	eef0 8a61 	vmov.f32	s17, s3
 800d19c:	da07      	bge.n	800d1ae <__kernel_cos+0x2e>
 800d19e:	ee10 0a10 	vmov	r0, s0
 800d1a2:	4649      	mov	r1, r9
 800d1a4:	f7f3 fc90 	bl	8000ac8 <__aeabi_d2iz>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	f000 8089 	beq.w	800d2c0 <__kernel_cos+0x140>
 800d1ae:	4642      	mov	r2, r8
 800d1b0:	464b      	mov	r3, r9
 800d1b2:	4640      	mov	r0, r8
 800d1b4:	4649      	mov	r1, r9
 800d1b6:	f7f3 f9d7 	bl	8000568 <__aeabi_dmul>
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	4b4e      	ldr	r3, [pc, #312]	; (800d2f8 <__kernel_cos+0x178>)
 800d1be:	4604      	mov	r4, r0
 800d1c0:	460d      	mov	r5, r1
 800d1c2:	f7f3 f9d1 	bl	8000568 <__aeabi_dmul>
 800d1c6:	a340      	add	r3, pc, #256	; (adr r3, 800d2c8 <__kernel_cos+0x148>)
 800d1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1cc:	4682      	mov	sl, r0
 800d1ce:	468b      	mov	fp, r1
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	4629      	mov	r1, r5
 800d1d4:	f7f3 f9c8 	bl	8000568 <__aeabi_dmul>
 800d1d8:	a33d      	add	r3, pc, #244	; (adr r3, 800d2d0 <__kernel_cos+0x150>)
 800d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1de:	f7f3 f80d 	bl	80001fc <__adddf3>
 800d1e2:	4622      	mov	r2, r4
 800d1e4:	462b      	mov	r3, r5
 800d1e6:	f7f3 f9bf 	bl	8000568 <__aeabi_dmul>
 800d1ea:	a33b      	add	r3, pc, #236	; (adr r3, 800d2d8 <__kernel_cos+0x158>)
 800d1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f0:	f7f3 f802 	bl	80001f8 <__aeabi_dsub>
 800d1f4:	4622      	mov	r2, r4
 800d1f6:	462b      	mov	r3, r5
 800d1f8:	f7f3 f9b6 	bl	8000568 <__aeabi_dmul>
 800d1fc:	a338      	add	r3, pc, #224	; (adr r3, 800d2e0 <__kernel_cos+0x160>)
 800d1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d202:	f7f2 fffb 	bl	80001fc <__adddf3>
 800d206:	4622      	mov	r2, r4
 800d208:	462b      	mov	r3, r5
 800d20a:	f7f3 f9ad 	bl	8000568 <__aeabi_dmul>
 800d20e:	a336      	add	r3, pc, #216	; (adr r3, 800d2e8 <__kernel_cos+0x168>)
 800d210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d214:	f7f2 fff0 	bl	80001f8 <__aeabi_dsub>
 800d218:	4622      	mov	r2, r4
 800d21a:	462b      	mov	r3, r5
 800d21c:	f7f3 f9a4 	bl	8000568 <__aeabi_dmul>
 800d220:	a333      	add	r3, pc, #204	; (adr r3, 800d2f0 <__kernel_cos+0x170>)
 800d222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d226:	f7f2 ffe9 	bl	80001fc <__adddf3>
 800d22a:	4622      	mov	r2, r4
 800d22c:	462b      	mov	r3, r5
 800d22e:	f7f3 f99b 	bl	8000568 <__aeabi_dmul>
 800d232:	4622      	mov	r2, r4
 800d234:	462b      	mov	r3, r5
 800d236:	f7f3 f997 	bl	8000568 <__aeabi_dmul>
 800d23a:	ec53 2b18 	vmov	r2, r3, d8
 800d23e:	4604      	mov	r4, r0
 800d240:	460d      	mov	r5, r1
 800d242:	4640      	mov	r0, r8
 800d244:	4649      	mov	r1, r9
 800d246:	f7f3 f98f 	bl	8000568 <__aeabi_dmul>
 800d24a:	460b      	mov	r3, r1
 800d24c:	4602      	mov	r2, r0
 800d24e:	4629      	mov	r1, r5
 800d250:	4620      	mov	r0, r4
 800d252:	f7f2 ffd1 	bl	80001f8 <__aeabi_dsub>
 800d256:	4b29      	ldr	r3, [pc, #164]	; (800d2fc <__kernel_cos+0x17c>)
 800d258:	429e      	cmp	r6, r3
 800d25a:	4680      	mov	r8, r0
 800d25c:	4689      	mov	r9, r1
 800d25e:	dc11      	bgt.n	800d284 <__kernel_cos+0x104>
 800d260:	4602      	mov	r2, r0
 800d262:	460b      	mov	r3, r1
 800d264:	4650      	mov	r0, sl
 800d266:	4659      	mov	r1, fp
 800d268:	f7f2 ffc6 	bl	80001f8 <__aeabi_dsub>
 800d26c:	460b      	mov	r3, r1
 800d26e:	4924      	ldr	r1, [pc, #144]	; (800d300 <__kernel_cos+0x180>)
 800d270:	4602      	mov	r2, r0
 800d272:	2000      	movs	r0, #0
 800d274:	f7f2 ffc0 	bl	80001f8 <__aeabi_dsub>
 800d278:	ecbd 8b02 	vpop	{d8}
 800d27c:	ec41 0b10 	vmov	d0, r0, r1
 800d280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d284:	4b1f      	ldr	r3, [pc, #124]	; (800d304 <__kernel_cos+0x184>)
 800d286:	491e      	ldr	r1, [pc, #120]	; (800d300 <__kernel_cos+0x180>)
 800d288:	429e      	cmp	r6, r3
 800d28a:	bfcc      	ite	gt
 800d28c:	4d1e      	ldrgt	r5, [pc, #120]	; (800d308 <__kernel_cos+0x188>)
 800d28e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800d292:	2400      	movs	r4, #0
 800d294:	4622      	mov	r2, r4
 800d296:	462b      	mov	r3, r5
 800d298:	2000      	movs	r0, #0
 800d29a:	f7f2 ffad 	bl	80001f8 <__aeabi_dsub>
 800d29e:	4622      	mov	r2, r4
 800d2a0:	4606      	mov	r6, r0
 800d2a2:	460f      	mov	r7, r1
 800d2a4:	462b      	mov	r3, r5
 800d2a6:	4650      	mov	r0, sl
 800d2a8:	4659      	mov	r1, fp
 800d2aa:	f7f2 ffa5 	bl	80001f8 <__aeabi_dsub>
 800d2ae:	4642      	mov	r2, r8
 800d2b0:	464b      	mov	r3, r9
 800d2b2:	f7f2 ffa1 	bl	80001f8 <__aeabi_dsub>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	4639      	mov	r1, r7
 800d2be:	e7d9      	b.n	800d274 <__kernel_cos+0xf4>
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	490f      	ldr	r1, [pc, #60]	; (800d300 <__kernel_cos+0x180>)
 800d2c4:	e7d8      	b.n	800d278 <__kernel_cos+0xf8>
 800d2c6:	bf00      	nop
 800d2c8:	be8838d4 	.word	0xbe8838d4
 800d2cc:	bda8fae9 	.word	0xbda8fae9
 800d2d0:	bdb4b1c4 	.word	0xbdb4b1c4
 800d2d4:	3e21ee9e 	.word	0x3e21ee9e
 800d2d8:	809c52ad 	.word	0x809c52ad
 800d2dc:	3e927e4f 	.word	0x3e927e4f
 800d2e0:	19cb1590 	.word	0x19cb1590
 800d2e4:	3efa01a0 	.word	0x3efa01a0
 800d2e8:	16c15177 	.word	0x16c15177
 800d2ec:	3f56c16c 	.word	0x3f56c16c
 800d2f0:	5555554c 	.word	0x5555554c
 800d2f4:	3fa55555 	.word	0x3fa55555
 800d2f8:	3fe00000 	.word	0x3fe00000
 800d2fc:	3fd33332 	.word	0x3fd33332
 800d300:	3ff00000 	.word	0x3ff00000
 800d304:	3fe90000 	.word	0x3fe90000
 800d308:	3fd20000 	.word	0x3fd20000
 800d30c:	00000000 	.word	0x00000000

0800d310 <__kernel_rem_pio2>:
 800d310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d314:	ed2d 8b02 	vpush	{d8}
 800d318:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d31c:	1ed4      	subs	r4, r2, #3
 800d31e:	9308      	str	r3, [sp, #32]
 800d320:	9101      	str	r1, [sp, #4]
 800d322:	4bc5      	ldr	r3, [pc, #788]	; (800d638 <__kernel_rem_pio2+0x328>)
 800d324:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d326:	9009      	str	r0, [sp, #36]	; 0x24
 800d328:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d32c:	9304      	str	r3, [sp, #16]
 800d32e:	9b08      	ldr	r3, [sp, #32]
 800d330:	3b01      	subs	r3, #1
 800d332:	9307      	str	r3, [sp, #28]
 800d334:	2318      	movs	r3, #24
 800d336:	fb94 f4f3 	sdiv	r4, r4, r3
 800d33a:	f06f 0317 	mvn.w	r3, #23
 800d33e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800d342:	fb04 3303 	mla	r3, r4, r3, r3
 800d346:	eb03 0a02 	add.w	sl, r3, r2
 800d34a:	9b04      	ldr	r3, [sp, #16]
 800d34c:	9a07      	ldr	r2, [sp, #28]
 800d34e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d628 <__kernel_rem_pio2+0x318>
 800d352:	eb03 0802 	add.w	r8, r3, r2
 800d356:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d358:	1aa7      	subs	r7, r4, r2
 800d35a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d35e:	ae22      	add	r6, sp, #136	; 0x88
 800d360:	2500      	movs	r5, #0
 800d362:	4545      	cmp	r5, r8
 800d364:	dd13      	ble.n	800d38e <__kernel_rem_pio2+0x7e>
 800d366:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800d628 <__kernel_rem_pio2+0x318>
 800d36a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d36e:	2600      	movs	r6, #0
 800d370:	9b04      	ldr	r3, [sp, #16]
 800d372:	429e      	cmp	r6, r3
 800d374:	dc32      	bgt.n	800d3dc <__kernel_rem_pio2+0xcc>
 800d376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d378:	9302      	str	r3, [sp, #8]
 800d37a:	9b08      	ldr	r3, [sp, #32]
 800d37c:	199d      	adds	r5, r3, r6
 800d37e:	ab22      	add	r3, sp, #136	; 0x88
 800d380:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d384:	9306      	str	r3, [sp, #24]
 800d386:	ec59 8b18 	vmov	r8, r9, d8
 800d38a:	2700      	movs	r7, #0
 800d38c:	e01f      	b.n	800d3ce <__kernel_rem_pio2+0xbe>
 800d38e:	42ef      	cmn	r7, r5
 800d390:	d407      	bmi.n	800d3a2 <__kernel_rem_pio2+0x92>
 800d392:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d396:	f7f3 f87d 	bl	8000494 <__aeabi_i2d>
 800d39a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d39e:	3501      	adds	r5, #1
 800d3a0:	e7df      	b.n	800d362 <__kernel_rem_pio2+0x52>
 800d3a2:	ec51 0b18 	vmov	r0, r1, d8
 800d3a6:	e7f8      	b.n	800d39a <__kernel_rem_pio2+0x8a>
 800d3a8:	9906      	ldr	r1, [sp, #24]
 800d3aa:	9d02      	ldr	r5, [sp, #8]
 800d3ac:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800d3b0:	9106      	str	r1, [sp, #24]
 800d3b2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800d3b6:	9502      	str	r5, [sp, #8]
 800d3b8:	f7f3 f8d6 	bl	8000568 <__aeabi_dmul>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	460b      	mov	r3, r1
 800d3c0:	4640      	mov	r0, r8
 800d3c2:	4649      	mov	r1, r9
 800d3c4:	f7f2 ff1a 	bl	80001fc <__adddf3>
 800d3c8:	3701      	adds	r7, #1
 800d3ca:	4680      	mov	r8, r0
 800d3cc:	4689      	mov	r9, r1
 800d3ce:	9b07      	ldr	r3, [sp, #28]
 800d3d0:	429f      	cmp	r7, r3
 800d3d2:	dde9      	ble.n	800d3a8 <__kernel_rem_pio2+0x98>
 800d3d4:	e8eb 8902 	strd	r8, r9, [fp], #8
 800d3d8:	3601      	adds	r6, #1
 800d3da:	e7c9      	b.n	800d370 <__kernel_rem_pio2+0x60>
 800d3dc:	9b04      	ldr	r3, [sp, #16]
 800d3de:	aa0e      	add	r2, sp, #56	; 0x38
 800d3e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d3e4:	930c      	str	r3, [sp, #48]	; 0x30
 800d3e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d3e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d3ec:	9c04      	ldr	r4, [sp, #16]
 800d3ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3f0:	ab9a      	add	r3, sp, #616	; 0x268
 800d3f2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800d3f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d3fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d3fe:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800d402:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800d406:	ab9a      	add	r3, sp, #616	; 0x268
 800d408:	445b      	add	r3, fp
 800d40a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800d40e:	2500      	movs	r5, #0
 800d410:	1b63      	subs	r3, r4, r5
 800d412:	2b00      	cmp	r3, #0
 800d414:	dc78      	bgt.n	800d508 <__kernel_rem_pio2+0x1f8>
 800d416:	4650      	mov	r0, sl
 800d418:	ec49 8b10 	vmov	d0, r8, r9
 800d41c:	f000 fec0 	bl	800e1a0 <scalbn>
 800d420:	ec57 6b10 	vmov	r6, r7, d0
 800d424:	2200      	movs	r2, #0
 800d426:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d42a:	ee10 0a10 	vmov	r0, s0
 800d42e:	4639      	mov	r1, r7
 800d430:	f7f3 f89a 	bl	8000568 <__aeabi_dmul>
 800d434:	ec41 0b10 	vmov	d0, r0, r1
 800d438:	f000 fd9e 	bl	800df78 <floor>
 800d43c:	2200      	movs	r2, #0
 800d43e:	ec51 0b10 	vmov	r0, r1, d0
 800d442:	4b7e      	ldr	r3, [pc, #504]	; (800d63c <__kernel_rem_pio2+0x32c>)
 800d444:	f7f3 f890 	bl	8000568 <__aeabi_dmul>
 800d448:	4602      	mov	r2, r0
 800d44a:	460b      	mov	r3, r1
 800d44c:	4630      	mov	r0, r6
 800d44e:	4639      	mov	r1, r7
 800d450:	f7f2 fed2 	bl	80001f8 <__aeabi_dsub>
 800d454:	460f      	mov	r7, r1
 800d456:	4606      	mov	r6, r0
 800d458:	f7f3 fb36 	bl	8000ac8 <__aeabi_d2iz>
 800d45c:	9006      	str	r0, [sp, #24]
 800d45e:	f7f3 f819 	bl	8000494 <__aeabi_i2d>
 800d462:	4602      	mov	r2, r0
 800d464:	460b      	mov	r3, r1
 800d466:	4630      	mov	r0, r6
 800d468:	4639      	mov	r1, r7
 800d46a:	f7f2 fec5 	bl	80001f8 <__aeabi_dsub>
 800d46e:	f1ba 0f00 	cmp.w	sl, #0
 800d472:	4606      	mov	r6, r0
 800d474:	460f      	mov	r7, r1
 800d476:	dd6c      	ble.n	800d552 <__kernel_rem_pio2+0x242>
 800d478:	1e62      	subs	r2, r4, #1
 800d47a:	ab0e      	add	r3, sp, #56	; 0x38
 800d47c:	f1ca 0118 	rsb	r1, sl, #24
 800d480:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d484:	9d06      	ldr	r5, [sp, #24]
 800d486:	fa40 f301 	asr.w	r3, r0, r1
 800d48a:	441d      	add	r5, r3
 800d48c:	408b      	lsls	r3, r1
 800d48e:	1ac0      	subs	r0, r0, r3
 800d490:	ab0e      	add	r3, sp, #56	; 0x38
 800d492:	9506      	str	r5, [sp, #24]
 800d494:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d498:	f1ca 0317 	rsb	r3, sl, #23
 800d49c:	fa40 f303 	asr.w	r3, r0, r3
 800d4a0:	9302      	str	r3, [sp, #8]
 800d4a2:	9b02      	ldr	r3, [sp, #8]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	dd62      	ble.n	800d56e <__kernel_rem_pio2+0x25e>
 800d4a8:	9b06      	ldr	r3, [sp, #24]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	9306      	str	r3, [sp, #24]
 800d4b0:	4615      	mov	r5, r2
 800d4b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d4b6:	4294      	cmp	r4, r2
 800d4b8:	f300 8095 	bgt.w	800d5e6 <__kernel_rem_pio2+0x2d6>
 800d4bc:	f1ba 0f00 	cmp.w	sl, #0
 800d4c0:	dd07      	ble.n	800d4d2 <__kernel_rem_pio2+0x1c2>
 800d4c2:	f1ba 0f01 	cmp.w	sl, #1
 800d4c6:	f000 80a2 	beq.w	800d60e <__kernel_rem_pio2+0x2fe>
 800d4ca:	f1ba 0f02 	cmp.w	sl, #2
 800d4ce:	f000 80c1 	beq.w	800d654 <__kernel_rem_pio2+0x344>
 800d4d2:	9b02      	ldr	r3, [sp, #8]
 800d4d4:	2b02      	cmp	r3, #2
 800d4d6:	d14a      	bne.n	800d56e <__kernel_rem_pio2+0x25e>
 800d4d8:	4632      	mov	r2, r6
 800d4da:	463b      	mov	r3, r7
 800d4dc:	2000      	movs	r0, #0
 800d4de:	4958      	ldr	r1, [pc, #352]	; (800d640 <__kernel_rem_pio2+0x330>)
 800d4e0:	f7f2 fe8a 	bl	80001f8 <__aeabi_dsub>
 800d4e4:	4606      	mov	r6, r0
 800d4e6:	460f      	mov	r7, r1
 800d4e8:	2d00      	cmp	r5, #0
 800d4ea:	d040      	beq.n	800d56e <__kernel_rem_pio2+0x25e>
 800d4ec:	4650      	mov	r0, sl
 800d4ee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d630 <__kernel_rem_pio2+0x320>
 800d4f2:	f000 fe55 	bl	800e1a0 <scalbn>
 800d4f6:	4630      	mov	r0, r6
 800d4f8:	4639      	mov	r1, r7
 800d4fa:	ec53 2b10 	vmov	r2, r3, d0
 800d4fe:	f7f2 fe7b 	bl	80001f8 <__aeabi_dsub>
 800d502:	4606      	mov	r6, r0
 800d504:	460f      	mov	r7, r1
 800d506:	e032      	b.n	800d56e <__kernel_rem_pio2+0x25e>
 800d508:	2200      	movs	r2, #0
 800d50a:	4b4e      	ldr	r3, [pc, #312]	; (800d644 <__kernel_rem_pio2+0x334>)
 800d50c:	4640      	mov	r0, r8
 800d50e:	4649      	mov	r1, r9
 800d510:	f7f3 f82a 	bl	8000568 <__aeabi_dmul>
 800d514:	f7f3 fad8 	bl	8000ac8 <__aeabi_d2iz>
 800d518:	f7f2 ffbc 	bl	8000494 <__aeabi_i2d>
 800d51c:	2200      	movs	r2, #0
 800d51e:	4b4a      	ldr	r3, [pc, #296]	; (800d648 <__kernel_rem_pio2+0x338>)
 800d520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d524:	f7f3 f820 	bl	8000568 <__aeabi_dmul>
 800d528:	4602      	mov	r2, r0
 800d52a:	460b      	mov	r3, r1
 800d52c:	4640      	mov	r0, r8
 800d52e:	4649      	mov	r1, r9
 800d530:	f7f2 fe62 	bl	80001f8 <__aeabi_dsub>
 800d534:	f7f3 fac8 	bl	8000ac8 <__aeabi_d2iz>
 800d538:	ab0e      	add	r3, sp, #56	; 0x38
 800d53a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800d53e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d546:	f7f2 fe59 	bl	80001fc <__adddf3>
 800d54a:	3501      	adds	r5, #1
 800d54c:	4680      	mov	r8, r0
 800d54e:	4689      	mov	r9, r1
 800d550:	e75e      	b.n	800d410 <__kernel_rem_pio2+0x100>
 800d552:	d105      	bne.n	800d560 <__kernel_rem_pio2+0x250>
 800d554:	1e63      	subs	r3, r4, #1
 800d556:	aa0e      	add	r2, sp, #56	; 0x38
 800d558:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d55c:	15c3      	asrs	r3, r0, #23
 800d55e:	e79f      	b.n	800d4a0 <__kernel_rem_pio2+0x190>
 800d560:	2200      	movs	r2, #0
 800d562:	4b3a      	ldr	r3, [pc, #232]	; (800d64c <__kernel_rem_pio2+0x33c>)
 800d564:	f7f3 fa86 	bl	8000a74 <__aeabi_dcmpge>
 800d568:	2800      	cmp	r0, #0
 800d56a:	d139      	bne.n	800d5e0 <__kernel_rem_pio2+0x2d0>
 800d56c:	9002      	str	r0, [sp, #8]
 800d56e:	2200      	movs	r2, #0
 800d570:	2300      	movs	r3, #0
 800d572:	4630      	mov	r0, r6
 800d574:	4639      	mov	r1, r7
 800d576:	f7f3 fa5f 	bl	8000a38 <__aeabi_dcmpeq>
 800d57a:	2800      	cmp	r0, #0
 800d57c:	f000 80c7 	beq.w	800d70e <__kernel_rem_pio2+0x3fe>
 800d580:	1e65      	subs	r5, r4, #1
 800d582:	462b      	mov	r3, r5
 800d584:	2200      	movs	r2, #0
 800d586:	9904      	ldr	r1, [sp, #16]
 800d588:	428b      	cmp	r3, r1
 800d58a:	da6a      	bge.n	800d662 <__kernel_rem_pio2+0x352>
 800d58c:	2a00      	cmp	r2, #0
 800d58e:	f000 8088 	beq.w	800d6a2 <__kernel_rem_pio2+0x392>
 800d592:	ab0e      	add	r3, sp, #56	; 0x38
 800d594:	f1aa 0a18 	sub.w	sl, sl, #24
 800d598:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	f000 80b4 	beq.w	800d70a <__kernel_rem_pio2+0x3fa>
 800d5a2:	4650      	mov	r0, sl
 800d5a4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800d630 <__kernel_rem_pio2+0x320>
 800d5a8:	f000 fdfa 	bl	800e1a0 <scalbn>
 800d5ac:	00ec      	lsls	r4, r5, #3
 800d5ae:	ab72      	add	r3, sp, #456	; 0x1c8
 800d5b0:	191e      	adds	r6, r3, r4
 800d5b2:	ec59 8b10 	vmov	r8, r9, d0
 800d5b6:	f106 0a08 	add.w	sl, r6, #8
 800d5ba:	462f      	mov	r7, r5
 800d5bc:	2f00      	cmp	r7, #0
 800d5be:	f280 80df 	bge.w	800d780 <__kernel_rem_pio2+0x470>
 800d5c2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800d628 <__kernel_rem_pio2+0x318>
 800d5c6:	f04f 0a00 	mov.w	sl, #0
 800d5ca:	eba5 030a 	sub.w	r3, r5, sl
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	f2c0 810a 	blt.w	800d7e8 <__kernel_rem_pio2+0x4d8>
 800d5d4:	f8df b078 	ldr.w	fp, [pc, #120]	; 800d650 <__kernel_rem_pio2+0x340>
 800d5d8:	ec59 8b18 	vmov	r8, r9, d8
 800d5dc:	2700      	movs	r7, #0
 800d5de:	e0f5      	b.n	800d7cc <__kernel_rem_pio2+0x4bc>
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	9302      	str	r3, [sp, #8]
 800d5e4:	e760      	b.n	800d4a8 <__kernel_rem_pio2+0x198>
 800d5e6:	ab0e      	add	r3, sp, #56	; 0x38
 800d5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ec:	b94d      	cbnz	r5, 800d602 <__kernel_rem_pio2+0x2f2>
 800d5ee:	b12b      	cbz	r3, 800d5fc <__kernel_rem_pio2+0x2ec>
 800d5f0:	a80e      	add	r0, sp, #56	; 0x38
 800d5f2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d5f6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	3201      	adds	r2, #1
 800d5fe:	461d      	mov	r5, r3
 800d600:	e759      	b.n	800d4b6 <__kernel_rem_pio2+0x1a6>
 800d602:	a80e      	add	r0, sp, #56	; 0x38
 800d604:	1acb      	subs	r3, r1, r3
 800d606:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800d60a:	462b      	mov	r3, r5
 800d60c:	e7f6      	b.n	800d5fc <__kernel_rem_pio2+0x2ec>
 800d60e:	1e62      	subs	r2, r4, #1
 800d610:	ab0e      	add	r3, sp, #56	; 0x38
 800d612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d616:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d61a:	a90e      	add	r1, sp, #56	; 0x38
 800d61c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d620:	e757      	b.n	800d4d2 <__kernel_rem_pio2+0x1c2>
 800d622:	bf00      	nop
 800d624:	f3af 8000 	nop.w
	...
 800d634:	3ff00000 	.word	0x3ff00000
 800d638:	08010fe8 	.word	0x08010fe8
 800d63c:	40200000 	.word	0x40200000
 800d640:	3ff00000 	.word	0x3ff00000
 800d644:	3e700000 	.word	0x3e700000
 800d648:	41700000 	.word	0x41700000
 800d64c:	3fe00000 	.word	0x3fe00000
 800d650:	08010fa8 	.word	0x08010fa8
 800d654:	1e62      	subs	r2, r4, #1
 800d656:	ab0e      	add	r3, sp, #56	; 0x38
 800d658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d65c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d660:	e7db      	b.n	800d61a <__kernel_rem_pio2+0x30a>
 800d662:	a90e      	add	r1, sp, #56	; 0x38
 800d664:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d668:	3b01      	subs	r3, #1
 800d66a:	430a      	orrs	r2, r1
 800d66c:	e78b      	b.n	800d586 <__kernel_rem_pio2+0x276>
 800d66e:	3301      	adds	r3, #1
 800d670:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d674:	2900      	cmp	r1, #0
 800d676:	d0fa      	beq.n	800d66e <__kernel_rem_pio2+0x35e>
 800d678:	9a08      	ldr	r2, [sp, #32]
 800d67a:	4422      	add	r2, r4
 800d67c:	00d2      	lsls	r2, r2, #3
 800d67e:	a922      	add	r1, sp, #136	; 0x88
 800d680:	18e3      	adds	r3, r4, r3
 800d682:	9206      	str	r2, [sp, #24]
 800d684:	440a      	add	r2, r1
 800d686:	9302      	str	r3, [sp, #8]
 800d688:	f10b 0108 	add.w	r1, fp, #8
 800d68c:	f102 0308 	add.w	r3, r2, #8
 800d690:	1c66      	adds	r6, r4, #1
 800d692:	910a      	str	r1, [sp, #40]	; 0x28
 800d694:	2500      	movs	r5, #0
 800d696:	930d      	str	r3, [sp, #52]	; 0x34
 800d698:	9b02      	ldr	r3, [sp, #8]
 800d69a:	42b3      	cmp	r3, r6
 800d69c:	da04      	bge.n	800d6a8 <__kernel_rem_pio2+0x398>
 800d69e:	461c      	mov	r4, r3
 800d6a0:	e6a6      	b.n	800d3f0 <__kernel_rem_pio2+0xe0>
 800d6a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	e7e3      	b.n	800d670 <__kernel_rem_pio2+0x360>
 800d6a8:	9b06      	ldr	r3, [sp, #24]
 800d6aa:	18ef      	adds	r7, r5, r3
 800d6ac:	ab22      	add	r3, sp, #136	; 0x88
 800d6ae:	441f      	add	r7, r3
 800d6b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d6b6:	f7f2 feed 	bl	8000494 <__aeabi_i2d>
 800d6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6bc:	461c      	mov	r4, r3
 800d6be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6c0:	e9c7 0100 	strd	r0, r1, [r7]
 800d6c4:	eb03 0b05 	add.w	fp, r3, r5
 800d6c8:	2700      	movs	r7, #0
 800d6ca:	f04f 0800 	mov.w	r8, #0
 800d6ce:	f04f 0900 	mov.w	r9, #0
 800d6d2:	9b07      	ldr	r3, [sp, #28]
 800d6d4:	429f      	cmp	r7, r3
 800d6d6:	dd08      	ble.n	800d6ea <__kernel_rem_pio2+0x3da>
 800d6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6da:	aa72      	add	r2, sp, #456	; 0x1c8
 800d6dc:	18eb      	adds	r3, r5, r3
 800d6de:	4413      	add	r3, r2
 800d6e0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800d6e4:	3601      	adds	r6, #1
 800d6e6:	3508      	adds	r5, #8
 800d6e8:	e7d6      	b.n	800d698 <__kernel_rem_pio2+0x388>
 800d6ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d6ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d6f2:	f7f2 ff39 	bl	8000568 <__aeabi_dmul>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	4640      	mov	r0, r8
 800d6fc:	4649      	mov	r1, r9
 800d6fe:	f7f2 fd7d 	bl	80001fc <__adddf3>
 800d702:	3701      	adds	r7, #1
 800d704:	4680      	mov	r8, r0
 800d706:	4689      	mov	r9, r1
 800d708:	e7e3      	b.n	800d6d2 <__kernel_rem_pio2+0x3c2>
 800d70a:	3d01      	subs	r5, #1
 800d70c:	e741      	b.n	800d592 <__kernel_rem_pio2+0x282>
 800d70e:	f1ca 0000 	rsb	r0, sl, #0
 800d712:	ec47 6b10 	vmov	d0, r6, r7
 800d716:	f000 fd43 	bl	800e1a0 <scalbn>
 800d71a:	ec57 6b10 	vmov	r6, r7, d0
 800d71e:	2200      	movs	r2, #0
 800d720:	4b99      	ldr	r3, [pc, #612]	; (800d988 <__kernel_rem_pio2+0x678>)
 800d722:	ee10 0a10 	vmov	r0, s0
 800d726:	4639      	mov	r1, r7
 800d728:	f7f3 f9a4 	bl	8000a74 <__aeabi_dcmpge>
 800d72c:	b1f8      	cbz	r0, 800d76e <__kernel_rem_pio2+0x45e>
 800d72e:	2200      	movs	r2, #0
 800d730:	4b96      	ldr	r3, [pc, #600]	; (800d98c <__kernel_rem_pio2+0x67c>)
 800d732:	4630      	mov	r0, r6
 800d734:	4639      	mov	r1, r7
 800d736:	f7f2 ff17 	bl	8000568 <__aeabi_dmul>
 800d73a:	f7f3 f9c5 	bl	8000ac8 <__aeabi_d2iz>
 800d73e:	4680      	mov	r8, r0
 800d740:	f7f2 fea8 	bl	8000494 <__aeabi_i2d>
 800d744:	2200      	movs	r2, #0
 800d746:	4b90      	ldr	r3, [pc, #576]	; (800d988 <__kernel_rem_pio2+0x678>)
 800d748:	f7f2 ff0e 	bl	8000568 <__aeabi_dmul>
 800d74c:	460b      	mov	r3, r1
 800d74e:	4602      	mov	r2, r0
 800d750:	4639      	mov	r1, r7
 800d752:	4630      	mov	r0, r6
 800d754:	f7f2 fd50 	bl	80001f8 <__aeabi_dsub>
 800d758:	f7f3 f9b6 	bl	8000ac8 <__aeabi_d2iz>
 800d75c:	1c65      	adds	r5, r4, #1
 800d75e:	ab0e      	add	r3, sp, #56	; 0x38
 800d760:	f10a 0a18 	add.w	sl, sl, #24
 800d764:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d768:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d76c:	e719      	b.n	800d5a2 <__kernel_rem_pio2+0x292>
 800d76e:	4630      	mov	r0, r6
 800d770:	4639      	mov	r1, r7
 800d772:	f7f3 f9a9 	bl	8000ac8 <__aeabi_d2iz>
 800d776:	ab0e      	add	r3, sp, #56	; 0x38
 800d778:	4625      	mov	r5, r4
 800d77a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d77e:	e710      	b.n	800d5a2 <__kernel_rem_pio2+0x292>
 800d780:	ab0e      	add	r3, sp, #56	; 0x38
 800d782:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d786:	f7f2 fe85 	bl	8000494 <__aeabi_i2d>
 800d78a:	4642      	mov	r2, r8
 800d78c:	464b      	mov	r3, r9
 800d78e:	f7f2 feeb 	bl	8000568 <__aeabi_dmul>
 800d792:	2200      	movs	r2, #0
 800d794:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d798:	4b7c      	ldr	r3, [pc, #496]	; (800d98c <__kernel_rem_pio2+0x67c>)
 800d79a:	4640      	mov	r0, r8
 800d79c:	4649      	mov	r1, r9
 800d79e:	f7f2 fee3 	bl	8000568 <__aeabi_dmul>
 800d7a2:	3f01      	subs	r7, #1
 800d7a4:	4680      	mov	r8, r0
 800d7a6:	4689      	mov	r9, r1
 800d7a8:	e708      	b.n	800d5bc <__kernel_rem_pio2+0x2ac>
 800d7aa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800d7b6:	f7f2 fed7 	bl	8000568 <__aeabi_dmul>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	460b      	mov	r3, r1
 800d7be:	4640      	mov	r0, r8
 800d7c0:	4649      	mov	r1, r9
 800d7c2:	f7f2 fd1b 	bl	80001fc <__adddf3>
 800d7c6:	3701      	adds	r7, #1
 800d7c8:	4680      	mov	r8, r0
 800d7ca:	4689      	mov	r9, r1
 800d7cc:	9b04      	ldr	r3, [sp, #16]
 800d7ce:	429f      	cmp	r7, r3
 800d7d0:	dc01      	bgt.n	800d7d6 <__kernel_rem_pio2+0x4c6>
 800d7d2:	45ba      	cmp	sl, r7
 800d7d4:	dae9      	bge.n	800d7aa <__kernel_rem_pio2+0x49a>
 800d7d6:	ab4a      	add	r3, sp, #296	; 0x128
 800d7d8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d7dc:	e9c3 8900 	strd	r8, r9, [r3]
 800d7e0:	f10a 0a01 	add.w	sl, sl, #1
 800d7e4:	3e08      	subs	r6, #8
 800d7e6:	e6f0      	b.n	800d5ca <__kernel_rem_pio2+0x2ba>
 800d7e8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d7ea:	2b03      	cmp	r3, #3
 800d7ec:	d85b      	bhi.n	800d8a6 <__kernel_rem_pio2+0x596>
 800d7ee:	e8df f003 	tbb	[pc, r3]
 800d7f2:	264a      	.short	0x264a
 800d7f4:	0226      	.short	0x0226
 800d7f6:	ab9a      	add	r3, sp, #616	; 0x268
 800d7f8:	441c      	add	r4, r3
 800d7fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d7fe:	46a2      	mov	sl, r4
 800d800:	46ab      	mov	fp, r5
 800d802:	f1bb 0f00 	cmp.w	fp, #0
 800d806:	dc6c      	bgt.n	800d8e2 <__kernel_rem_pio2+0x5d2>
 800d808:	46a2      	mov	sl, r4
 800d80a:	46ab      	mov	fp, r5
 800d80c:	f1bb 0f01 	cmp.w	fp, #1
 800d810:	f300 8086 	bgt.w	800d920 <__kernel_rem_pio2+0x610>
 800d814:	2000      	movs	r0, #0
 800d816:	2100      	movs	r1, #0
 800d818:	2d01      	cmp	r5, #1
 800d81a:	f300 80a0 	bgt.w	800d95e <__kernel_rem_pio2+0x64e>
 800d81e:	9b02      	ldr	r3, [sp, #8]
 800d820:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d824:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800d828:	2b00      	cmp	r3, #0
 800d82a:	f040 809e 	bne.w	800d96a <__kernel_rem_pio2+0x65a>
 800d82e:	9b01      	ldr	r3, [sp, #4]
 800d830:	e9c3 7800 	strd	r7, r8, [r3]
 800d834:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d838:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d83c:	e033      	b.n	800d8a6 <__kernel_rem_pio2+0x596>
 800d83e:	3408      	adds	r4, #8
 800d840:	ab4a      	add	r3, sp, #296	; 0x128
 800d842:	441c      	add	r4, r3
 800d844:	462e      	mov	r6, r5
 800d846:	2000      	movs	r0, #0
 800d848:	2100      	movs	r1, #0
 800d84a:	2e00      	cmp	r6, #0
 800d84c:	da3a      	bge.n	800d8c4 <__kernel_rem_pio2+0x5b4>
 800d84e:	9b02      	ldr	r3, [sp, #8]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d03d      	beq.n	800d8d0 <__kernel_rem_pio2+0x5c0>
 800d854:	4602      	mov	r2, r0
 800d856:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d85a:	9c01      	ldr	r4, [sp, #4]
 800d85c:	e9c4 2300 	strd	r2, r3, [r4]
 800d860:	4602      	mov	r2, r0
 800d862:	460b      	mov	r3, r1
 800d864:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d868:	f7f2 fcc6 	bl	80001f8 <__aeabi_dsub>
 800d86c:	ae4c      	add	r6, sp, #304	; 0x130
 800d86e:	2401      	movs	r4, #1
 800d870:	42a5      	cmp	r5, r4
 800d872:	da30      	bge.n	800d8d6 <__kernel_rem_pio2+0x5c6>
 800d874:	9b02      	ldr	r3, [sp, #8]
 800d876:	b113      	cbz	r3, 800d87e <__kernel_rem_pio2+0x56e>
 800d878:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d87c:	4619      	mov	r1, r3
 800d87e:	9b01      	ldr	r3, [sp, #4]
 800d880:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d884:	e00f      	b.n	800d8a6 <__kernel_rem_pio2+0x596>
 800d886:	ab9a      	add	r3, sp, #616	; 0x268
 800d888:	441c      	add	r4, r3
 800d88a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d88e:	2000      	movs	r0, #0
 800d890:	2100      	movs	r1, #0
 800d892:	2d00      	cmp	r5, #0
 800d894:	da10      	bge.n	800d8b8 <__kernel_rem_pio2+0x5a8>
 800d896:	9b02      	ldr	r3, [sp, #8]
 800d898:	b113      	cbz	r3, 800d8a0 <__kernel_rem_pio2+0x590>
 800d89a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d89e:	4619      	mov	r1, r3
 800d8a0:	9b01      	ldr	r3, [sp, #4]
 800d8a2:	e9c3 0100 	strd	r0, r1, [r3]
 800d8a6:	9b06      	ldr	r3, [sp, #24]
 800d8a8:	f003 0007 	and.w	r0, r3, #7
 800d8ac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d8b0:	ecbd 8b02 	vpop	{d8}
 800d8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d8bc:	f7f2 fc9e 	bl	80001fc <__adddf3>
 800d8c0:	3d01      	subs	r5, #1
 800d8c2:	e7e6      	b.n	800d892 <__kernel_rem_pio2+0x582>
 800d8c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d8c8:	f7f2 fc98 	bl	80001fc <__adddf3>
 800d8cc:	3e01      	subs	r6, #1
 800d8ce:	e7bc      	b.n	800d84a <__kernel_rem_pio2+0x53a>
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	e7c1      	b.n	800d85a <__kernel_rem_pio2+0x54a>
 800d8d6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d8da:	f7f2 fc8f 	bl	80001fc <__adddf3>
 800d8de:	3401      	adds	r4, #1
 800d8e0:	e7c6      	b.n	800d870 <__kernel_rem_pio2+0x560>
 800d8e2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800d8e6:	ed3a 7b02 	vldmdb	sl!, {d7}
 800d8ea:	4640      	mov	r0, r8
 800d8ec:	ec53 2b17 	vmov	r2, r3, d7
 800d8f0:	4649      	mov	r1, r9
 800d8f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d8f6:	f7f2 fc81 	bl	80001fc <__adddf3>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	4606      	mov	r6, r0
 800d900:	460f      	mov	r7, r1
 800d902:	4640      	mov	r0, r8
 800d904:	4649      	mov	r1, r9
 800d906:	f7f2 fc77 	bl	80001f8 <__aeabi_dsub>
 800d90a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d90e:	f7f2 fc75 	bl	80001fc <__adddf3>
 800d912:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d916:	e9ca 0100 	strd	r0, r1, [sl]
 800d91a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800d91e:	e770      	b.n	800d802 <__kernel_rem_pio2+0x4f2>
 800d920:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800d924:	ed3a 7b02 	vldmdb	sl!, {d7}
 800d928:	4630      	mov	r0, r6
 800d92a:	ec53 2b17 	vmov	r2, r3, d7
 800d92e:	4639      	mov	r1, r7
 800d930:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d934:	f7f2 fc62 	bl	80001fc <__adddf3>
 800d938:	4602      	mov	r2, r0
 800d93a:	460b      	mov	r3, r1
 800d93c:	4680      	mov	r8, r0
 800d93e:	4689      	mov	r9, r1
 800d940:	4630      	mov	r0, r6
 800d942:	4639      	mov	r1, r7
 800d944:	f7f2 fc58 	bl	80001f8 <__aeabi_dsub>
 800d948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d94c:	f7f2 fc56 	bl	80001fc <__adddf3>
 800d950:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d954:	e9ca 0100 	strd	r0, r1, [sl]
 800d958:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800d95c:	e756      	b.n	800d80c <__kernel_rem_pio2+0x4fc>
 800d95e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d962:	f7f2 fc4b 	bl	80001fc <__adddf3>
 800d966:	3d01      	subs	r5, #1
 800d968:	e756      	b.n	800d818 <__kernel_rem_pio2+0x508>
 800d96a:	9b01      	ldr	r3, [sp, #4]
 800d96c:	9a01      	ldr	r2, [sp, #4]
 800d96e:	601f      	str	r7, [r3, #0]
 800d970:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d974:	605c      	str	r4, [r3, #4]
 800d976:	609d      	str	r5, [r3, #8]
 800d978:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d97c:	60d3      	str	r3, [r2, #12]
 800d97e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d982:	6110      	str	r0, [r2, #16]
 800d984:	6153      	str	r3, [r2, #20]
 800d986:	e78e      	b.n	800d8a6 <__kernel_rem_pio2+0x596>
 800d988:	41700000 	.word	0x41700000
 800d98c:	3e700000 	.word	0x3e700000

0800d990 <__kernel_sin>:
 800d990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d994:	ec55 4b10 	vmov	r4, r5, d0
 800d998:	b085      	sub	sp, #20
 800d99a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d99e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d9a2:	ed8d 1b00 	vstr	d1, [sp]
 800d9a6:	9002      	str	r0, [sp, #8]
 800d9a8:	da06      	bge.n	800d9b8 <__kernel_sin+0x28>
 800d9aa:	ee10 0a10 	vmov	r0, s0
 800d9ae:	4629      	mov	r1, r5
 800d9b0:	f7f3 f88a 	bl	8000ac8 <__aeabi_d2iz>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d051      	beq.n	800da5c <__kernel_sin+0xcc>
 800d9b8:	4622      	mov	r2, r4
 800d9ba:	462b      	mov	r3, r5
 800d9bc:	4620      	mov	r0, r4
 800d9be:	4629      	mov	r1, r5
 800d9c0:	f7f2 fdd2 	bl	8000568 <__aeabi_dmul>
 800d9c4:	4682      	mov	sl, r0
 800d9c6:	468b      	mov	fp, r1
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	4629      	mov	r1, r5
 800d9d0:	f7f2 fdca 	bl	8000568 <__aeabi_dmul>
 800d9d4:	a341      	add	r3, pc, #260	; (adr r3, 800dadc <__kernel_sin+0x14c>)
 800d9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9da:	4680      	mov	r8, r0
 800d9dc:	4689      	mov	r9, r1
 800d9de:	4650      	mov	r0, sl
 800d9e0:	4659      	mov	r1, fp
 800d9e2:	f7f2 fdc1 	bl	8000568 <__aeabi_dmul>
 800d9e6:	a33f      	add	r3, pc, #252	; (adr r3, 800dae4 <__kernel_sin+0x154>)
 800d9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ec:	f7f2 fc04 	bl	80001f8 <__aeabi_dsub>
 800d9f0:	4652      	mov	r2, sl
 800d9f2:	465b      	mov	r3, fp
 800d9f4:	f7f2 fdb8 	bl	8000568 <__aeabi_dmul>
 800d9f8:	a33c      	add	r3, pc, #240	; (adr r3, 800daec <__kernel_sin+0x15c>)
 800d9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fe:	f7f2 fbfd 	bl	80001fc <__adddf3>
 800da02:	4652      	mov	r2, sl
 800da04:	465b      	mov	r3, fp
 800da06:	f7f2 fdaf 	bl	8000568 <__aeabi_dmul>
 800da0a:	a33a      	add	r3, pc, #232	; (adr r3, 800daf4 <__kernel_sin+0x164>)
 800da0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da10:	f7f2 fbf2 	bl	80001f8 <__aeabi_dsub>
 800da14:	4652      	mov	r2, sl
 800da16:	465b      	mov	r3, fp
 800da18:	f7f2 fda6 	bl	8000568 <__aeabi_dmul>
 800da1c:	a337      	add	r3, pc, #220	; (adr r3, 800dafc <__kernel_sin+0x16c>)
 800da1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da22:	f7f2 fbeb 	bl	80001fc <__adddf3>
 800da26:	9b02      	ldr	r3, [sp, #8]
 800da28:	4606      	mov	r6, r0
 800da2a:	460f      	mov	r7, r1
 800da2c:	b9db      	cbnz	r3, 800da66 <__kernel_sin+0xd6>
 800da2e:	4602      	mov	r2, r0
 800da30:	460b      	mov	r3, r1
 800da32:	4650      	mov	r0, sl
 800da34:	4659      	mov	r1, fp
 800da36:	f7f2 fd97 	bl	8000568 <__aeabi_dmul>
 800da3a:	a325      	add	r3, pc, #148	; (adr r3, 800dad0 <__kernel_sin+0x140>)
 800da3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da40:	f7f2 fbda 	bl	80001f8 <__aeabi_dsub>
 800da44:	4642      	mov	r2, r8
 800da46:	464b      	mov	r3, r9
 800da48:	f7f2 fd8e 	bl	8000568 <__aeabi_dmul>
 800da4c:	4602      	mov	r2, r0
 800da4e:	460b      	mov	r3, r1
 800da50:	4620      	mov	r0, r4
 800da52:	4629      	mov	r1, r5
 800da54:	f7f2 fbd2 	bl	80001fc <__adddf3>
 800da58:	4604      	mov	r4, r0
 800da5a:	460d      	mov	r5, r1
 800da5c:	ec45 4b10 	vmov	d0, r4, r5
 800da60:	b005      	add	sp, #20
 800da62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da66:	2200      	movs	r2, #0
 800da68:	4b1b      	ldr	r3, [pc, #108]	; (800dad8 <__kernel_sin+0x148>)
 800da6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da6e:	f7f2 fd7b 	bl	8000568 <__aeabi_dmul>
 800da72:	4632      	mov	r2, r6
 800da74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da78:	463b      	mov	r3, r7
 800da7a:	4640      	mov	r0, r8
 800da7c:	4649      	mov	r1, r9
 800da7e:	f7f2 fd73 	bl	8000568 <__aeabi_dmul>
 800da82:	4602      	mov	r2, r0
 800da84:	460b      	mov	r3, r1
 800da86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da8a:	f7f2 fbb5 	bl	80001f8 <__aeabi_dsub>
 800da8e:	4652      	mov	r2, sl
 800da90:	465b      	mov	r3, fp
 800da92:	f7f2 fd69 	bl	8000568 <__aeabi_dmul>
 800da96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da9a:	f7f2 fbad 	bl	80001f8 <__aeabi_dsub>
 800da9e:	a30c      	add	r3, pc, #48	; (adr r3, 800dad0 <__kernel_sin+0x140>)
 800daa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa4:	4606      	mov	r6, r0
 800daa6:	460f      	mov	r7, r1
 800daa8:	4640      	mov	r0, r8
 800daaa:	4649      	mov	r1, r9
 800daac:	f7f2 fd5c 	bl	8000568 <__aeabi_dmul>
 800dab0:	4602      	mov	r2, r0
 800dab2:	460b      	mov	r3, r1
 800dab4:	4630      	mov	r0, r6
 800dab6:	4639      	mov	r1, r7
 800dab8:	f7f2 fba0 	bl	80001fc <__adddf3>
 800dabc:	4602      	mov	r2, r0
 800dabe:	460b      	mov	r3, r1
 800dac0:	4620      	mov	r0, r4
 800dac2:	4629      	mov	r1, r5
 800dac4:	f7f2 fb98 	bl	80001f8 <__aeabi_dsub>
 800dac8:	e7c6      	b.n	800da58 <__kernel_sin+0xc8>
 800daca:	bf00      	nop
 800dacc:	f3af 8000 	nop.w
 800dad0:	55555549 	.word	0x55555549
 800dad4:	3fc55555 	.word	0x3fc55555
 800dad8:	3fe00000 	.word	0x3fe00000
 800dadc:	5acfd57c 	.word	0x5acfd57c
 800dae0:	3de5d93a 	.word	0x3de5d93a
 800dae4:	8a2b9ceb 	.word	0x8a2b9ceb
 800dae8:	3e5ae5e6 	.word	0x3e5ae5e6
 800daec:	57b1fe7d 	.word	0x57b1fe7d
 800daf0:	3ec71de3 	.word	0x3ec71de3
 800daf4:	19c161d5 	.word	0x19c161d5
 800daf8:	3f2a01a0 	.word	0x3f2a01a0
 800dafc:	1110f8a6 	.word	0x1110f8a6
 800db00:	3f811111 	.word	0x3f811111
 800db04:	00000000 	.word	0x00000000

0800db08 <expm1>:
 800db08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db0c:	ec55 4b10 	vmov	r4, r5, d0
 800db10:	4ad5      	ldr	r2, [pc, #852]	; (800de68 <expm1+0x360>)
 800db12:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800db16:	4293      	cmp	r3, r2
 800db18:	462e      	mov	r6, r5
 800db1a:	d94b      	bls.n	800dbb4 <expm1+0xac>
 800db1c:	4ad3      	ldr	r2, [pc, #844]	; (800de6c <expm1+0x364>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	f240 820c 	bls.w	800df3c <expm1+0x434>
 800db24:	4ad2      	ldr	r2, [pc, #840]	; (800de70 <expm1+0x368>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d910      	bls.n	800db4c <expm1+0x44>
 800db2a:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800db2e:	4323      	orrs	r3, r4
 800db30:	ee10 2a10 	vmov	r2, s0
 800db34:	d005      	beq.n	800db42 <expm1+0x3a>
 800db36:	462b      	mov	r3, r5
 800db38:	4620      	mov	r0, r4
 800db3a:	4629      	mov	r1, r5
 800db3c:	f7f2 fb5e 	bl	80001fc <__adddf3>
 800db40:	e016      	b.n	800db70 <expm1+0x68>
 800db42:	2d00      	cmp	r5, #0
 800db44:	da16      	bge.n	800db74 <expm1+0x6c>
 800db46:	2400      	movs	r4, #0
 800db48:	4dca      	ldr	r5, [pc, #808]	; (800de74 <expm1+0x36c>)
 800db4a:	e013      	b.n	800db74 <expm1+0x6c>
 800db4c:	a3ae      	add	r3, pc, #696	; (adr r3, 800de08 <expm1+0x300>)
 800db4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db52:	ee10 0a10 	vmov	r0, s0
 800db56:	4629      	mov	r1, r5
 800db58:	f7f2 ff96 	bl	8000a88 <__aeabi_dcmpgt>
 800db5c:	2800      	cmp	r0, #0
 800db5e:	f000 81ed 	beq.w	800df3c <expm1+0x434>
 800db62:	a3ab      	add	r3, pc, #684	; (adr r3, 800de10 <expm1+0x308>)
 800db64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db68:	4610      	mov	r0, r2
 800db6a:	4619      	mov	r1, r3
 800db6c:	f7f2 fcfc 	bl	8000568 <__aeabi_dmul>
 800db70:	4604      	mov	r4, r0
 800db72:	460d      	mov	r5, r1
 800db74:	ec45 4b10 	vmov	d0, r4, r5
 800db78:	b004      	add	sp, #16
 800db7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db7e:	a3a6      	add	r3, pc, #664	; (adr r3, 800de18 <expm1+0x310>)
 800db80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db84:	4620      	mov	r0, r4
 800db86:	4629      	mov	r1, r5
 800db88:	f7f2 fb38 	bl	80001fc <__adddf3>
 800db8c:	2200      	movs	r2, #0
 800db8e:	2300      	movs	r3, #0
 800db90:	f7f2 ff5c 	bl	8000a4c <__aeabi_dcmplt>
 800db94:	2800      	cmp	r0, #0
 800db96:	d1d6      	bne.n	800db46 <expm1+0x3e>
 800db98:	a3a1      	add	r3, pc, #644	; (adr r3, 800de20 <expm1+0x318>)
 800db9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9e:	4620      	mov	r0, r4
 800dba0:	4629      	mov	r1, r5
 800dba2:	f7f2 fce1 	bl	8000568 <__aeabi_dmul>
 800dba6:	2e00      	cmp	r6, #0
 800dba8:	f04f 0600 	mov.w	r6, #0
 800dbac:	f2c0 80b0 	blt.w	800dd10 <expm1+0x208>
 800dbb0:	4fb1      	ldr	r7, [pc, #708]	; (800de78 <expm1+0x370>)
 800dbb2:	e0ae      	b.n	800dd12 <expm1+0x20a>
 800dbb4:	4ab1      	ldr	r2, [pc, #708]	; (800de7c <expm1+0x374>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	f240 80cf 	bls.w	800dd5a <expm1+0x252>
 800dbbc:	4ab0      	ldr	r2, [pc, #704]	; (800de80 <expm1+0x378>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d8ea      	bhi.n	800db98 <expm1+0x90>
 800dbc2:	2d00      	cmp	r5, #0
 800dbc4:	a398      	add	r3, pc, #608	; (adr r3, 800de28 <expm1+0x320>)
 800dbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbca:	ee10 0a10 	vmov	r0, s0
 800dbce:	4629      	mov	r1, r5
 800dbd0:	f2c0 8094 	blt.w	800dcfc <expm1+0x1f4>
 800dbd4:	f7f2 fb10 	bl	80001f8 <__aeabi_dsub>
 800dbd8:	a795      	add	r7, pc, #596	; (adr r7, 800de30 <expm1+0x328>)
 800dbda:	e9d7 6700 	ldrd	r6, r7, [r7]
 800dbde:	4680      	mov	r8, r0
 800dbe0:	4689      	mov	r9, r1
 800dbe2:	f04f 0a01 	mov.w	sl, #1
 800dbe6:	4632      	mov	r2, r6
 800dbe8:	463b      	mov	r3, r7
 800dbea:	4640      	mov	r0, r8
 800dbec:	4649      	mov	r1, r9
 800dbee:	f7f2 fb03 	bl	80001f8 <__aeabi_dsub>
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	460d      	mov	r5, r1
 800dbfa:	4640      	mov	r0, r8
 800dbfc:	4649      	mov	r1, r9
 800dbfe:	f7f2 fafb 	bl	80001f8 <__aeabi_dsub>
 800dc02:	4632      	mov	r2, r6
 800dc04:	463b      	mov	r3, r7
 800dc06:	f7f2 faf7 	bl	80001f8 <__aeabi_dsub>
 800dc0a:	e9cd 0100 	strd	r0, r1, [sp]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	4b99      	ldr	r3, [pc, #612]	; (800de78 <expm1+0x370>)
 800dc12:	4620      	mov	r0, r4
 800dc14:	4629      	mov	r1, r5
 800dc16:	f7f2 fca7 	bl	8000568 <__aeabi_dmul>
 800dc1a:	4606      	mov	r6, r0
 800dc1c:	460f      	mov	r7, r1
 800dc1e:	4602      	mov	r2, r0
 800dc20:	460b      	mov	r3, r1
 800dc22:	4620      	mov	r0, r4
 800dc24:	4629      	mov	r1, r5
 800dc26:	f7f2 fc9f 	bl	8000568 <__aeabi_dmul>
 800dc2a:	a383      	add	r3, pc, #524	; (adr r3, 800de38 <expm1+0x330>)
 800dc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc30:	4680      	mov	r8, r0
 800dc32:	4689      	mov	r9, r1
 800dc34:	f7f2 fc98 	bl	8000568 <__aeabi_dmul>
 800dc38:	a381      	add	r3, pc, #516	; (adr r3, 800de40 <expm1+0x338>)
 800dc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3e:	f7f2 fadd 	bl	80001fc <__adddf3>
 800dc42:	4642      	mov	r2, r8
 800dc44:	464b      	mov	r3, r9
 800dc46:	f7f2 fc8f 	bl	8000568 <__aeabi_dmul>
 800dc4a:	a37f      	add	r3, pc, #508	; (adr r3, 800de48 <expm1+0x340>)
 800dc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc50:	f7f2 fad2 	bl	80001f8 <__aeabi_dsub>
 800dc54:	4642      	mov	r2, r8
 800dc56:	464b      	mov	r3, r9
 800dc58:	f7f2 fc86 	bl	8000568 <__aeabi_dmul>
 800dc5c:	a37c      	add	r3, pc, #496	; (adr r3, 800de50 <expm1+0x348>)
 800dc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc62:	f7f2 facb 	bl	80001fc <__adddf3>
 800dc66:	4642      	mov	r2, r8
 800dc68:	464b      	mov	r3, r9
 800dc6a:	f7f2 fc7d 	bl	8000568 <__aeabi_dmul>
 800dc6e:	a37a      	add	r3, pc, #488	; (adr r3, 800de58 <expm1+0x350>)
 800dc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc74:	f7f2 fac0 	bl	80001f8 <__aeabi_dsub>
 800dc78:	4642      	mov	r2, r8
 800dc7a:	464b      	mov	r3, r9
 800dc7c:	f7f2 fc74 	bl	8000568 <__aeabi_dmul>
 800dc80:	2200      	movs	r2, #0
 800dc82:	4b80      	ldr	r3, [pc, #512]	; (800de84 <expm1+0x37c>)
 800dc84:	f7f2 faba 	bl	80001fc <__adddf3>
 800dc88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4630      	mov	r0, r6
 800dc92:	4639      	mov	r1, r7
 800dc94:	f7f2 fc68 	bl	8000568 <__aeabi_dmul>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	2000      	movs	r0, #0
 800dc9e:	497a      	ldr	r1, [pc, #488]	; (800de88 <expm1+0x380>)
 800dca0:	f7f2 faaa 	bl	80001f8 <__aeabi_dsub>
 800dca4:	4602      	mov	r2, r0
 800dca6:	460b      	mov	r3, r1
 800dca8:	4606      	mov	r6, r0
 800dcaa:	460f      	mov	r7, r1
 800dcac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcb0:	f7f2 faa2 	bl	80001f8 <__aeabi_dsub>
 800dcb4:	4632      	mov	r2, r6
 800dcb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcba:	463b      	mov	r3, r7
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	4629      	mov	r1, r5
 800dcc0:	f7f2 fc52 	bl	8000568 <__aeabi_dmul>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	2000      	movs	r0, #0
 800dcca:	4970      	ldr	r1, [pc, #448]	; (800de8c <expm1+0x384>)
 800dccc:	f7f2 fa94 	bl	80001f8 <__aeabi_dsub>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcd8:	f7f2 fd70 	bl	80007bc <__aeabi_ddiv>
 800dcdc:	4642      	mov	r2, r8
 800dcde:	464b      	mov	r3, r9
 800dce0:	f7f2 fc42 	bl	8000568 <__aeabi_dmul>
 800dce4:	4602      	mov	r2, r0
 800dce6:	460b      	mov	r3, r1
 800dce8:	f1ba 0f00 	cmp.w	sl, #0
 800dcec:	d14e      	bne.n	800dd8c <expm1+0x284>
 800dcee:	4620      	mov	r0, r4
 800dcf0:	4629      	mov	r1, r5
 800dcf2:	f7f2 fc39 	bl	8000568 <__aeabi_dmul>
 800dcf6:	4642      	mov	r2, r8
 800dcf8:	464b      	mov	r3, r9
 800dcfa:	e03b      	b.n	800dd74 <expm1+0x26c>
 800dcfc:	f7f2 fa7e 	bl	80001fc <__adddf3>
 800dd00:	f04f 3aff 	mov.w	sl, #4294967295
 800dd04:	4680      	mov	r8, r0
 800dd06:	4689      	mov	r9, r1
 800dd08:	a755      	add	r7, pc, #340	; (adr r7, 800de60 <expm1+0x358>)
 800dd0a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800dd0e:	e76a      	b.n	800dbe6 <expm1+0xde>
 800dd10:	4f5f      	ldr	r7, [pc, #380]	; (800de90 <expm1+0x388>)
 800dd12:	4602      	mov	r2, r0
 800dd14:	460b      	mov	r3, r1
 800dd16:	4630      	mov	r0, r6
 800dd18:	4639      	mov	r1, r7
 800dd1a:	f7f2 fa6f 	bl	80001fc <__adddf3>
 800dd1e:	f7f2 fed3 	bl	8000ac8 <__aeabi_d2iz>
 800dd22:	4682      	mov	sl, r0
 800dd24:	f7f2 fbb6 	bl	8000494 <__aeabi_i2d>
 800dd28:	a33f      	add	r3, pc, #252	; (adr r3, 800de28 <expm1+0x320>)
 800dd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2e:	4606      	mov	r6, r0
 800dd30:	460f      	mov	r7, r1
 800dd32:	f7f2 fc19 	bl	8000568 <__aeabi_dmul>
 800dd36:	4602      	mov	r2, r0
 800dd38:	460b      	mov	r3, r1
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	4629      	mov	r1, r5
 800dd3e:	f7f2 fa5b 	bl	80001f8 <__aeabi_dsub>
 800dd42:	a33b      	add	r3, pc, #236	; (adr r3, 800de30 <expm1+0x328>)
 800dd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd48:	4680      	mov	r8, r0
 800dd4a:	4689      	mov	r9, r1
 800dd4c:	4630      	mov	r0, r6
 800dd4e:	4639      	mov	r1, r7
 800dd50:	f7f2 fc0a 	bl	8000568 <__aeabi_dmul>
 800dd54:	4606      	mov	r6, r0
 800dd56:	460f      	mov	r7, r1
 800dd58:	e745      	b.n	800dbe6 <expm1+0xde>
 800dd5a:	4a4e      	ldr	r2, [pc, #312]	; (800de94 <expm1+0x38c>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d812      	bhi.n	800dd86 <expm1+0x27e>
 800dd60:	a32b      	add	r3, pc, #172	; (adr r3, 800de10 <expm1+0x308>)
 800dd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd66:	ee10 0a10 	vmov	r0, s0
 800dd6a:	4629      	mov	r1, r5
 800dd6c:	f7f2 fa46 	bl	80001fc <__adddf3>
 800dd70:	4602      	mov	r2, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	f7f2 fa40 	bl	80001f8 <__aeabi_dsub>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	4629      	mov	r1, r5
 800dd80:	f7f2 fa3a 	bl	80001f8 <__aeabi_dsub>
 800dd84:	e6f4      	b.n	800db70 <expm1+0x68>
 800dd86:	f04f 0a00 	mov.w	sl, #0
 800dd8a:	e740      	b.n	800dc0e <expm1+0x106>
 800dd8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd90:	f7f2 fa32 	bl	80001f8 <__aeabi_dsub>
 800dd94:	4622      	mov	r2, r4
 800dd96:	462b      	mov	r3, r5
 800dd98:	f7f2 fbe6 	bl	8000568 <__aeabi_dmul>
 800dd9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dda0:	f7f2 fa2a 	bl	80001f8 <__aeabi_dsub>
 800dda4:	4642      	mov	r2, r8
 800dda6:	464b      	mov	r3, r9
 800dda8:	f7f2 fa26 	bl	80001f8 <__aeabi_dsub>
 800ddac:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ddb0:	4606      	mov	r6, r0
 800ddb2:	460f      	mov	r7, r1
 800ddb4:	d10c      	bne.n	800ddd0 <expm1+0x2c8>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	460b      	mov	r3, r1
 800ddba:	4620      	mov	r0, r4
 800ddbc:	4629      	mov	r1, r5
 800ddbe:	f7f2 fa1b 	bl	80001f8 <__aeabi_dsub>
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	4b2c      	ldr	r3, [pc, #176]	; (800de78 <expm1+0x370>)
 800ddc6:	f7f2 fbcf 	bl	8000568 <__aeabi_dmul>
 800ddca:	2200      	movs	r2, #0
 800ddcc:	4b2a      	ldr	r3, [pc, #168]	; (800de78 <expm1+0x370>)
 800ddce:	e7d7      	b.n	800dd80 <expm1+0x278>
 800ddd0:	f1ba 0f01 	cmp.w	sl, #1
 800ddd4:	d16f      	bne.n	800deb6 <expm1+0x3ae>
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	4b2f      	ldr	r3, [pc, #188]	; (800de98 <expm1+0x390>)
 800ddda:	4620      	mov	r0, r4
 800dddc:	4629      	mov	r1, r5
 800ddde:	f7f2 fe35 	bl	8000a4c <__aeabi_dcmplt>
 800dde2:	2800      	cmp	r0, #0
 800dde4:	d05a      	beq.n	800de9c <expm1+0x394>
 800dde6:	2200      	movs	r2, #0
 800dde8:	4b23      	ldr	r3, [pc, #140]	; (800de78 <expm1+0x370>)
 800ddea:	4620      	mov	r0, r4
 800ddec:	4629      	mov	r1, r5
 800ddee:	f7f2 fa05 	bl	80001fc <__adddf3>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	4639      	mov	r1, r7
 800ddfa:	f7f2 f9fd 	bl	80001f8 <__aeabi_dsub>
 800ddfe:	2200      	movs	r2, #0
 800de00:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800de04:	e6b2      	b.n	800db6c <expm1+0x64>
 800de06:	bf00      	nop
 800de08:	fefa39ef 	.word	0xfefa39ef
 800de0c:	40862e42 	.word	0x40862e42
 800de10:	8800759c 	.word	0x8800759c
 800de14:	7e37e43c 	.word	0x7e37e43c
 800de18:	c2f8f359 	.word	0xc2f8f359
 800de1c:	01a56e1f 	.word	0x01a56e1f
 800de20:	652b82fe 	.word	0x652b82fe
 800de24:	3ff71547 	.word	0x3ff71547
 800de28:	fee00000 	.word	0xfee00000
 800de2c:	3fe62e42 	.word	0x3fe62e42
 800de30:	35793c76 	.word	0x35793c76
 800de34:	3dea39ef 	.word	0x3dea39ef
 800de38:	6e09c32d 	.word	0x6e09c32d
 800de3c:	be8afdb7 	.word	0xbe8afdb7
 800de40:	86e65239 	.word	0x86e65239
 800de44:	3ed0cfca 	.word	0x3ed0cfca
 800de48:	9eaadbb7 	.word	0x9eaadbb7
 800de4c:	3f14ce19 	.word	0x3f14ce19
 800de50:	19fe5585 	.word	0x19fe5585
 800de54:	3f5a01a0 	.word	0x3f5a01a0
 800de58:	111110f4 	.word	0x111110f4
 800de5c:	3fa11111 	.word	0x3fa11111
 800de60:	35793c76 	.word	0x35793c76
 800de64:	bdea39ef 	.word	0xbdea39ef
 800de68:	40436879 	.word	0x40436879
 800de6c:	40862e41 	.word	0x40862e41
 800de70:	7fefffff 	.word	0x7fefffff
 800de74:	bff00000 	.word	0xbff00000
 800de78:	3fe00000 	.word	0x3fe00000
 800de7c:	3fd62e42 	.word	0x3fd62e42
 800de80:	3ff0a2b1 	.word	0x3ff0a2b1
 800de84:	3ff00000 	.word	0x3ff00000
 800de88:	40080000 	.word	0x40080000
 800de8c:	40180000 	.word	0x40180000
 800de90:	bfe00000 	.word	0xbfe00000
 800de94:	3c8fffff 	.word	0x3c8fffff
 800de98:	bfd00000 	.word	0xbfd00000
 800de9c:	4632      	mov	r2, r6
 800de9e:	463b      	mov	r3, r7
 800dea0:	4620      	mov	r0, r4
 800dea2:	4629      	mov	r1, r5
 800dea4:	f7f2 f9a8 	bl	80001f8 <__aeabi_dsub>
 800dea8:	4602      	mov	r2, r0
 800deaa:	460b      	mov	r3, r1
 800deac:	f7f2 f9a6 	bl	80001fc <__adddf3>
 800deb0:	2200      	movs	r2, #0
 800deb2:	4b2b      	ldr	r3, [pc, #172]	; (800df60 <expm1+0x458>)
 800deb4:	e642      	b.n	800db3c <expm1+0x34>
 800deb6:	f10a 0301 	add.w	r3, sl, #1
 800deba:	2b39      	cmp	r3, #57	; 0x39
 800debc:	ea4f 560a 	mov.w	r6, sl, lsl #20
 800dec0:	d90e      	bls.n	800dee0 <expm1+0x3d8>
 800dec2:	4622      	mov	r2, r4
 800dec4:	462b      	mov	r3, r5
 800dec6:	f7f2 f997 	bl	80001f8 <__aeabi_dsub>
 800deca:	4602      	mov	r2, r0
 800decc:	460b      	mov	r3, r1
 800dece:	2000      	movs	r0, #0
 800ded0:	4923      	ldr	r1, [pc, #140]	; (800df60 <expm1+0x458>)
 800ded2:	f7f2 f991 	bl	80001f8 <__aeabi_dsub>
 800ded6:	1873      	adds	r3, r6, r1
 800ded8:	4619      	mov	r1, r3
 800deda:	2200      	movs	r2, #0
 800dedc:	4b20      	ldr	r3, [pc, #128]	; (800df60 <expm1+0x458>)
 800dede:	e74f      	b.n	800dd80 <expm1+0x278>
 800dee0:	f1ba 0f13 	cmp.w	sl, #19
 800dee4:	dc16      	bgt.n	800df14 <expm1+0x40c>
 800dee6:	4622      	mov	r2, r4
 800dee8:	462b      	mov	r3, r5
 800deea:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 800deee:	f7f2 f983 	bl	80001f8 <__aeabi_dsub>
 800def2:	fa47 fa0a 	asr.w	sl, r7, sl
 800def6:	f1ca 597f 	rsb	r9, sl, #1069547520	; 0x3fc00000
 800defa:	f04f 0800 	mov.w	r8, #0
 800defe:	f509 1940 	add.w	r9, r9, #3145728	; 0x300000
 800df02:	4602      	mov	r2, r0
 800df04:	460b      	mov	r3, r1
 800df06:	4640      	mov	r0, r8
 800df08:	4649      	mov	r1, r9
 800df0a:	f7f2 f975 	bl	80001f8 <__aeabi_dsub>
 800df0e:	4604      	mov	r4, r0
 800df10:	1875      	adds	r5, r6, r1
 800df12:	e62f      	b.n	800db74 <expm1+0x6c>
 800df14:	f5ca 7a7f 	rsb	sl, sl, #1020	; 0x3fc
 800df18:	f10a 0a03 	add.w	sl, sl, #3
 800df1c:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800df20:	2200      	movs	r2, #0
 800df22:	f7f2 f96b 	bl	80001fc <__adddf3>
 800df26:	4602      	mov	r2, r0
 800df28:	460b      	mov	r3, r1
 800df2a:	4620      	mov	r0, r4
 800df2c:	4629      	mov	r1, r5
 800df2e:	f7f2 f963 	bl	80001f8 <__aeabi_dsub>
 800df32:	2200      	movs	r2, #0
 800df34:	4b0a      	ldr	r3, [pc, #40]	; (800df60 <expm1+0x458>)
 800df36:	f7f2 f961 	bl	80001fc <__adddf3>
 800df3a:	e7e8      	b.n	800df0e <expm1+0x406>
 800df3c:	2e00      	cmp	r6, #0
 800df3e:	f6ff ae1e 	blt.w	800db7e <expm1+0x76>
 800df42:	a305      	add	r3, pc, #20	; (adr r3, 800df58 <expm1+0x450>)
 800df44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df48:	4620      	mov	r0, r4
 800df4a:	4629      	mov	r1, r5
 800df4c:	f7f2 fb0c 	bl	8000568 <__aeabi_dmul>
 800df50:	2600      	movs	r6, #0
 800df52:	e62d      	b.n	800dbb0 <expm1+0xa8>
 800df54:	f3af 8000 	nop.w
 800df58:	652b82fe 	.word	0x652b82fe
 800df5c:	3ff71547 	.word	0x3ff71547
 800df60:	3ff00000 	.word	0x3ff00000

0800df64 <finite>:
 800df64:	ee10 3a90 	vmov	r3, s1
 800df68:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800df6c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800df70:	0fc0      	lsrs	r0, r0, #31
 800df72:	4770      	bx	lr
 800df74:	0000      	movs	r0, r0
	...

0800df78 <floor>:
 800df78:	ec51 0b10 	vmov	r0, r1, d0
 800df7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800df84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800df88:	2e13      	cmp	r6, #19
 800df8a:	460c      	mov	r4, r1
 800df8c:	ee10 5a10 	vmov	r5, s0
 800df90:	4680      	mov	r8, r0
 800df92:	dc34      	bgt.n	800dffe <floor+0x86>
 800df94:	2e00      	cmp	r6, #0
 800df96:	da16      	bge.n	800dfc6 <floor+0x4e>
 800df98:	a335      	add	r3, pc, #212	; (adr r3, 800e070 <floor+0xf8>)
 800df9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9e:	f7f2 f92d 	bl	80001fc <__adddf3>
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	f7f2 fd6f 	bl	8000a88 <__aeabi_dcmpgt>
 800dfaa:	b148      	cbz	r0, 800dfc0 <floor+0x48>
 800dfac:	2c00      	cmp	r4, #0
 800dfae:	da59      	bge.n	800e064 <floor+0xec>
 800dfb0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800dfb4:	4a30      	ldr	r2, [pc, #192]	; (800e078 <floor+0x100>)
 800dfb6:	432b      	orrs	r3, r5
 800dfb8:	2500      	movs	r5, #0
 800dfba:	42ab      	cmp	r3, r5
 800dfbc:	bf18      	it	ne
 800dfbe:	4614      	movne	r4, r2
 800dfc0:	4621      	mov	r1, r4
 800dfc2:	4628      	mov	r0, r5
 800dfc4:	e025      	b.n	800e012 <floor+0x9a>
 800dfc6:	4f2d      	ldr	r7, [pc, #180]	; (800e07c <floor+0x104>)
 800dfc8:	4137      	asrs	r7, r6
 800dfca:	ea01 0307 	and.w	r3, r1, r7
 800dfce:	4303      	orrs	r3, r0
 800dfd0:	d01f      	beq.n	800e012 <floor+0x9a>
 800dfd2:	a327      	add	r3, pc, #156	; (adr r3, 800e070 <floor+0xf8>)
 800dfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd8:	f7f2 f910 	bl	80001fc <__adddf3>
 800dfdc:	2200      	movs	r2, #0
 800dfde:	2300      	movs	r3, #0
 800dfe0:	f7f2 fd52 	bl	8000a88 <__aeabi_dcmpgt>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d0eb      	beq.n	800dfc0 <floor+0x48>
 800dfe8:	2c00      	cmp	r4, #0
 800dfea:	bfbe      	ittt	lt
 800dfec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dff0:	fa43 f606 	asrlt.w	r6, r3, r6
 800dff4:	19a4      	addlt	r4, r4, r6
 800dff6:	ea24 0407 	bic.w	r4, r4, r7
 800dffa:	2500      	movs	r5, #0
 800dffc:	e7e0      	b.n	800dfc0 <floor+0x48>
 800dffe:	2e33      	cmp	r6, #51	; 0x33
 800e000:	dd0b      	ble.n	800e01a <floor+0xa2>
 800e002:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e006:	d104      	bne.n	800e012 <floor+0x9a>
 800e008:	ee10 2a10 	vmov	r2, s0
 800e00c:	460b      	mov	r3, r1
 800e00e:	f7f2 f8f5 	bl	80001fc <__adddf3>
 800e012:	ec41 0b10 	vmov	d0, r0, r1
 800e016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e01a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e01e:	f04f 33ff 	mov.w	r3, #4294967295
 800e022:	fa23 f707 	lsr.w	r7, r3, r7
 800e026:	4207      	tst	r7, r0
 800e028:	d0f3      	beq.n	800e012 <floor+0x9a>
 800e02a:	a311      	add	r3, pc, #68	; (adr r3, 800e070 <floor+0xf8>)
 800e02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e030:	f7f2 f8e4 	bl	80001fc <__adddf3>
 800e034:	2200      	movs	r2, #0
 800e036:	2300      	movs	r3, #0
 800e038:	f7f2 fd26 	bl	8000a88 <__aeabi_dcmpgt>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d0bf      	beq.n	800dfc0 <floor+0x48>
 800e040:	2c00      	cmp	r4, #0
 800e042:	da02      	bge.n	800e04a <floor+0xd2>
 800e044:	2e14      	cmp	r6, #20
 800e046:	d103      	bne.n	800e050 <floor+0xd8>
 800e048:	3401      	adds	r4, #1
 800e04a:	ea25 0507 	bic.w	r5, r5, r7
 800e04e:	e7b7      	b.n	800dfc0 <floor+0x48>
 800e050:	2301      	movs	r3, #1
 800e052:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e056:	fa03 f606 	lsl.w	r6, r3, r6
 800e05a:	4435      	add	r5, r6
 800e05c:	4545      	cmp	r5, r8
 800e05e:	bf38      	it	cc
 800e060:	18e4      	addcc	r4, r4, r3
 800e062:	e7f2      	b.n	800e04a <floor+0xd2>
 800e064:	2500      	movs	r5, #0
 800e066:	462c      	mov	r4, r5
 800e068:	e7aa      	b.n	800dfc0 <floor+0x48>
 800e06a:	bf00      	nop
 800e06c:	f3af 8000 	nop.w
 800e070:	8800759c 	.word	0x8800759c
 800e074:	7e37e43c 	.word	0x7e37e43c
 800e078:	bff00000 	.word	0xbff00000
 800e07c:	000fffff 	.word	0x000fffff

0800e080 <matherr>:
 800e080:	2000      	movs	r0, #0
 800e082:	4770      	bx	lr
 800e084:	0000      	movs	r0, r0
	...

0800e088 <nan>:
 800e088:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e090 <nan+0x8>
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop
 800e090:	00000000 	.word	0x00000000
 800e094:	7ff80000 	.word	0x7ff80000

0800e098 <rint>:
 800e098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e09a:	ec51 0b10 	vmov	r0, r1, d0
 800e09e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e0a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800e0a6:	2e13      	cmp	r6, #19
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	ee10 4a10 	vmov	r4, s0
 800e0ae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800e0b2:	dc56      	bgt.n	800e162 <rint+0xca>
 800e0b4:	2e00      	cmp	r6, #0
 800e0b6:	da2b      	bge.n	800e110 <rint+0x78>
 800e0b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e0bc:	4302      	orrs	r2, r0
 800e0be:	d023      	beq.n	800e108 <rint+0x70>
 800e0c0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e0c4:	4302      	orrs	r2, r0
 800e0c6:	4254      	negs	r4, r2
 800e0c8:	4314      	orrs	r4, r2
 800e0ca:	0c4b      	lsrs	r3, r1, #17
 800e0cc:	0b24      	lsrs	r4, r4, #12
 800e0ce:	045b      	lsls	r3, r3, #17
 800e0d0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800e0d4:	ea44 0103 	orr.w	r1, r4, r3
 800e0d8:	460b      	mov	r3, r1
 800e0da:	492f      	ldr	r1, [pc, #188]	; (800e198 <rint+0x100>)
 800e0dc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800e0e0:	e9d1 6700 	ldrd	r6, r7, [r1]
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	4639      	mov	r1, r7
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	f7f2 f887 	bl	80001fc <__adddf3>
 800e0ee:	e9cd 0100 	strd	r0, r1, [sp]
 800e0f2:	463b      	mov	r3, r7
 800e0f4:	4632      	mov	r2, r6
 800e0f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0fa:	f7f2 f87d 	bl	80001f8 <__aeabi_dsub>
 800e0fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e102:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e106:	4639      	mov	r1, r7
 800e108:	ec41 0b10 	vmov	d0, r0, r1
 800e10c:	b003      	add	sp, #12
 800e10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e110:	4a22      	ldr	r2, [pc, #136]	; (800e19c <rint+0x104>)
 800e112:	4132      	asrs	r2, r6
 800e114:	ea01 0702 	and.w	r7, r1, r2
 800e118:	4307      	orrs	r7, r0
 800e11a:	d0f5      	beq.n	800e108 <rint+0x70>
 800e11c:	0852      	lsrs	r2, r2, #1
 800e11e:	4011      	ands	r1, r2
 800e120:	430c      	orrs	r4, r1
 800e122:	d00b      	beq.n	800e13c <rint+0xa4>
 800e124:	ea23 0202 	bic.w	r2, r3, r2
 800e128:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e12c:	2e13      	cmp	r6, #19
 800e12e:	fa43 f306 	asr.w	r3, r3, r6
 800e132:	bf0c      	ite	eq
 800e134:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e138:	2400      	movne	r4, #0
 800e13a:	4313      	orrs	r3, r2
 800e13c:	4916      	ldr	r1, [pc, #88]	; (800e198 <rint+0x100>)
 800e13e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e142:	4622      	mov	r2, r4
 800e144:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e148:	4620      	mov	r0, r4
 800e14a:	4629      	mov	r1, r5
 800e14c:	f7f2 f856 	bl	80001fc <__adddf3>
 800e150:	e9cd 0100 	strd	r0, r1, [sp]
 800e154:	4622      	mov	r2, r4
 800e156:	462b      	mov	r3, r5
 800e158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e15c:	f7f2 f84c 	bl	80001f8 <__aeabi_dsub>
 800e160:	e7d2      	b.n	800e108 <rint+0x70>
 800e162:	2e33      	cmp	r6, #51	; 0x33
 800e164:	dd07      	ble.n	800e176 <rint+0xde>
 800e166:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e16a:	d1cd      	bne.n	800e108 <rint+0x70>
 800e16c:	ee10 2a10 	vmov	r2, s0
 800e170:	f7f2 f844 	bl	80001fc <__adddf3>
 800e174:	e7c8      	b.n	800e108 <rint+0x70>
 800e176:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800e17a:	f04f 32ff 	mov.w	r2, #4294967295
 800e17e:	40f2      	lsrs	r2, r6
 800e180:	4210      	tst	r0, r2
 800e182:	d0c1      	beq.n	800e108 <rint+0x70>
 800e184:	0852      	lsrs	r2, r2, #1
 800e186:	4210      	tst	r0, r2
 800e188:	bf1f      	itttt	ne
 800e18a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e18e:	ea20 0202 	bicne.w	r2, r0, r2
 800e192:	4134      	asrne	r4, r6
 800e194:	4314      	orrne	r4, r2
 800e196:	e7d1      	b.n	800e13c <rint+0xa4>
 800e198:	08010ff8 	.word	0x08010ff8
 800e19c:	000fffff 	.word	0x000fffff

0800e1a0 <scalbn>:
 800e1a0:	b570      	push	{r4, r5, r6, lr}
 800e1a2:	ec55 4b10 	vmov	r4, r5, d0
 800e1a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e1aa:	4606      	mov	r6, r0
 800e1ac:	462b      	mov	r3, r5
 800e1ae:	b9aa      	cbnz	r2, 800e1dc <scalbn+0x3c>
 800e1b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e1b4:	4323      	orrs	r3, r4
 800e1b6:	d03b      	beq.n	800e230 <scalbn+0x90>
 800e1b8:	4b31      	ldr	r3, [pc, #196]	; (800e280 <scalbn+0xe0>)
 800e1ba:	4629      	mov	r1, r5
 800e1bc:	2200      	movs	r2, #0
 800e1be:	ee10 0a10 	vmov	r0, s0
 800e1c2:	f7f2 f9d1 	bl	8000568 <__aeabi_dmul>
 800e1c6:	4b2f      	ldr	r3, [pc, #188]	; (800e284 <scalbn+0xe4>)
 800e1c8:	429e      	cmp	r6, r3
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	460d      	mov	r5, r1
 800e1ce:	da12      	bge.n	800e1f6 <scalbn+0x56>
 800e1d0:	a327      	add	r3, pc, #156	; (adr r3, 800e270 <scalbn+0xd0>)
 800e1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d6:	f7f2 f9c7 	bl	8000568 <__aeabi_dmul>
 800e1da:	e009      	b.n	800e1f0 <scalbn+0x50>
 800e1dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e1e0:	428a      	cmp	r2, r1
 800e1e2:	d10c      	bne.n	800e1fe <scalbn+0x5e>
 800e1e4:	ee10 2a10 	vmov	r2, s0
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	4629      	mov	r1, r5
 800e1ec:	f7f2 f806 	bl	80001fc <__adddf3>
 800e1f0:	4604      	mov	r4, r0
 800e1f2:	460d      	mov	r5, r1
 800e1f4:	e01c      	b.n	800e230 <scalbn+0x90>
 800e1f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	3a36      	subs	r2, #54	; 0x36
 800e1fe:	4432      	add	r2, r6
 800e200:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e204:	428a      	cmp	r2, r1
 800e206:	dd0b      	ble.n	800e220 <scalbn+0x80>
 800e208:	ec45 4b11 	vmov	d1, r4, r5
 800e20c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800e278 <scalbn+0xd8>
 800e210:	f000 fabe 	bl	800e790 <copysign>
 800e214:	a318      	add	r3, pc, #96	; (adr r3, 800e278 <scalbn+0xd8>)
 800e216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21a:	ec51 0b10 	vmov	r0, r1, d0
 800e21e:	e7da      	b.n	800e1d6 <scalbn+0x36>
 800e220:	2a00      	cmp	r2, #0
 800e222:	dd08      	ble.n	800e236 <scalbn+0x96>
 800e224:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e228:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e22c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e230:	ec45 4b10 	vmov	d0, r4, r5
 800e234:	bd70      	pop	{r4, r5, r6, pc}
 800e236:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e23a:	da0d      	bge.n	800e258 <scalbn+0xb8>
 800e23c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e240:	429e      	cmp	r6, r3
 800e242:	ec45 4b11 	vmov	d1, r4, r5
 800e246:	dce1      	bgt.n	800e20c <scalbn+0x6c>
 800e248:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e270 <scalbn+0xd0>
 800e24c:	f000 faa0 	bl	800e790 <copysign>
 800e250:	a307      	add	r3, pc, #28	; (adr r3, 800e270 <scalbn+0xd0>)
 800e252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e256:	e7e0      	b.n	800e21a <scalbn+0x7a>
 800e258:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e25c:	3236      	adds	r2, #54	; 0x36
 800e25e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e262:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e266:	4620      	mov	r0, r4
 800e268:	4629      	mov	r1, r5
 800e26a:	2200      	movs	r2, #0
 800e26c:	4b06      	ldr	r3, [pc, #24]	; (800e288 <scalbn+0xe8>)
 800e26e:	e7b2      	b.n	800e1d6 <scalbn+0x36>
 800e270:	c2f8f359 	.word	0xc2f8f359
 800e274:	01a56e1f 	.word	0x01a56e1f
 800e278:	8800759c 	.word	0x8800759c
 800e27c:	7e37e43c 	.word	0x7e37e43c
 800e280:	43500000 	.word	0x43500000
 800e284:	ffff3cb0 	.word	0xffff3cb0
 800e288:	3c900000 	.word	0x3c900000

0800e28c <atan2>:
 800e28c:	f000 b800 	b.w	800e290 <__ieee754_atan2>

0800e290 <__ieee754_atan2>:
 800e290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e294:	ec57 6b11 	vmov	r6, r7, d1
 800e298:	4273      	negs	r3, r6
 800e29a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e29e:	4333      	orrs	r3, r6
 800e2a0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800e448 <__ieee754_atan2+0x1b8>
 800e2a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e2a8:	4573      	cmp	r3, lr
 800e2aa:	ec51 0b10 	vmov	r0, r1, d0
 800e2ae:	ee11 8a10 	vmov	r8, s2
 800e2b2:	d80a      	bhi.n	800e2ca <__ieee754_atan2+0x3a>
 800e2b4:	4244      	negs	r4, r0
 800e2b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e2ba:	4304      	orrs	r4, r0
 800e2bc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e2c0:	4574      	cmp	r4, lr
 800e2c2:	468c      	mov	ip, r1
 800e2c4:	ee10 9a10 	vmov	r9, s0
 800e2c8:	d907      	bls.n	800e2da <__ieee754_atan2+0x4a>
 800e2ca:	4632      	mov	r2, r6
 800e2cc:	463b      	mov	r3, r7
 800e2ce:	f7f1 ff95 	bl	80001fc <__adddf3>
 800e2d2:	ec41 0b10 	vmov	d0, r0, r1
 800e2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2da:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e2de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e2e2:	4334      	orrs	r4, r6
 800e2e4:	d103      	bne.n	800e2ee <__ieee754_atan2+0x5e>
 800e2e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2ea:	f000 b8b1 	b.w	800e450 <atan>
 800e2ee:	17bc      	asrs	r4, r7, #30
 800e2f0:	f004 0402 	and.w	r4, r4, #2
 800e2f4:	ea53 0909 	orrs.w	r9, r3, r9
 800e2f8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e2fc:	d107      	bne.n	800e30e <__ieee754_atan2+0x7e>
 800e2fe:	2c02      	cmp	r4, #2
 800e300:	d073      	beq.n	800e3ea <__ieee754_atan2+0x15a>
 800e302:	2c03      	cmp	r4, #3
 800e304:	d1e5      	bne.n	800e2d2 <__ieee754_atan2+0x42>
 800e306:	a13e      	add	r1, pc, #248	; (adr r1, 800e400 <__ieee754_atan2+0x170>)
 800e308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e30c:	e7e1      	b.n	800e2d2 <__ieee754_atan2+0x42>
 800e30e:	ea52 0808 	orrs.w	r8, r2, r8
 800e312:	d106      	bne.n	800e322 <__ieee754_atan2+0x92>
 800e314:	f1bc 0f00 	cmp.w	ip, #0
 800e318:	da6b      	bge.n	800e3f2 <__ieee754_atan2+0x162>
 800e31a:	a13b      	add	r1, pc, #236	; (adr r1, 800e408 <__ieee754_atan2+0x178>)
 800e31c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e320:	e7d7      	b.n	800e2d2 <__ieee754_atan2+0x42>
 800e322:	4572      	cmp	r2, lr
 800e324:	d120      	bne.n	800e368 <__ieee754_atan2+0xd8>
 800e326:	4293      	cmp	r3, r2
 800e328:	d111      	bne.n	800e34e <__ieee754_atan2+0xbe>
 800e32a:	2c02      	cmp	r4, #2
 800e32c:	d007      	beq.n	800e33e <__ieee754_atan2+0xae>
 800e32e:	2c03      	cmp	r4, #3
 800e330:	d009      	beq.n	800e346 <__ieee754_atan2+0xb6>
 800e332:	2c01      	cmp	r4, #1
 800e334:	d155      	bne.n	800e3e2 <__ieee754_atan2+0x152>
 800e336:	a136      	add	r1, pc, #216	; (adr r1, 800e410 <__ieee754_atan2+0x180>)
 800e338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e33c:	e7c9      	b.n	800e2d2 <__ieee754_atan2+0x42>
 800e33e:	a136      	add	r1, pc, #216	; (adr r1, 800e418 <__ieee754_atan2+0x188>)
 800e340:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e344:	e7c5      	b.n	800e2d2 <__ieee754_atan2+0x42>
 800e346:	a136      	add	r1, pc, #216	; (adr r1, 800e420 <__ieee754_atan2+0x190>)
 800e348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e34c:	e7c1      	b.n	800e2d2 <__ieee754_atan2+0x42>
 800e34e:	2c02      	cmp	r4, #2
 800e350:	d04b      	beq.n	800e3ea <__ieee754_atan2+0x15a>
 800e352:	2c03      	cmp	r4, #3
 800e354:	d0d7      	beq.n	800e306 <__ieee754_atan2+0x76>
 800e356:	2c01      	cmp	r4, #1
 800e358:	f04f 0000 	mov.w	r0, #0
 800e35c:	d102      	bne.n	800e364 <__ieee754_atan2+0xd4>
 800e35e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e362:	e7b6      	b.n	800e2d2 <__ieee754_atan2+0x42>
 800e364:	2100      	movs	r1, #0
 800e366:	e7b4      	b.n	800e2d2 <__ieee754_atan2+0x42>
 800e368:	4573      	cmp	r3, lr
 800e36a:	d0d3      	beq.n	800e314 <__ieee754_atan2+0x84>
 800e36c:	1a9b      	subs	r3, r3, r2
 800e36e:	151b      	asrs	r3, r3, #20
 800e370:	2b3c      	cmp	r3, #60	; 0x3c
 800e372:	dc1e      	bgt.n	800e3b2 <__ieee754_atan2+0x122>
 800e374:	2f00      	cmp	r7, #0
 800e376:	da01      	bge.n	800e37c <__ieee754_atan2+0xec>
 800e378:	333c      	adds	r3, #60	; 0x3c
 800e37a:	db1e      	blt.n	800e3ba <__ieee754_atan2+0x12a>
 800e37c:	4632      	mov	r2, r6
 800e37e:	463b      	mov	r3, r7
 800e380:	f7f2 fa1c 	bl	80007bc <__aeabi_ddiv>
 800e384:	ec41 0b10 	vmov	d0, r0, r1
 800e388:	f7fc fd2e 	bl	800ade8 <fabs>
 800e38c:	f000 f860 	bl	800e450 <atan>
 800e390:	ec51 0b10 	vmov	r0, r1, d0
 800e394:	2c01      	cmp	r4, #1
 800e396:	d013      	beq.n	800e3c0 <__ieee754_atan2+0x130>
 800e398:	2c02      	cmp	r4, #2
 800e39a:	d015      	beq.n	800e3c8 <__ieee754_atan2+0x138>
 800e39c:	2c00      	cmp	r4, #0
 800e39e:	d098      	beq.n	800e2d2 <__ieee754_atan2+0x42>
 800e3a0:	a321      	add	r3, pc, #132	; (adr r3, 800e428 <__ieee754_atan2+0x198>)
 800e3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a6:	f7f1 ff27 	bl	80001f8 <__aeabi_dsub>
 800e3aa:	a321      	add	r3, pc, #132	; (adr r3, 800e430 <__ieee754_atan2+0x1a0>)
 800e3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b0:	e014      	b.n	800e3dc <__ieee754_atan2+0x14c>
 800e3b2:	a121      	add	r1, pc, #132	; (adr r1, 800e438 <__ieee754_atan2+0x1a8>)
 800e3b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3b8:	e7ec      	b.n	800e394 <__ieee754_atan2+0x104>
 800e3ba:	2000      	movs	r0, #0
 800e3bc:	2100      	movs	r1, #0
 800e3be:	e7e9      	b.n	800e394 <__ieee754_atan2+0x104>
 800e3c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	e784      	b.n	800e2d2 <__ieee754_atan2+0x42>
 800e3c8:	a317      	add	r3, pc, #92	; (adr r3, 800e428 <__ieee754_atan2+0x198>)
 800e3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ce:	f7f1 ff13 	bl	80001f8 <__aeabi_dsub>
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	460b      	mov	r3, r1
 800e3d6:	a116      	add	r1, pc, #88	; (adr r1, 800e430 <__ieee754_atan2+0x1a0>)
 800e3d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3dc:	f7f1 ff0c 	bl	80001f8 <__aeabi_dsub>
 800e3e0:	e777      	b.n	800e2d2 <__ieee754_atan2+0x42>
 800e3e2:	a117      	add	r1, pc, #92	; (adr r1, 800e440 <__ieee754_atan2+0x1b0>)
 800e3e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3e8:	e773      	b.n	800e2d2 <__ieee754_atan2+0x42>
 800e3ea:	a111      	add	r1, pc, #68	; (adr r1, 800e430 <__ieee754_atan2+0x1a0>)
 800e3ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3f0:	e76f      	b.n	800e2d2 <__ieee754_atan2+0x42>
 800e3f2:	a111      	add	r1, pc, #68	; (adr r1, 800e438 <__ieee754_atan2+0x1a8>)
 800e3f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3f8:	e76b      	b.n	800e2d2 <__ieee754_atan2+0x42>
 800e3fa:	bf00      	nop
 800e3fc:	f3af 8000 	nop.w
 800e400:	54442d18 	.word	0x54442d18
 800e404:	c00921fb 	.word	0xc00921fb
 800e408:	54442d18 	.word	0x54442d18
 800e40c:	bff921fb 	.word	0xbff921fb
 800e410:	54442d18 	.word	0x54442d18
 800e414:	bfe921fb 	.word	0xbfe921fb
 800e418:	7f3321d2 	.word	0x7f3321d2
 800e41c:	4002d97c 	.word	0x4002d97c
 800e420:	7f3321d2 	.word	0x7f3321d2
 800e424:	c002d97c 	.word	0xc002d97c
 800e428:	33145c07 	.word	0x33145c07
 800e42c:	3ca1a626 	.word	0x3ca1a626
 800e430:	54442d18 	.word	0x54442d18
 800e434:	400921fb 	.word	0x400921fb
 800e438:	54442d18 	.word	0x54442d18
 800e43c:	3ff921fb 	.word	0x3ff921fb
 800e440:	54442d18 	.word	0x54442d18
 800e444:	3fe921fb 	.word	0x3fe921fb
 800e448:	7ff00000 	.word	0x7ff00000
 800e44c:	00000000 	.word	0x00000000

0800e450 <atan>:
 800e450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e454:	ec55 4b10 	vmov	r4, r5, d0
 800e458:	4bc3      	ldr	r3, [pc, #780]	; (800e768 <atan+0x318>)
 800e45a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e45e:	429e      	cmp	r6, r3
 800e460:	46ab      	mov	fp, r5
 800e462:	dd18      	ble.n	800e496 <atan+0x46>
 800e464:	4bc1      	ldr	r3, [pc, #772]	; (800e76c <atan+0x31c>)
 800e466:	429e      	cmp	r6, r3
 800e468:	dc01      	bgt.n	800e46e <atan+0x1e>
 800e46a:	d109      	bne.n	800e480 <atan+0x30>
 800e46c:	b144      	cbz	r4, 800e480 <atan+0x30>
 800e46e:	4622      	mov	r2, r4
 800e470:	462b      	mov	r3, r5
 800e472:	4620      	mov	r0, r4
 800e474:	4629      	mov	r1, r5
 800e476:	f7f1 fec1 	bl	80001fc <__adddf3>
 800e47a:	4604      	mov	r4, r0
 800e47c:	460d      	mov	r5, r1
 800e47e:	e006      	b.n	800e48e <atan+0x3e>
 800e480:	f1bb 0f00 	cmp.w	fp, #0
 800e484:	f340 8131 	ble.w	800e6ea <atan+0x29a>
 800e488:	a59b      	add	r5, pc, #620	; (adr r5, 800e6f8 <atan+0x2a8>)
 800e48a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e48e:	ec45 4b10 	vmov	d0, r4, r5
 800e492:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e496:	4bb6      	ldr	r3, [pc, #728]	; (800e770 <atan+0x320>)
 800e498:	429e      	cmp	r6, r3
 800e49a:	dc14      	bgt.n	800e4c6 <atan+0x76>
 800e49c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e4a0:	429e      	cmp	r6, r3
 800e4a2:	dc0d      	bgt.n	800e4c0 <atan+0x70>
 800e4a4:	a396      	add	r3, pc, #600	; (adr r3, 800e700 <atan+0x2b0>)
 800e4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4aa:	ee10 0a10 	vmov	r0, s0
 800e4ae:	4629      	mov	r1, r5
 800e4b0:	f7f1 fea4 	bl	80001fc <__adddf3>
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	4baf      	ldr	r3, [pc, #700]	; (800e774 <atan+0x324>)
 800e4b8:	f7f2 fae6 	bl	8000a88 <__aeabi_dcmpgt>
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d1e6      	bne.n	800e48e <atan+0x3e>
 800e4c0:	f04f 3aff 	mov.w	sl, #4294967295
 800e4c4:	e02b      	b.n	800e51e <atan+0xce>
 800e4c6:	f7fc fc8f 	bl	800ade8 <fabs>
 800e4ca:	4bab      	ldr	r3, [pc, #684]	; (800e778 <atan+0x328>)
 800e4cc:	429e      	cmp	r6, r3
 800e4ce:	ec55 4b10 	vmov	r4, r5, d0
 800e4d2:	f300 80bf 	bgt.w	800e654 <atan+0x204>
 800e4d6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e4da:	429e      	cmp	r6, r3
 800e4dc:	f300 80a0 	bgt.w	800e620 <atan+0x1d0>
 800e4e0:	ee10 2a10 	vmov	r2, s0
 800e4e4:	ee10 0a10 	vmov	r0, s0
 800e4e8:	462b      	mov	r3, r5
 800e4ea:	4629      	mov	r1, r5
 800e4ec:	f7f1 fe86 	bl	80001fc <__adddf3>
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	4ba0      	ldr	r3, [pc, #640]	; (800e774 <atan+0x324>)
 800e4f4:	f7f1 fe80 	bl	80001f8 <__aeabi_dsub>
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	4606      	mov	r6, r0
 800e4fc:	460f      	mov	r7, r1
 800e4fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e502:	4620      	mov	r0, r4
 800e504:	4629      	mov	r1, r5
 800e506:	f7f1 fe79 	bl	80001fc <__adddf3>
 800e50a:	4602      	mov	r2, r0
 800e50c:	460b      	mov	r3, r1
 800e50e:	4630      	mov	r0, r6
 800e510:	4639      	mov	r1, r7
 800e512:	f7f2 f953 	bl	80007bc <__aeabi_ddiv>
 800e516:	f04f 0a00 	mov.w	sl, #0
 800e51a:	4604      	mov	r4, r0
 800e51c:	460d      	mov	r5, r1
 800e51e:	4622      	mov	r2, r4
 800e520:	462b      	mov	r3, r5
 800e522:	4620      	mov	r0, r4
 800e524:	4629      	mov	r1, r5
 800e526:	f7f2 f81f 	bl	8000568 <__aeabi_dmul>
 800e52a:	4602      	mov	r2, r0
 800e52c:	460b      	mov	r3, r1
 800e52e:	4680      	mov	r8, r0
 800e530:	4689      	mov	r9, r1
 800e532:	f7f2 f819 	bl	8000568 <__aeabi_dmul>
 800e536:	a374      	add	r3, pc, #464	; (adr r3, 800e708 <atan+0x2b8>)
 800e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53c:	4606      	mov	r6, r0
 800e53e:	460f      	mov	r7, r1
 800e540:	f7f2 f812 	bl	8000568 <__aeabi_dmul>
 800e544:	a372      	add	r3, pc, #456	; (adr r3, 800e710 <atan+0x2c0>)
 800e546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54a:	f7f1 fe57 	bl	80001fc <__adddf3>
 800e54e:	4632      	mov	r2, r6
 800e550:	463b      	mov	r3, r7
 800e552:	f7f2 f809 	bl	8000568 <__aeabi_dmul>
 800e556:	a370      	add	r3, pc, #448	; (adr r3, 800e718 <atan+0x2c8>)
 800e558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55c:	f7f1 fe4e 	bl	80001fc <__adddf3>
 800e560:	4632      	mov	r2, r6
 800e562:	463b      	mov	r3, r7
 800e564:	f7f2 f800 	bl	8000568 <__aeabi_dmul>
 800e568:	a36d      	add	r3, pc, #436	; (adr r3, 800e720 <atan+0x2d0>)
 800e56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56e:	f7f1 fe45 	bl	80001fc <__adddf3>
 800e572:	4632      	mov	r2, r6
 800e574:	463b      	mov	r3, r7
 800e576:	f7f1 fff7 	bl	8000568 <__aeabi_dmul>
 800e57a:	a36b      	add	r3, pc, #428	; (adr r3, 800e728 <atan+0x2d8>)
 800e57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e580:	f7f1 fe3c 	bl	80001fc <__adddf3>
 800e584:	4632      	mov	r2, r6
 800e586:	463b      	mov	r3, r7
 800e588:	f7f1 ffee 	bl	8000568 <__aeabi_dmul>
 800e58c:	a368      	add	r3, pc, #416	; (adr r3, 800e730 <atan+0x2e0>)
 800e58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e592:	f7f1 fe33 	bl	80001fc <__adddf3>
 800e596:	4642      	mov	r2, r8
 800e598:	464b      	mov	r3, r9
 800e59a:	f7f1 ffe5 	bl	8000568 <__aeabi_dmul>
 800e59e:	a366      	add	r3, pc, #408	; (adr r3, 800e738 <atan+0x2e8>)
 800e5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a4:	4680      	mov	r8, r0
 800e5a6:	4689      	mov	r9, r1
 800e5a8:	4630      	mov	r0, r6
 800e5aa:	4639      	mov	r1, r7
 800e5ac:	f7f1 ffdc 	bl	8000568 <__aeabi_dmul>
 800e5b0:	a363      	add	r3, pc, #396	; (adr r3, 800e740 <atan+0x2f0>)
 800e5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b6:	f7f1 fe1f 	bl	80001f8 <__aeabi_dsub>
 800e5ba:	4632      	mov	r2, r6
 800e5bc:	463b      	mov	r3, r7
 800e5be:	f7f1 ffd3 	bl	8000568 <__aeabi_dmul>
 800e5c2:	a361      	add	r3, pc, #388	; (adr r3, 800e748 <atan+0x2f8>)
 800e5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c8:	f7f1 fe16 	bl	80001f8 <__aeabi_dsub>
 800e5cc:	4632      	mov	r2, r6
 800e5ce:	463b      	mov	r3, r7
 800e5d0:	f7f1 ffca 	bl	8000568 <__aeabi_dmul>
 800e5d4:	a35e      	add	r3, pc, #376	; (adr r3, 800e750 <atan+0x300>)
 800e5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5da:	f7f1 fe0d 	bl	80001f8 <__aeabi_dsub>
 800e5de:	4632      	mov	r2, r6
 800e5e0:	463b      	mov	r3, r7
 800e5e2:	f7f1 ffc1 	bl	8000568 <__aeabi_dmul>
 800e5e6:	a35c      	add	r3, pc, #368	; (adr r3, 800e758 <atan+0x308>)
 800e5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ec:	f7f1 fe04 	bl	80001f8 <__aeabi_dsub>
 800e5f0:	4632      	mov	r2, r6
 800e5f2:	463b      	mov	r3, r7
 800e5f4:	f7f1 ffb8 	bl	8000568 <__aeabi_dmul>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	4640      	mov	r0, r8
 800e5fe:	4649      	mov	r1, r9
 800e600:	f7f1 fdfc 	bl	80001fc <__adddf3>
 800e604:	4622      	mov	r2, r4
 800e606:	462b      	mov	r3, r5
 800e608:	f7f1 ffae 	bl	8000568 <__aeabi_dmul>
 800e60c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e610:	4602      	mov	r2, r0
 800e612:	460b      	mov	r3, r1
 800e614:	d14b      	bne.n	800e6ae <atan+0x25e>
 800e616:	4620      	mov	r0, r4
 800e618:	4629      	mov	r1, r5
 800e61a:	f7f1 fded 	bl	80001f8 <__aeabi_dsub>
 800e61e:	e72c      	b.n	800e47a <atan+0x2a>
 800e620:	ee10 0a10 	vmov	r0, s0
 800e624:	2200      	movs	r2, #0
 800e626:	4b53      	ldr	r3, [pc, #332]	; (800e774 <atan+0x324>)
 800e628:	4629      	mov	r1, r5
 800e62a:	f7f1 fde5 	bl	80001f8 <__aeabi_dsub>
 800e62e:	2200      	movs	r2, #0
 800e630:	4606      	mov	r6, r0
 800e632:	460f      	mov	r7, r1
 800e634:	4b4f      	ldr	r3, [pc, #316]	; (800e774 <atan+0x324>)
 800e636:	4620      	mov	r0, r4
 800e638:	4629      	mov	r1, r5
 800e63a:	f7f1 fddf 	bl	80001fc <__adddf3>
 800e63e:	4602      	mov	r2, r0
 800e640:	460b      	mov	r3, r1
 800e642:	4630      	mov	r0, r6
 800e644:	4639      	mov	r1, r7
 800e646:	f7f2 f8b9 	bl	80007bc <__aeabi_ddiv>
 800e64a:	f04f 0a01 	mov.w	sl, #1
 800e64e:	4604      	mov	r4, r0
 800e650:	460d      	mov	r5, r1
 800e652:	e764      	b.n	800e51e <atan+0xce>
 800e654:	4b49      	ldr	r3, [pc, #292]	; (800e77c <atan+0x32c>)
 800e656:	429e      	cmp	r6, r3
 800e658:	dc1d      	bgt.n	800e696 <atan+0x246>
 800e65a:	ee10 0a10 	vmov	r0, s0
 800e65e:	2200      	movs	r2, #0
 800e660:	4b47      	ldr	r3, [pc, #284]	; (800e780 <atan+0x330>)
 800e662:	4629      	mov	r1, r5
 800e664:	f7f1 fdc8 	bl	80001f8 <__aeabi_dsub>
 800e668:	2200      	movs	r2, #0
 800e66a:	4606      	mov	r6, r0
 800e66c:	460f      	mov	r7, r1
 800e66e:	4b44      	ldr	r3, [pc, #272]	; (800e780 <atan+0x330>)
 800e670:	4620      	mov	r0, r4
 800e672:	4629      	mov	r1, r5
 800e674:	f7f1 ff78 	bl	8000568 <__aeabi_dmul>
 800e678:	2200      	movs	r2, #0
 800e67a:	4b3e      	ldr	r3, [pc, #248]	; (800e774 <atan+0x324>)
 800e67c:	f7f1 fdbe 	bl	80001fc <__adddf3>
 800e680:	4602      	mov	r2, r0
 800e682:	460b      	mov	r3, r1
 800e684:	4630      	mov	r0, r6
 800e686:	4639      	mov	r1, r7
 800e688:	f7f2 f898 	bl	80007bc <__aeabi_ddiv>
 800e68c:	f04f 0a02 	mov.w	sl, #2
 800e690:	4604      	mov	r4, r0
 800e692:	460d      	mov	r5, r1
 800e694:	e743      	b.n	800e51e <atan+0xce>
 800e696:	462b      	mov	r3, r5
 800e698:	ee10 2a10 	vmov	r2, s0
 800e69c:	2000      	movs	r0, #0
 800e69e:	4939      	ldr	r1, [pc, #228]	; (800e784 <atan+0x334>)
 800e6a0:	f7f2 f88c 	bl	80007bc <__aeabi_ddiv>
 800e6a4:	f04f 0a03 	mov.w	sl, #3
 800e6a8:	4604      	mov	r4, r0
 800e6aa:	460d      	mov	r5, r1
 800e6ac:	e737      	b.n	800e51e <atan+0xce>
 800e6ae:	4b36      	ldr	r3, [pc, #216]	; (800e788 <atan+0x338>)
 800e6b0:	4e36      	ldr	r6, [pc, #216]	; (800e78c <atan+0x33c>)
 800e6b2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800e6b6:	4456      	add	r6, sl
 800e6b8:	449a      	add	sl, r3
 800e6ba:	e9da 2300 	ldrd	r2, r3, [sl]
 800e6be:	f7f1 fd9b 	bl	80001f8 <__aeabi_dsub>
 800e6c2:	4622      	mov	r2, r4
 800e6c4:	462b      	mov	r3, r5
 800e6c6:	f7f1 fd97 	bl	80001f8 <__aeabi_dsub>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e6d2:	f7f1 fd91 	bl	80001f8 <__aeabi_dsub>
 800e6d6:	f1bb 0f00 	cmp.w	fp, #0
 800e6da:	4604      	mov	r4, r0
 800e6dc:	460d      	mov	r5, r1
 800e6de:	f6bf aed6 	bge.w	800e48e <atan+0x3e>
 800e6e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6e6:	461d      	mov	r5, r3
 800e6e8:	e6d1      	b.n	800e48e <atan+0x3e>
 800e6ea:	a51d      	add	r5, pc, #116	; (adr r5, 800e760 <atan+0x310>)
 800e6ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e6f0:	e6cd      	b.n	800e48e <atan+0x3e>
 800e6f2:	bf00      	nop
 800e6f4:	f3af 8000 	nop.w
 800e6f8:	54442d18 	.word	0x54442d18
 800e6fc:	3ff921fb 	.word	0x3ff921fb
 800e700:	8800759c 	.word	0x8800759c
 800e704:	7e37e43c 	.word	0x7e37e43c
 800e708:	e322da11 	.word	0xe322da11
 800e70c:	3f90ad3a 	.word	0x3f90ad3a
 800e710:	24760deb 	.word	0x24760deb
 800e714:	3fa97b4b 	.word	0x3fa97b4b
 800e718:	a0d03d51 	.word	0xa0d03d51
 800e71c:	3fb10d66 	.word	0x3fb10d66
 800e720:	c54c206e 	.word	0xc54c206e
 800e724:	3fb745cd 	.word	0x3fb745cd
 800e728:	920083ff 	.word	0x920083ff
 800e72c:	3fc24924 	.word	0x3fc24924
 800e730:	5555550d 	.word	0x5555550d
 800e734:	3fd55555 	.word	0x3fd55555
 800e738:	2c6a6c2f 	.word	0x2c6a6c2f
 800e73c:	bfa2b444 	.word	0xbfa2b444
 800e740:	52defd9a 	.word	0x52defd9a
 800e744:	3fadde2d 	.word	0x3fadde2d
 800e748:	af749a6d 	.word	0xaf749a6d
 800e74c:	3fb3b0f2 	.word	0x3fb3b0f2
 800e750:	fe231671 	.word	0xfe231671
 800e754:	3fbc71c6 	.word	0x3fbc71c6
 800e758:	9998ebc4 	.word	0x9998ebc4
 800e75c:	3fc99999 	.word	0x3fc99999
 800e760:	54442d18 	.word	0x54442d18
 800e764:	bff921fb 	.word	0xbff921fb
 800e768:	440fffff 	.word	0x440fffff
 800e76c:	7ff00000 	.word	0x7ff00000
 800e770:	3fdbffff 	.word	0x3fdbffff
 800e774:	3ff00000 	.word	0x3ff00000
 800e778:	3ff2ffff 	.word	0x3ff2ffff
 800e77c:	40037fff 	.word	0x40037fff
 800e780:	3ff80000 	.word	0x3ff80000
 800e784:	bff00000 	.word	0xbff00000
 800e788:	08011028 	.word	0x08011028
 800e78c:	08011008 	.word	0x08011008

0800e790 <copysign>:
 800e790:	ec51 0b10 	vmov	r0, r1, d0
 800e794:	ee11 0a90 	vmov	r0, s3
 800e798:	ee10 2a10 	vmov	r2, s0
 800e79c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e7a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e7a4:	ea41 0300 	orr.w	r3, r1, r0
 800e7a8:	ec43 2b10 	vmov	d0, r2, r3
 800e7ac:	4770      	bx	lr
	...

0800e7b0 <_gettimeofday>:
 800e7b0:	4b02      	ldr	r3, [pc, #8]	; (800e7bc <_gettimeofday+0xc>)
 800e7b2:	2258      	movs	r2, #88	; 0x58
 800e7b4:	601a      	str	r2, [r3, #0]
 800e7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ba:	4770      	bx	lr
 800e7bc:	20001660 	.word	0x20001660

0800e7c0 <_init>:
 800e7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7c2:	bf00      	nop
 800e7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7c6:	bc08      	pop	{r3}
 800e7c8:	469e      	mov	lr, r3
 800e7ca:	4770      	bx	lr

0800e7cc <_fini>:
 800e7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ce:	bf00      	nop
 800e7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7d2:	bc08      	pop	{r3}
 800e7d4:	469e      	mov	lr, r3
 800e7d6:	4770      	bx	lr
